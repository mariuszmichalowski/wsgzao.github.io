<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HelloDog</title>
  
  <subtitle>Keep Calm and Carry On</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wsgzao.github.io/"/>
  <updated>2020-10-23T09:43:56.432Z</updated>
  <id>https://wsgzao.github.io/</id>
  
  <author>
    <name>wsgzao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用 acme.sh 免费申请 HTTPS 证书</title>
    <link href="https://wsgzao.github.io/post/acme/"/>
    <id>https://wsgzao.github.io/post/acme/</id>
    <published>2020-10-23T06:59:49.000Z</published>
    <updated>2020-10-23T09:43:56.432Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/wsgzao/storage-public/master/img/20200219171300.png" alt=""></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为 Google Chrome 和运营商劫持干扰访问者体验的努力推动了大型网站加速应用全站 HTTPS，而 <a href="https://letsencrypt.org/" target="_blank" rel="noopener">Let’s Encrypt</a> 这个项目通过自动化把配置和维护 HTTPS 变得更加简单，Let’s Encrypt 设计了一个 ACME 协议目前版本是 v2，并在 2018 年支持通配符证书<a href="https://community.letsencrypt.org/t/acme-v2-and-wildcard-certificate-support-is-live/55579" target="_blank" rel="noopener">Wildcard Certificate Support is Live</a>。官网主推的客户端是<a href="https://certbot.eff.org/" target="_blank" rel="noopener">Certbot</a>，任何人都可以基于 ACME 协议实现一个客户端，比如大名鼎鼎的<a href="https://github.com/Neilpang/acme.sh" target="_blank" rel="noopener">acme.sh</a>。本文主要记录了使用 acme.sh 基于 dns-api 协议生成证书的过程。</p><h2 id="更新历史"><a href="#更新历史" class="headerlink" title="更新历史"></a>更新历史</h2><p>2020 年 10 月 23 日 - 初稿</p><p>阅读原文 - <a href="https://wsgzao.github.io/post/acme/">https://wsgzao.github.io/post/acme/</a></p><hr><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="关于-HTTPS"><a href="#关于-HTTPS" class="headerlink" title="关于 HTTPS"></a>关于 HTTPS</h3><blockquote><p>引维基百科的说法</p></blockquote><p>超文本传输安全协议（英语：Hypertext Transfer Protocol Secure，缩写：HTTPS）是一种网络安全传输协议。在计算机网络上，HTTPS 经由超文本传输协议进行通信，但利用 SSL/TLS 来对数据包进行加密。HTTPS 开发的主要目的，是提供对网络服务器的身份认证，保护交换数据的隐私与完整性</p><p>HTTPS 的主要思想是在不安全的网络上创建一安全信道，并可在使用适当的加密包和服务器证书可被验证且可被信任时，对窃听和中间人攻击提供合理防护。</p><p>HTTPS 的信任继承基于预先安装在浏览器中的证书颁发机构（如 Symantec、Comodo、GoDaddy 和 GlobalSign 等）（意即“我信任证书颁发机构告诉我应该信任的”）。因此，一个到某网站的 HTTPS 连接可被信任，当且且当：</p><ul><li>用户相信他们的浏览器正确实现了 HTTPS 且安装了正确的证书颁发机构；</li><li>用户相信证书颁发机构仅信任合法的网站；</li><li>被访问的网站提供了一个有效的证书，意即，它是由一个被信任的证书颁发机构签发的（大部分浏览器会对无效的证书发出警告）；</li><li>该证书正确地验证了被访问的网站（如，访问 <a href="https://example.com" target="_blank" rel="noopener">https://example.com</a> 时收到了给 example.com 而不是其他组织的证书）；</li><li>或者互联网上相关节点是值得信任的，或者用户相信本协议的加密层（TLS 或 SSL）不能被窃听者破坏。</li></ul><h3 id="HTTP-和-HTTPS-区别"><a href="#HTTP-和-HTTPS-区别" class="headerlink" title="HTTP 和 HTTPS 区别"></a>HTTP 和 HTTPS 区别</h3><p>HTTP 协议传输的数据都是未加密的，也就是明文的，因此使用 HTTP 协议传输隐私信息非常不安全，为了保证这些隐私数据能加密传输，于是网景公司设计了 SSL（Secure Sockets Layer）协议用于对 HTTP 协议传输的数据进行加密，从而就诞生了 HTTPS。简单来说，HTTPS 协议是由 SSL+HTTP 协议构建的可进行加密传输、身份认证的网络协议，要比 HTTP 协议安全。</p><p>HTTPS 和 HTTP 的区别主要如下：</p><ul><li>HTTPS 协议需要到 CA 申请证书，一般免费证书较少，因而需要一定费用。</li><li>HTTP 是超文本传输协议，信息是明文传输，HTTPS 则是具有安全性的 SSL 加密传输协议。</li><li>HTTP 和 HTTPS 使用的是完全不同的连接方式，用的端口也不一样，前者是 80，后者是 443。</li><li>HTTP 的连接很简单，是无状态的；HTTPS 协议是由 SSL+HTTP 协议构建的可进行加密传输、身份认证的网络协议，比 HTTP 协议安全。</li></ul><p><img src="https://raw.githubusercontent.com/wsgzao/storage-public/master/img/20200220153747.png" alt=""></p><p><img src="https://raw.githubusercontent.com/wsgzao/storage-public/master/img/20200220153532.png" alt=""></p><p><a href="https://serverguy.com/ssl/types-of-ssl-certificates/" target="_blank" rel="noopener">Types of SSL Certificates for a Secure Business Website</a></p><h3 id="关于-TLS-SSL"><a href="#关于-TLS-SSL" class="headerlink" title="关于 TLS/SSL"></a>关于 TLS/SSL</h3><p>传输层安全协议（英语：Transport Layer Security，缩写：TLS），及其前身安全套接层（Secure Sockets Layer，缩写：SSL）是一种安全协议，目的是为互联网通信，提供安全及数据完整性保障</p><h3 id="为什么要部署-HTTPS"><a href="#为什么要部署-HTTPS" class="headerlink" title="为什么要部署 HTTPS"></a>为什么要部署 HTTPS</h3><p>说到底，就是 HTTPS 更安全。甚至为了安全，一个专业可靠的网站， HTTPS 是必须的。 Firefox 和 Chrome 都计划将没有配置 SSL 加密的 HTTP 网站标记为不安全（貌似 Firefox 50 已经这么干了），目前它们也正在联合其他相关的基金会与公司推动整个互联网 HTTPS 化，现在大家访问的一些主要的网站。如 Google 多年前就已经全部启用 HTTPS ，国内的淘宝、搜狗、知乎、百度等等也全面 HTTPS 了。甚至 Google 的搜索结果也正在给予 HTTPS 的网站更高的排名和优先收录权。</p><h3 id="怎么部署-HTTPS"><a href="#怎么部署-HTTPS" class="headerlink" title="怎么部署 HTTPS"></a>怎么部署 HTTPS</h3><p>你只需要有一张被信任的 CA （ Certificate Authority ）也就是证书授权中心颁发的 SSL 安全证书，并且将它部署到你的网站服务器上。一旦部署成功后，当用户访问你的网站时，浏览器会在显示的网址前加一把小绿锁，表明这个网站是安全的，当然同时你也会看到网址前的前缀变成了 HTTPS ，不再是 HTTP 了。</p><h3 id="怎么获得-SSL-安全证书"><a href="#怎么获得-SSL-安全证书" class="headerlink" title="怎么获得 SSL 安全证书"></a>怎么获得 SSL 安全证书</h3><p>理论上，我们自己也可以签发 SSL 安全证书，但是我们自己签发的安全证书不会被主流的浏览器信任，所以我们需要被信任的证书授权中心（ CA ）签发的安全证书。而一般的 SSL 安全证书签发服务都比较贵，比如 Godaddy 、 GlobalSign 等机构签发的证书一般都需要 20 美金一年甚至更贵，不过为了加快推广 HTTPS 的普及， EEF 电子前哨基金会、 Mozilla 基金会和美国密歇根大学成立了一个公益组织叫 ISRG （ Internet Security Research Group ），这个组织从 2015 年开始推出了 Let’s Encrypt 免费证书。这个免费证书不仅免费，而且还相当好用，所以我们就可以利用 Let’s Encrypt 提供的免费证书部署 HTTPS 了</p><h2 id="Let’s-Encrypt-简介"><a href="#Let’s-Encrypt-简介" class="headerlink" title="Let’s Encrypt 简介"></a>Let’s Encrypt 简介</h2><p>Let’s Encrypt 是 一个叫 ISRG （ Internet Security Research Group ，互联网安全研究小组）的组织推出的免费安全证书计划。参与这个计划的组织和公司可以说是互联网顶顶重要的先驱，除了前文提到的三个牛气哄哄的发起单位外，后来又有思科（全球网络设备制造商执牛耳者）、 Akamai 加入，甚至连 Linux 基金会也加入了合作，这些大牌组织的加入保证了这个项目的可信度和可持续性。</p><p>部署 HTTPS 网站的时候需要证书，证书由 CA 机构签发，大部分传统 CA 机构签发证书是需要收费的，这不利于推动 HTTPS 协议的使用。</p><p>Let’s Encrypt 也是一个 CA 机构，但这个 CA 机构是免费的！！！也就是说签发证书不需要任何费用。</p><p>Let’s Encrypt 由于是非盈利性的组织，需要控制开支，他们搞了一个非常有创意的事情，设计了一个 ACME 协议，目前该协议的版本是 v1。</p><p>那为什么要创建 ACME 协议呢，传统的 CA 机构是人工受理证书申请、证书更新、证书撤销，完全是手动处理的。而 ACME 协议规范化了证书申请、更新、撤销等流程，只要一个客户端实现了该协议的功能，通过客户端就可以向 Let’s Encrypt 申请证书，也就是说 Let’s Encrypt CA 完全是自动化操作的。</p><p>任何人都可以基于 ACME 协议实现一个客户端，官方推荐的客户端是 Certbot 。</p><h3 id="Let’s-Encrypt-通配符证书"><a href="#Let’s-Encrypt-通配符证书" class="headerlink" title="Let’s Encrypt 通配符证书"></a>Let’s Encrypt 通配符证书</h3><p>在没有出现通配符证书之前，Let’s Encrypt 支持两种证书。</p><p>1）单域名证书：证书仅仅包含一个主机。</p><p>2）SAN 证书：一张证书可以包括多个主机（Let’s Encrypt 限制是 20），也就是证书可以包含下列的主机：<a href="http://www.example.com、www.example.cn、blog.example.com" target="_blank" rel="noopener">www.example.com、www.example.cn、blog.example.com</a> 等等。</p><p>证书包含的主机可以不是同一个注册域，不要问我注册域是什么？注册域就是向域名注册商购买的域名。</p><p>对于个人用户来说，由于主机并不是太多，所以使用 SAN 证书完全没有问题，但是对于大公司来说有一些问题：</p><ul><li>子域名非常多，而且过一段时间可能就要使用一个新的主机。</li><li>注册域也非常多。</li></ul><p>读者可以思考下，对于大企业来说，SAN 证书可能并不能满足需求，类似于 sina 这样的网站，所有的主机全部包含在一张证书中，而使用 Let’s Encrypt 证书是无法满足的。</p><p>通配符证书就是证书中可以包含一个通配符，比如 .example.com、.example.cn，读者很快明白，大型企业也可以使用通配符证书了，一张证书可以防止更多的主机了。</p><p>这个功能可以说非常重要，从功能上看 Let’s Encrypt 和传统 CA 机构没有什么区别了，会不会触动传统 CA 机构的利益呢？</p><h3 id="如何申请-Let’s-Encrypt-通配符证书"><a href="#如何申请-Let’s-Encrypt-通配符证书" class="headerlink" title="如何申请 Let’s Encrypt 通配符证书"></a>如何申请 Let’s Encrypt 通配符证书</h3><p>为了实现通配符证书，Let’s Encrypt 对 ACME 协议的实现进行了升级，只有 v2 协议才能支持通配符证书。</p><p>也就是说任何客户端只要支持 ACME v2 版本，就可以申请通配符证书了，是不是很激动。</p><p>在了解该协议之前有几个注意点：</p><p>客户在申请 Let’s Encrypt 证书的时候，需要校验域名的所有权，证明操作者有权利为该域名申请证书，目前支持三种验证方式：</p><ul><li>dns-01：给域名添加一个 DNS TXT 记录。</li><li>http-01：在域名对应的 Web 服务器下放置一个 HTTP well-known URL 资源文件。</li><li>tls-sni-01：在域名对应的 Web 服务器下放置一个 HTTPS well-known URL 资源文件。</li></ul><p>而申请通配符证书，只能使用 dns-01 的方式</p><h2 id="acme-sh-介绍"><a href="#acme-sh-介绍" class="headerlink" title="acme.sh 介绍"></a>acme.sh 介绍</h2><p>acme.sh 实现了 acme 协议, 可以从 letsencrypt 生成免费的证书.</p><ul><li>一个纯粹用 Shell（Unix shell）语言编写的 ACME 协议客户端。</li><li>完整的 ACME 协议实施。 支持 ACME v1 和 ACME v2 支持 ACME v2 通配符证书</li><li>简单，功能强大且易于使用。你只需要 3 分钟就可以学习它。</li><li>Let’s Encrypt 免费证书客户端最简单的 shell 脚本。</li><li>纯粹用 Shell 编写，不依赖于 python 或官方的 Let’s Encrypt 客户端。</li><li>只需一个脚本即可自动颁发，续订和安装证书。 不需要 root/sudoer 访问权限。</li><li>支持在 Docker 内使用，支持 IPv6</li></ul><p>An ACME Shell script: acme.sh</p><ul><li>An ACME protocol client written purely in Shell (Unix shell) language.</li><li>Full ACME protocol implementation.</li><li>Support ACME v1 and ACME v2</li><li>Support ACME v2 wildcard certs</li><li>Simple, powerful and very easy to use. You only need 3 minutes to learn it.</li><li>Bash, dash and sh compatible.</li><li>Purely written in Shell with no dependencies on python or the official Let’s Encrypt client.</li><li>Just one script to issue, renew and install your certificates automatically.</li><li>DOES NOT require <code>root/sudoer</code> access.</li><li>Docker friendly</li><li>IPv6 support</li><li>Cron job notifications for renewal or error etc.</li></ul><p>It’s probably the <code>easiest &amp; smartest</code> shell script to automatically issue &amp; renew the free certificates from Let’s Encrypt.</p><p>Wiki: <a href="https://github.com/acmesh-official/acme.sh/wiki" target="_blank" rel="noopener">https://github.com/acmesh-official/acme.sh/wiki</a></p><h3 id="安装-acme-sh"><a href="#安装-acme-sh" class="headerlink" title="安装 acme.sh"></a>安装 acme.sh</h3><p>安装很简单, 一个命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl  https://get.acme.sh | sh</span><br></pre></td></tr></table></figure></p><p>普通用户和 root 用户都可以安装使用.<br>安装过程进行了以下几步:</p><p>1) 把 acme.sh 安装到你的 <strong>home</strong> 目录下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/.acme.sh/</span><br></pre></td></tr></table></figure><p>并创建 一个 bash 的 alias, 方便你的使用:  <code>alias acme.sh=~/.acme.sh/acme.sh</code></p><p>2). 自动为你创建 cronjob,  每天 0:00 点自动检测所有的证书, 如果快过期了, 需要更新, 则会自动更新证书.</p><p>更高级的安装选项请参考: <a href="https://github.com/Neilpang/acme.sh/wiki/How-to-install" target="_blank" rel="noopener">https://github.com/Neilpang/acme.sh/wiki/How-to-install</a></p><p><strong> 安装过程不会污染已有的系统任何功能和文件 </strong>, 所有的修改都限制在安装目录中: <code>~/.acme.sh/</code></p><h3 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h3><p><strong>acme.sh</strong> 实现了 <strong>acme</strong> 协议支持的所有验证协议.<br>一般有两种方式验证: http 和 dns 验证.</p><blockquote><ol><li>http 方式需要在你的网站根目录下放置一个文件, 来验证你的域名所有权, 完成验证. 然后就可以生成证书了.</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh  --issue  -d mydomain.com -d www.mydomain.com  --webroot  /home/wwwroot/mydomain.com/</span><br></pre></td></tr></table></figure><p>只需要指定域名, 并指定域名所在的网站根目录. <strong>acme.sh</strong> 会全自动的生成验证文件, 并放到网站的根目录, 然后自动完成验证. 最后会聪明的删除验证文件. 整个过程没有任何副作用. </p><p>如果你用的 <strong>apache</strong> 服务器, <strong>acme.sh</strong> 还可以智能的从 <strong>apache</strong> 的配置中自动完成验证, 你不需要指定网站根目录:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --issue  -d mydomain.com   --apache</span><br></pre></td></tr></table></figure></p><p>如果你用的 <strong>nginx</strong> 服务器, 或者反代, <strong>acme.sh</strong> 还可以智能的从 <strong>nginx</strong> 的配置中自动完成验证, 你不需要指定网站根目录:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --issue  -d mydomain.com   --nginx</span><br></pre></td></tr></table></figure></p><p><strong> 注意, 无论是 apache 还是 nginx 模式, acme.sh 在完成验证之后, 会恢复到之前的状态, 都不会私自更改你本身的配置. 好处是你不用担心配置被搞坏, 也有一个缺点, 你需要自己配置 ssl 的配置, 否则只能成功生成证书, 你的网站还是无法访问 https. 但是为了安全, 你还是自己手动改配置吧.</strong></p><p>如果你还没有运行任何 web 服务, <strong>80</strong> 端口是空闲的, 那么 <strong>acme.sh</strong> 还能假装自己是一个 webserver, 临时听在 <strong>80</strong> 端口, 完成验证:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh  --issue -d mydomain.com   --standalone</span><br></pre></td></tr></table></figure><p>更高级的用法请参考: <a href="https://github.com/Neilpang/acme.sh/wiki/How-to-issue-a-cert" target="_blank" rel="noopener">https://github.com/Neilpang/acme.sh/wiki/How-to-issue-a-cert</a></p><blockquote><ol start="2"><li>手动 dns 方式, 手动在域名上添加一条 txt 解析记录, 验证域名所有权.</li></ol></blockquote><p>这种方式的好处是, 你不需要任何服务器, 不需要任何公网 ip, 只需要 dns 的解析记录即可完成验证.<br>坏处是，如果不同时配置 Automatic DNS API，使用这种方式 acme.sh 将无法自动更新证书，每次都需要手动再次重新解析验证域名所有权。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh  --issue  --dns   -d mydomain.com</span><br></pre></td></tr></table></figure><p>然后, <strong>acme.sh</strong> 会生成相应的解析记录显示出来, 你只需要在你的域名管理面板中添加这条 txt 记录即可.</p><p>等待解析完成之后, 重新生成证书:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh  --renew   -d mydomain.com</span><br></pre></td></tr></table></figure></p><p>注意第二次这里用的是 <code>--renew</code></p><p>dns 方式的真正强大之处在于可以使用域名解析商提供的 api 自动添加 txt 记录完成验证.</p><p><strong>acme.sh</strong> 目前支持 cloudflare, dnspod, cloudxns, godaddy 以及 ovh 等数十种解析商的自动集成. </p><p>以 dnspod 为例, 你需要先登录到 dnspod 账号, 生成你的 api id 和 api key, 都是免费的.<br>然后:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export DP_Id=&quot;1234&quot;</span><br><span class="line"></span><br><span class="line">export DP_Key=&quot;sADDsdasdgdsf&quot;</span><br><span class="line"></span><br><span class="line">acme.sh   --issue   --dns dns_dp   -d aa.com  -d www.aa.com</span><br></pre></td></tr></table></figure></p><p>证书就会自动生成了. 这里给出的 api id 和 api key 会被自动记录下来, 将来你在使用 dnspod api 的时候, 就不需要再次指定了.<br>直接生成就好了:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh  --issue   -d  mydomain2.com   --dns  dns_dp</span><br></pre></td></tr></table></figure><p>更详细的 api 用法: <a href="https://github.com/Neilpang/acme.sh/blob/master/dnsapi/README.md" target="_blank" rel="noopener">https://github.com/Neilpang/acme.sh/blob/master/dnsapi/README.md</a></p><h3 id="copy-安装-证书"><a href="#copy-安装-证书" class="headerlink" title="copy / 安装 证书"></a>copy / 安装 证书</h3><p>前面证书生成以后, 接下来需要把证书 copy 到真正需要用它的地方.</p><p>注意, 默认生成的证书都放在安装目录下: <code>~/.acme.sh/</code>,  请不要直接使用此目录下的文件, 例如: 不要直接让 nginx/apache 的配置文件使用这下面的文件. 这里面的文件都是内部使用, 而且目录结构可能会变化.</p><p>正确的使用方法是使用 <code>--install-cert</code> 命令, 并指定目标位置, 然后证书文件会被 copy 到相应的位置,<br>例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Apache example:</span><br><span class="line"></span><br><span class="line">acme.sh --install-cert -d example.com \</span><br><span class="line">--cert-file      /path/to/certfile/in/apache/cert.pem  \</span><br><span class="line">--key-file       /path/to/keyfile/in/apache/key.pem  \</span><br><span class="line">--fullchain-file /path/to/fullchain/certfile/apache/fullchain.pem \</span><br><span class="line">--reloadcmd     &quot;service apache2 force-reload&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Nginx example:</span><br><span class="line"></span><br><span class="line">acme.sh --install-cert -d example.com \</span><br><span class="line">--key-file       /path/to/keyfile/in/nginx/key.pem  \</span><br><span class="line">--fullchain-file /path/to/fullchain/nginx/cert.pem \</span><br><span class="line">--reloadcmd     &quot;service nginx force-reload&quot;</span><br></pre></td></tr></table></figure><p>(一个小提醒, 这里用的是 <code>service nginx force-reload</code>, 不是 <code>service nginx reload</code>, 据测试, <code>reload</code> 并不会重新加载证书, 所以用的 <code>force-reload</code>)</p><p>Nginx 的配置 <code>ssl_certificate</code> 使用 <code>/etc/nginx/ssl/fullchain.cer</code> ，而非 <code>/etc/nginx/ssl/&lt;domain&gt;.cer</code> ，否则 <a href="https://www.ssllabs.com/ssltest/" target="_blank" rel="noopener">SSL Labs</a> 的测试会报 <code>Chain issues Incomplete</code> 错误。</p><p><code>--install-cert</code> 命令可以携带很多参数, 来指定目标文件.  并且可以指定 reloadcmd, 当证书更新以后, reloadcmd 会被自动调用, 让服务器生效.</p><p>详细参数请参考: <a href="https://github.com/Neilpang/acme.sh#3-install-the-issued-cert-to-apachenginx-etc" target="_blank" rel="noopener">https://github.com/Neilpang/acme.sh#3-install-the-issued-cert-to-apachenginx-etc</a></p><p>值得注意的是, 这里指定的所有参数都会被自动记录下来, 并在将来证书自动更新以后, 被再次自动调用.</p><h3 id="更新证书"><a href="#更新证书" class="headerlink" title="更新证书"></a>更新证书</h3><p>目前证书在 60 天以后会自动更新, 你无需任何操作. 今后有可能会缩短这个时间, 不过都是自动的, 你不用关心.</p><h3 id="更新-acme-sh"><a href="#更新-acme-sh" class="headerlink" title="更新 acme.sh"></a>更新 acme.sh</h3><p>目前由于 acme 协议和 letsencrypt CA 都在频繁的更新, 因此 acme.sh 也经常更新以保持同步. </p><p>升级 acme.sh 到最新版 :<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --upgrade</span><br></pre></td></tr></table></figure></p><p>如果你不想手动升级, 可以开启自动升级:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh  --upgrade  --auto-upgrade</span><br></pre></td></tr></table></figure><p>之后, acme.sh 就会自动保持更新了.</p><p>你也可以随时关闭自动更新:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --upgrade  --auto-upgrade  0</span><br></pre></td></tr></table></figure><h3 id="出错怎么办"><a href="#出错怎么办" class="headerlink" title="出错怎么办"></a>出错怎么办</h3><p>如果出错, 请添加 debug log：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh  --issue  .....  --debug</span><br></pre></td></tr></table></figure><p>或者：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh  --issue  .....  --debug  2</span><br></pre></td></tr></table></figure></p><p>请参考： <a href="https://github.com/Neilpang/acme.sh/wiki/How-to-debug-acme.sh" target="_blank" rel="noopener">https://github.com/Neilpang/acme.sh/wiki/How-to-debug-acme.sh</a></p><h2 id="关于-Nginx-证书配置的解释"><a href="#关于-Nginx-证书配置的解释" class="headerlink" title="关于 Nginx 证书配置的解释"></a>关于 Nginx 证书配置的解释</h2><table><thead><tr><th>文件名</th><th>内容</th></tr></thead><tbody><tr><td>cert.pem</td><td>服务端证书</td></tr><tr><td>chain.pem</td><td>浏览器需要的所有证书但不包括服务端证书，比如根证书和中间证书</td></tr><tr><td>fullchain.pem</td><td>包括了 cert.pem 和 chain.pem 的内容</td></tr><tr><td>privkey.pem</td><td>证书的私钥</td></tr></tbody></table><p>Nginx 官方是这么介绍的</p><p>Some browsers may complain about a certificate signed by a well-known certificate authority, while other browsers may accept the certificate without issues. This occurs because the issuing authority has signed the server certificate using an intermediate certificate that is not present in the certificate base of well-known trusted certificate authorities which is distributed with a particular browser. In this case the authority provides a bundle of chained certificates which should be concatenated to the signed server certificate. The server certificate must appear before the chained certificates in the combined file…</p><p><a href="https://docs.nginx.com/nginx/admin-guide/security-controls/terminating-ssl-http/#ssl-certificate-chains" target="_blank" rel="noopener">SSL Certificate Chains</a></p><p>Let’s encrypt 提供的 fullchain.pem 文件，其实是把 cert.pem 和 chain.pem 文件粘贴到了一起。如果 cert.pem 出于某种原因不被认可，那么 chain.pem 文件就可以解围。因此在 ssl_certificate 的配置中使用 fullchain.pem 确实更为合适。</p><p>不过经过我在 <a href="https://www.ssllabs.com/" target="_blank" rel="noopener">https://www.ssllabs.com/</a> 上的测试，各大平台完全支持使用 cert.pem，ssllabs 给出的测试结果里就会少一条 warning：“This server’s certificate chain is incomplete. ”</p><blockquote><p>nginx.conf 配置文件的修改</p></blockquote><p>你需要再加上一个 server 条目用于 HTTPS 服务。改完之后的结果是这个样子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80; </span><br><span class="line">        listen [::]:80;</span><br><span class="line">        server_name example.com www.example.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root /var/www/html;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 443 ssl;</span><br><span class="line">        server_name example.com www.example.com;</span><br><span class="line">        ssl_certificate /etc/letsencrypt/live/example.com/cert.pem;</span><br><span class="line">        ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root /var/www/html;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HTTPS 跳转</p><p>现在，你的服务器同时接受 HTTP 和 HTTPS 请求。如果你希望只受理 HTTPS 请求，可以在 nginx.conf 中添加一个 301 跳转规则，告知浏览器将 HTTP 变成 HTTPS.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80; </span><br><span class="line">        listen [::]:80;</span><br><span class="line">        server_name example.com www.example.com;</span><br><span class="line">        return 301 https://$server_name$request_uri;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 443 ssl;</span><br><span class="line">        server_name example.com www.example.com;</span><br><span class="line">        ssl_certificate /etc/letsencrypt/live/example.com/cert.pem;</span><br><span class="line">        ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root /var/www/html;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你也可以参考<a href="https://www.digitalocean.com/community/tools/nginx" target="_blank" rel="noopener">NGINXConfig</a></p><p>The easiest way to configure a performant, secure, and stable NGINX server.</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://letsencrypt.org/docs/" target="_blank" rel="noopener">Let’s Encrypt Documentation</a></p><p><a href="https://github.com/Neilpang/acme.sh" target="_blank" rel="noopener">acme.sh</a></p><p><a href="https://dallaslu.com/use-acme-sh-lets-encrypt-wildcard-ssl-certs/" target="_blank" rel="noopener">使用 acme.sh 管理 Let’s Encrypt Wildcard SSL 证书</a></p><p><a href="https://www.howtoforge.com/getting-started-with-acmesh-lets-encrypt-client/" target="_blank" rel="noopener">Getting started with acme.sh Let’s Encrypt SSL client</a></p>]]></content>
    
    <summary type="html">
    
      使用certbot代替acme.sh免费申请wildcard通配符证书和自动更新实践小结
    
    </summary>
    
      <category term="学习 | Study" scheme="https://wsgzao.github.io/categories/%E5%AD%A6%E4%B9%A0-Study/"/>
    
    
  </entry>
  
  <entry>
    <title>CentOS7 基于 LNMP 安装配置 Laravel</title>
    <link href="https://wsgzao.github.io/post/laravel/"/>
    <id>https://wsgzao.github.io/post/laravel/</id>
    <published>2020-10-21T06:59:49.000Z</published>
    <updated>2020-10-21T08:00:05.960Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>距离上一次接触 Laravel 还是 2015 年的时候，这一次基于 CentOS7 的 LNMP(Linux, Nginx, MySQL, PHP)再重新回味下当年部署的乐趣，文档里记录的是手动部署的步骤，ansible 自动化部署代码我就不放出来了，有问题可以留言咨询。</p><h2 id="更新历史"><a href="#更新历史" class="headerlink" title="更新历史"></a>更新历史</h2><p>2020 年 10 月 21 日 - 初稿</p><p>阅读原文 - <a href="https://wsgzao.github.io/post/laravel/">https://wsgzao.github.io/post/laravel/</a></p><hr><h2 id="软件版本"><a href="#软件版本" class="headerlink" title="软件版本"></a>软件版本</h2><blockquote><p>php 版本各位可以选择 7.3 以上，我自己选择了 7.2 的最新版</p></blockquote><ul><li>CentOS Linux release 7.x</li><li>nginx 1.16.x</li><li>MySQL 5.7.x</li><li>php-fpm 7.2.x</li><li>Composer 1.x</li><li>laravel 7.x</li><li>nodejs v6.x</li><li>npm 3.x </li><li>yarn 1.x</li></ul><h2 id="升级-EPEL-仓库"><a href="#升级-EPEL-仓库" class="headerlink" title="升级 EPEL 仓库"></a>升级 EPEL 仓库</h2><p>EPEL (Extra Packages for Enterprise Linux，企业版 Linux 的额外软件包) 是 Fedora 小组维护的一个软件仓库项目，为 RHEL/CentOS 提供他们默认不提供的软件包。这个源兼容 RHEL 及像 CentOS 和 Scientific Linux 这样的衍生版本。</p><p>更多详细介绍查看这里：<a href="https://fedoraproject.org/wiki/EPEL" title="EPEL Repository" target="_blank" rel="noopener">EPEl</a></p><p>我们需要 Nginx 安装的 EPEL 仓库，因为官方 CentOS 仓库中不存在 Nginx 软件包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y install epel-release</span><br></pre></td></tr></table></figure><h2 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h2><p>使用 LNMP 环境下运行 Laravel。Nginx 是其中的 Web 服务器部分，可以从 EPEL 仓库安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 Nginx</span></span><br><span class="line">sudo yum -y install nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装完成后，启动 Nginx 并将其添加到系统自启动</span></span><br><span class="line">sudo systemctl start nginx</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># Nginx 默认运行在 80 端口，使用下面的 netstat 命令检查。</span></span><br><span class="line">netstat -plntu | grep 80</span><br></pre></td></tr></table></figure><h2 id="安装-php-fpm"><a href="#安装-php-fpm" class="headerlink" title="安装 php-fpm"></a>安装 php-fpm</h2><p>在 CentOS 基础库中不存在 PHP 7.2，我们需要从名为 <code>remi</code> 或 <code>webtatic</code> 的第三方仓库中安装它。</p><h3 id="方式一-remi-仓库（推荐）"><a href="#方式一-remi-仓库（推荐）" class="headerlink" title="方式一 remi 仓库（推荐）"></a>方式一 remi 仓库（推荐）</h3><blockquote><p>之所以推荐它是因为它非常方便切换 PHP 的版本。</p></blockquote><p>更多仓库相关信息<a href="https://rpms.remirepo.net/" target="_blank" rel="noopener">参考这里</a>。</p><p><strong> 安装 </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo rpm --import http://rpms.famillecollet.com/RPM-GPG-KEY-remi</span><br><span class="line">sudo rpm -ivh http://rpms.famillecollet.com/enterprise/remi-release-7.rpm</span><br><span class="line">sudo yum-config-manager --enable remi-php72 # 默认 remi 仓库禁用的，在实际需要的时候启用</span><br><span class="line">sudo yum update</span><br><span class="line"># sudo yum search php72 | more</span><br><span class="line">sudo yum install -y php72 php72-php-fpm php72-php-gd php72-php-json php72-php-mbstring php72-php-mysqlnd php72-php-xml php72-php-xmlrpc php72-php-opcache php72-php-pecl-zip</span><br><span class="line">sudo mkdir -p /run/php-fpm/remi-php72 # 创建一个 sock 存放的目录</span><br><span class="line">sudo ln -s  `which php72` /usr/local/sbin/php # 建立软连接方便命令行使用</span><br></pre></td></tr></table></figure><p>执行完上面的命令后，CentOS 系统上已经安装了 PHP 7.2, 安装好的 <code>php72</code> 目录在 <code>/etc/opt/remi/php72</code>, 也可以参考这个 <a href="https://www.cyberciti.biz/faq/how-to-install-php-7-2-on-centos-7-rhel-7/" target="_blank" rel="noopener">链接</a> 查看更多操作详情。</p><p><strong> 卸载 </strong></p><p><code>remi</code> 仓库支持 PHP 的多版本共存，<strong> 不到万不得已不建议使用卸载操作 </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager --disable remi-php72 # 禁用 remi-php72 仓库</span><br><span class="line">sudo systemctl stop php72-php-fpm.service</span><br><span class="line">yum remove php72 php72-php-fpm php72-php-gd php72-php-json php72-php-mbstring php72-php-mysqlnd php72-php-xml php72-php-xmlrpc php72-php-opcache</span><br><span class="line">sudo rmdir /run/php-fpm/remi-php72</span><br><span class="line">sudo rm -rf /etc/opt/remi/remi-php72 # 删除前记得备份配置</span><br></pre></td></tr></table></figure><p>至此，使用 remi 仓库安装的 PHP 已经成功卸载。</p><h3 id="多版本安装"><a href="#多版本安装" class="headerlink" title="多版本安装"></a>多版本安装</h3><p>再安装一个 PHP7.3 版本为例，执行下面的操作即可完成 PHP7.3 版本的安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager --enable remi-php73</span><br><span class="line">sudo yum install php73 php73-php-fpm php73-php-gd php73-php-json php73-php-mbstring php73-php-mysqlnd php73-php-xml php73-php-xmlrpc php73-php-opcache</span><br><span class="line">sudo mkdir -p /run/php-fpm/remi-php73 # 创建一个 sock 存放的目录</span><br><span class="line">sudo ln -s  `which php73` /usr/local/sbin/php # 建立软连接方便命令行使用</span><br></pre></td></tr></table></figure><h3 id="方式二-webtatic-仓库"><a href="#方式二-webtatic-仓库" class="headerlink" title="方式二 webtatic 仓库"></a>方式二 webtatic 仓库</h3><p><strong> 安装 </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm</span><br><span class="line">sudo yum install -y php72w php72w-gd php72w-curl php72w-common php72w-cli php72w-mysql php72w-mbstring php72w-fpm php72w-xml php72w-pdo php72w-zip</span><br></pre></td></tr></table></figure><p>其他版本下载可以查看这里：<a href="https://webtatic.com/projects/yum-repository/" title="webtatic repository" target="_blank" rel="noopener">webtatic 仓库</a>。</p><blockquote><p>如果执行上面的命令一直报错 <code>curl: (35) Encountered end of file</code>，可以尝试将上面的 <code>https</code> 协议改成 <code>http</code> 协议获取 rpm 源。</p></blockquote><p>执行完上面的命令后，CentOS 系统上已经安装了 PHP 7.2, 安装好的 php72w 目录在 <code>/etc/php</code> 下。</p><p><strong> 卸载 </strong></p><blockquote><p><strong> 注意：</strong> 如果想更换到 php5.6 或 7.1 版本, 直接把上面 yum 命令里面的关键字 <code>php72w</code> 换成 <code>php56w</code> 或者 <code>php71w</code> 就可以了。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop php-fpm</span><br><span class="line">yum remove php72w php72w-curl php72w-common php72w-cli php72w-mysql php72w-mbstring php72w-fpm php72w-xml php72w-pdo php72w-zip</span><br></pre></td></tr></table></figure><p>至此，使用 webtatic 仓库安装的 PHP 已经成功卸载。</p><h3 id="配置-php-fpm"><a href="#配置-php-fpm" class="headerlink" title="配置 php-fpm"></a>配置 php-fpm</h3><p>通过使用 vim 编辑配置文件 <code>php.ini</code> 来配置 PHP，<strong>remi 仓库 </strong> 方式安装的主配置文件存放位置在 <code>/etc/opt/remi/php72/php.ini</code>， <strong>webtatic 仓库 </strong> 方式安装的主配置文件存放位置在 <code>/etc/php.ini</code>。</p><p>在文件中找如如下行，取消它的行注释并将值更改为 0。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cgi.fix_pathinfo=0</span><br></pre></td></tr></table></figure><p>保存文件并退出编辑器。</p><p>编辑 <code>php-fpm</code> 文件 <code>www.conf</code>，<strong>remi 仓库 </strong> 方式安装的配置文件存放位置在 <code>/etc/opt/remi/php72/php-fpm.d/www.conf</code>，<strong>webtatic 仓库 </strong> 方式安装的配置文件存放位置在 <code>/etc/php-fpm.d/www.conf</code>。</p><p><code>php-fpm</code> 将在用户和组 <code>nginx</code> 下运行，将下面两行的值更改为 <code>nginx</code>，这里用户和用户组请保持与 <code>Nginx</code> 的用户和用户组一致。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 用户和组保持和 Nginx 一致，使用命令 egrep &apos;^(user|group)&apos; /etc/nginx/nginx.conf 查看 nginx 进程的用户</span><br><span class="line">user = nginx</span><br><span class="line">group = nginx</span><br></pre></td></tr></table></figure><p><code>php-fpm</code> 将在套接字文件下运行，而不是使用服务器端口，<strong>remi 仓库 </strong> 方式安装的 PHP 可以将值改为 <code>/run/php-fpm/remi-php72/php-fpm.sock</code>， <strong>webtatic 仓库 </strong> 方式安装的 PHP 请将’listen’值更改为路径 <code>/run/php-fpm/php-fpm.sock</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># remi</span><br><span class="line">listen = /run/php-fpm/remi-php72/php-fpm.sock</span><br><span class="line"></span><br><span class="line"># webtatic</span><br><span class="line">listen = /run/php-fpm/php-fpm.sock</span><br></pre></td></tr></table></figure><p>套接字文件所有者将是 “nginx” 用户，权限模式为 660，取消注释并更改所有值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">listen.owner = nginx</span><br><span class="line">listen.group = nginx</span><br><span class="line">listen.mode  = 0660</span><br></pre></td></tr></table></figure><p>对于环境变量，取消注释这些行并设置值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">env[HOSTNAME] = $HOSTNAME</span><br><span class="line">env[PATH] = /usr/local/bin:/usr/bin:/bin</span><br><span class="line">env[TMP] = /tmp</span><br><span class="line">env[TMPDIR] = /tmp</span><br><span class="line">env[TEMP] = /tmp</span><br></pre></td></tr></table></figure><p>保存文件并退出 vim 编辑，然后启动 <code>php-fpm</code> 并使其在启动时运行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># remi</span><br><span class="line">sudo systemctl start php72-php-fpm.service</span><br><span class="line">sudo systemctl enable php72-php-fpm.service</span><br><span class="line"></span><br><span class="line"># webtatic</span><br><span class="line">sudo systemctl start php-fpm</span><br><span class="line">sudo systemctl enable php-fpm</span><br></pre></td></tr></table></figure><blockquote><p>使用 <code>remi</code> 仓库的时候启动的时候可能会报错，由于 <code>php-fpm.sock</code> 文件目录不存在，执行命令：<code>sudo mkdir -p /run/php-fpm/remi-php72</code> 后在启动就没有问题了。</p></blockquote><h3 id="检查-php-fpm"><a href="#检查-php-fpm" class="headerlink" title="检查 php-fpm"></a>检查 php-fpm</h3><p><code>php-fpm</code> 在套接字文件下运行，使用以下命令检查。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo netstat -pl | grep php-fpm.sock</span><br></pre></td></tr></table></figure><h2 id="安装-MySQL"><a href="#安装-MySQL" class="headerlink" title="安装 MySQL"></a>安装 MySQL</h2><p>可以使用 MariaDB 或 PostgreSQL 作为 Laravel 项目的数据库存储。 这里使用 MySQL 数据库服务器进行安装。 它在 CentOS 存储库中可用， 使用下面的 <code>yum</code> 命令<a href="https://dev.mysql.com/doc/mysql-yum-repo-quick-guide/en/" title="mysql server install" target="_blank" rel="noopener">安装 MySQL-server</a>。</p><h3 id="下载并安装-MySQL5-7"><a href="#下载并安装-MySQL5-7" class="headerlink" title="下载并安装 MySQL5.7"></a>下载并安装 MySQL5.7</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm</span><br><span class="line">rpm -ivh mysql57-community-release-el7-11.noarch.rpm</span><br><span class="line">sudo yum update</span><br><span class="line">sudo yum install -y mysql-server</span><br></pre></td></tr></table></figure><blockquote><p>执行上面的命令进行 MySQL 的安装，在安装的过程中两次按 <code>Y</code> 键，在同意后安装完成。</p></blockquote><h3 id="启动-MySQL"><a href="#启动-MySQL" class="headerlink" title="启动 MySQL"></a>启动 MySQL</h3><p>使用下面的命令启动 <code>mysql</code> 并使其随系统启动而启动。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start mysqld</span><br><span class="line">sudo systemctl enable mysqld</span><br></pre></td></tr></table></figure><h3 id="测试-MySQL"><a href="#测试-MySQL" class="headerlink" title="测试 MySQL"></a>测试 MySQL</h3><p>MySQL 已经启动并在 3306 端口上运行，可以使用 netstat 命令检查。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netstat -plntu | grep 3306 # 检查端口</span><br><span class="line">ps aux|grep mysqld # 检查进程</span><br></pre></td></tr></table></figure><h3 id="配置-MySQL"><a href="#配置-MySQL" class="headerlink" title="配置 MySQL"></a>配置 MySQL</h3><p>获取安装时初始化密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo grep &apos;temporary password&apos; /var/log/mysqld.log</span><br></pre></td></tr></table></figure><p>登录并重设 root 账户密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p # 回车输入上面获取到的密码</span><br><span class="line"></span><br><span class="line">ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;MyNewPassword1!&apos;;</span><br></pre></td></tr></table></figure><p>创建一个测试数据库和测试用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE laravel; -- 创建一个 laravel 数据库</span><br><span class="line">GRANT ALL PRIVILEGES ON laravel.* TO laravel@localhost IDENTIFIED BY &quot;LaravelPassword1!&quot;; -- 创建一个对应的用户</span><br></pre></td></tr></table></figure><p>至此，MySQL 的安装和配置已经完成。</p><h2 id="安装-PHP-Composer"><a href="#安装-PHP-Composer" class="headerlink" title="安装 PHP Composer"></a>安装 PHP Composer</h2><p>PHP composer 是 PHP 语言的包管理器。 它创建于 2011 年，灵感来自于 Node.js 的 “npm” 和 Ruby 的 “bundler” 安装程序。 使用 <code>curl</code> 命令安装 composer。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">php -r &quot;copy(&apos;https://install.phpcomposer.com/installer&apos;, &apos;composer-setup.php&apos;);&quot;</span><br><span class="line">php composer-setup.php</span><br><span class="line">php -r &quot;unlink(&apos;composer-setup.php&apos;);&quot;</span><br><span class="line">sudo mv composer.phar /usr/local/bin/composer</span><br></pre></td></tr></table></figure><p>配置 Packagist 国内镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer config -g repo.packagist composer https://packagist.phpcomposer.com</span><br></pre></td></tr></table></figure><p>安装完成后，尝试使用 “composer” 命令，您将看到以下结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">composer</span><br><span class="line">composer config -g repo.packagist -l # 查看配置的 Packagist 国内镜像</span><br></pre></td></tr></table></figure><p>至此，PHP Composer 已经正常安装在了 CentOS 系统上。</p><h2 id="NodeJS-NPM-Yarn"><a href="#NodeJS-NPM-Yarn" class="headerlink" title="NodeJS + NPM + Yarn"></a>NodeJS + NPM + Yarn</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y install nodejs npm</span><br><span class="line">curl --silent --location https://dl.yarnpkg.com/rpm/yarn.repo | sudo tee /etc/yum.repos.d/yarn.repo</span><br><span class="line">sudo yum install -y yarn</span><br></pre></td></tr></table></figure><h2 id="安装-Laravel-测试-LNMP"><a href="#安装-Laravel-测试-LNMP" class="headerlink" title="安装 Laravel 测试 LNMP"></a>安装 Laravel 测试 LNMP</h2><p>现在进入到 laravel 的根目录’/var/www/laravel’。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /var/www/laravel &amp;&amp; cd /var/www/laravel</span><br></pre></td></tr></table></figure><p>Laravel 提供了两种在服务器上 <a href="https://laravel.com/docs/7.x/installation" title="laravel install document" target="_blank" rel="noopener">安装框架</a> 的方法。可以用 Laravel 安装程序安装 Laravel，也可以用 PHP composer 安装它。在这里我将通过使用 composer 命令创建一个新项目来安装 Laravel，运行下面的命令来安装 Laravel。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer create-project laravel/laravel .</span><br></pre></td></tr></table></figure><p>等待 Laravel 安装完成。 这可能需要一些时间。</p><p>安装完成后，将 Laravel Web 根目录的所有者更改为 “nginx” 用户，并使用以下命令将存储目录的权限更改为 755。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown -R nginx:root /var/www/laravel</span><br><span class="line">chmod 755 -R /var/www/laravel/storage</span><br></pre></td></tr></table></figure><p>至此，Laravel 安装已经完成。</p><h2 id="为-Larvel-配置-Nginx-配置"><a href="#为-Larvel-配置-Nginx-配置" class="headerlink" title="为 Larvel 配置 Nginx 配置"></a>为 Larvel 配置 Nginx 配置</h2><p>在这个步骤中，将为 Laravel 项目创建 Nginx 虚拟主机配置。 我们需要为此 Laravel 定义 web 根目录 <code>/var/www/laravel/public</code>。</p><p>接下来，<code>cd</code> 到 Nginx 目录，并在 <code>conf.d</code> 目录中创建一个新的虚拟主机配置文件 <code>laravel.conf</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/nginx</span><br><span class="line">vim conf.d/laravel.conf</span><br></pre></td></tr></table></figure><p>将下面的配置粘贴到文件中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line"></span><br><span class="line">    # Log files for Debugging</span><br><span class="line">    access_log /var/log/nginx/laravel-access.log;</span><br><span class="line">    error_log /var/log/nginx/laravel-error.log;</span><br><span class="line"></span><br><span class="line">    # Webroot Directory for Laravel project</span><br><span class="line">    root /var/www/laravel/public;</span><br><span class="line">    index index.php index.html index.htm;</span><br><span class="line"></span><br><span class="line">    # Your Domain Name</span><br><span class="line">    server_name laravel.domain.io;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        try_files $uri $uri/ /index.php?$query_string;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # PHP-FPM Configuration Nginx</span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        try_files $uri =404;</span><br><span class="line">        fastcgi_split_path_info ^(.+\.php)(/.+)$;</span><br><span class="line">        # fastcgi_pass unix:/run/php-fpm/php-fpm.sock; # webtatic</span><br><span class="line">        fastcgi_pass unix:/run/php-fpm/remi-php72/php-fpm.sock; # remi</span><br><span class="line">        fastcgi_index index.php;</span><br><span class="line">        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ /\.ht &#123;</span><br><span class="line">        deny all;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存文件并退出 vim 编辑器。</p><h3 id="测试并重启-Nginx"><a href="#测试并重启-Nginx" class="headerlink" title="测试并重启 Nginx"></a>测试并重启 Nginx</h3><p>测试 nginx 配置，确保没有错误，然后重新启动 nginx 服务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nginx -t # 测试配置是否正确</span><br><span class="line">sudo systemctl restart nginx # 重启 Nginx</span><br></pre></td></tr></table></figure><p>至此，Laravel 的 nginx 虚拟主机配置已经完成。</p><h3 id="测试-Laravel"><a href="#测试-Laravel" class="headerlink" title="测试 Laravel"></a>测试 Laravel</h3><p>打开浏览器并输入服务器配置的 Laravel URL，在 Nginx 虚拟主机文件中定义了 Laravel 的域名。 我的是 <code>laravel.domain.io</code>。</p><p>访问域名时，您将看到 Laravel 框架的首页。</p><p>CentOS 7 上的 Nginx、PHP-FPM、MySQL、Composer、NodeJS、Yarn 和 Laravel 安装已经成功。</p><h2 id="测试数据库和缓存"><a href="#测试数据库和缓存" class="headerlink" title="测试数据库和缓存"></a>测试数据库和缓存</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 我修改了 REDIS_CLIENT=predis，需要先执行以下命令安装依赖包</span></span><br><span class="line">composer require predis/predis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成并修改. env，重点是 DB 和 REDIS 部分</span></span><br><span class="line">/data/www/laravel/.env</span><br><span class="line"></span><br><span class="line">APP_NAME=Laravel</span><br><span class="line">APP_ENV=<span class="built_in">local</span></span><br><span class="line">APP_KEY=base64:6+QhPUSBPIjI7LZi93aHdHKNWDWVmrI4mtQ3UnVLMV0=</span><br><span class="line">APP_DEBUG=<span class="literal">true</span></span><br><span class="line">APP_URL=http://localhost</span><br><span class="line"></span><br><span class="line">LOG_CHANNEL=stack</span><br><span class="line"></span><br><span class="line">DB_CONNECTION=mysql</span><br><span class="line">DB_HOST=127.0.0.1</span><br><span class="line">DB_PORT=3306</span><br><span class="line">DB_DATABASE=laravel</span><br><span class="line">DB_USERNAME=laravel</span><br><span class="line">DB_PASSWORD=LaravelPassword1!</span><br><span class="line"></span><br><span class="line">BROADCAST_DRIVER=<span class="built_in">log</span></span><br><span class="line"><span class="comment">#CACHE_DRIVER=file</span></span><br><span class="line">CACHE_DRIVER=redis</span><br><span class="line">QUEUE_CONNECTION=sync</span><br><span class="line"><span class="comment">#SESSION_DRIVER=file</span></span><br><span class="line">SESSION_DRIVER=redis</span><br><span class="line">SESSION_LIFETIME=120</span><br><span class="line"></span><br><span class="line">REDIS_CLIENT=predis</span><br><span class="line">REDIS_HOST=127.0.0.1</span><br><span class="line">REDIS_PASSWORD=null</span><br><span class="line">REDIS_PORT=6379</span><br><span class="line"></span><br><span class="line">MAIL_MAILER=smtp</span><br><span class="line">MAIL_HOST=smtp.mailtrap.io</span><br><span class="line">MAIL_PORT=2525</span><br><span class="line">MAIL_USERNAME=null</span><br><span class="line">MAIL_PASSWORD=null</span><br><span class="line">MAIL_ENCRYPTION=null</span><br><span class="line">MAIL_FROM_ADDRESS=null</span><br><span class="line">MAIL_FROM_NAME=<span class="string">"<span class="variable">$&#123;APP_NAME&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">AWS_ACCESS_KEY_ID=</span><br><span class="line">AWS_SECRET_ACCESS_KEY=</span><br><span class="line">AWS_DEFAULT_REGION=us-east-1</span><br><span class="line">AWS_BUCKET=</span><br><span class="line"></span><br><span class="line">PUSHER_APP_ID=</span><br><span class="line">PUSHER_APP_KEY=</span><br><span class="line">PUSHER_APP_SECRET=</span><br><span class="line">PUSHER_APP_CLUSTER=mt1</span><br><span class="line"></span><br><span class="line">MIX_PUSHER_APP_KEY=<span class="string">"<span class="variable">$&#123;PUSHER_APP_KEY&#125;</span>"</span></span><br><span class="line">MIX_PUSHER_APP_CLUSTER=<span class="string">"<span class="variable">$&#123;PUSHER_APP_CLUSTER&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改后需要测试 mysql 和 redis 时分别执行以下两个命令完成验证</span></span><br><span class="line">php artisan migrate</span><br><span class="line">php artisan cache:clear</span><br></pre></td></tr></table></figure><h2 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h2><p>执行 <code>composer create-project laravel/laravel .</code> 出现“proc_open(): fork failed - Cannot allocate memory”</p><p>原因通常是禁用了 swap 且内存太小导致，比较快速的解决方案是增加 swap</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dd <span class="keyword">if</span>=/dev/zero of=/var/swap.1 bs=1M count=1024</span><br><span class="line">mkswap /var/swap.1</span><br><span class="line">swapon /var/swap.1</span><br></pre></td></tr></table></figure><p>访问 <code>laravel.domain.io</code> 出现 502 error code</p><p>原因建议优先检查 <code>/var/log/nginx/laravel-error.log</code> 日志，可能的情况有</p><ol><li><code>/var/wwww/laravel</code> 路径的权限不正确导致 permission denied，注意不同 laravel 版本间对子目录权限的要求</li><li><code>/etc/nginx/conf.d/laravel.conf</code> 配置文件 fastcgi_pass 设置有误</li><li>php-fpm 进程未正常启动</li></ol><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://laravel.com/docs/7.x/installation" target="_blank" rel="noopener">Laravel Installation</a></p>]]></content>
    
    <summary type="html">
    
      CentOS7基于LNMP安装配置Laravel
    
    </summary>
    
      <category term="学习 | Study" scheme="https://wsgzao.github.io/categories/%E5%AD%A6%E4%B9%A0-Study/"/>
    
    
  </entry>
  
  <entry>
    <title>使用 csshX 同步管理多个 SSH 会话</title>
    <link href="https://wsgzao.github.io/post/csshx/"/>
    <id>https://wsgzao.github.io/post/csshx/</id>
    <published>2020-10-20T06:59:49.000Z</published>
    <updated>2020-10-21T07:21:20.510Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>终端登录管理方案非常成熟除了耳熟能详的跨平台付费方案 SeureCRT，Windows 有 Xshell，macOS 有 iTerm2，不过在 macOS 下想用到类似 SecureCRT 和 Xshell 一样的 Send to all 功能可能就没有这么方便了，而 csshX 正好可以满足批量管理操作的需求</p><blockquote><p>使用 csshX 同步管理多个 SSH 会话</p></blockquote><h2 id="更新历史"><a href="#更新历史" class="headerlink" title="更新历史"></a>更新历史</h2><p>2020 年 10 月 20 日 - 更新 csshx 在 macOS Catalina 的使用<br>2018 年 11 月 26 日 - 初稿</p><p>阅读原文 - <a href="https://wsgzao.github.io/post/csshx/">https://wsgzao.github.io/post/csshx/</a></p><p><strong> 扩展阅读 </strong></p><p>csshx - <a href="https://github.com/brockgr/csshx" target="_blank" rel="noopener">https://github.com/brockgr/csshx</a></p><hr><h2 id="csshx-简介"><a href="#csshx-简介" class="headerlink" title="csshx 简介"></a>csshx 简介</h2><p>As csshX is a command line tool, no special installation is needed. It maybe copied into a directory in your path, (e.g. /usr/local/bin) for your convenience.</p><p>The software has been tested on Mac OS X 10.5, 10.6 and 10.7 with the default Perl installation - no additional Perl modules are required.</p><p>DOCUMENTATION:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">The documentation for csshX is self contained. Please run:</span><br><span class="line"></span><br><span class="line">csshX --man</span><br><span class="line"></span><br><span class="line">NAME</span><br><span class="line">       csshX - Cluster SSH tool using Mac OS X Terminal.app</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">       csshX [--login username] [--config filename] [ [user@]host1[:port]</span><br><span class="line">       [[user@]host2[:port]] .. ]</span><br><span class="line"></span><br><span class="line">       csshX [-h | -m | -v ]</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">       csshX is a tool to allow simultaneous control of multiple ssh sessions.</span><br><span class="line">       host1, host2, etc. are either remote hostnames or remote cluster names.</span><br><span class="line">       csshX will attempt to create an ssh session to each remote host in</span><br><span class="line">       separate Terminal.app windows. A master window will also be created.</span><br><span class="line">       All keyboard input in the master will be sent to all the slave windows.</span><br><span class="line"></span><br><span class="line">       To specify the username for each host, the hostname can be prepended by</span><br><span class="line">       user@. Similarly, appending :port will set the port to ssh to.</span><br><span class="line"></span><br><span class="line">       You can also use hostname ranges, to specify many hosts.</span><br><span class="line"></span><br><span class="line">OPTIONS</span><br><span class="line">       -l username, --login username</span><br><span class="line">           Remote user to authenticate as for all hosts. This is overridden by</span><br><span class="line">           user@.</span><br><span class="line"></span><br><span class="line">       -c configfile, --config configfile</span><br><span class="line">           Alternative config file to use</span><br><span class="line"></span><br><span class="line">       -h, --help</span><br><span class="line">           Quick summary of program usage</span><br><span class="line"></span><br><span class="line">       -m, --man</span><br><span class="line">           Full program man page</span><br></pre></td></tr></table></figure><h2 id="使用-brew-安装-csshx"><a href="#使用-brew-安装-csshx" class="headerlink" title="使用 brew 安装 csshx"></a>使用 brew 安装 csshx</h2><p>Name: csshx<br>Use: Cluster ssh tool for Terminal.app<br>URL: <a href="https://github.com/brockgr/csshx" target="_blank" rel="noopener">https://github.com/brockgr/csshx</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 homebrew</span></span><br><span class="line">ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span> &lt; /dev/null 2&gt; /dev/null</span><br><span class="line"><span class="comment"># 安装 csshx</span></span><br><span class="line">brew install csshx</span><br></pre></td></tr></table></figure><h2 id="csshx-使用"><a href="#csshx-使用" class="headerlink" title="csshx 使用"></a>csshx 使用</h2><p>当我们管理数十台或更多 Linux 服务器的时候，往往需要在每台服务器上执行同样的命令，比如我们想一次查看 10 台服务器（node）上系统负载情况，或者想知道哪台服务器有剩余内存可以分给新客户，又或者想执行 df 命令看看哪个服务器上还有多的硬盘空间等等，除了可以用脚本或工具统一收集这些信息外，我们还可以考虑使用一些同步管理多个 SSH 会话的小工具来帮助管理多台服务器，节省时间提高管理效率。在 Linux 上可以用 pdsh、ClusterSSH 和 mussh；在 Mac 上可以用 csshX.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 csshX 很简单，如果要同时 ssh 到 4 个服务器可以直接传递 IP</span></span><br><span class="line">csshX 192.168.0.1 192.168.0.2 192.168.0.3 192.168.0.4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以把这些要 ssh 管理的 IP 写到一个文件里，然后加载这个文件，[user@]host1[:port]</span></span><br><span class="line">vi hosts</span><br><span class="line">192.168.0.1</span><br><span class="line">192.168.0.2</span><br><span class="line">192.168.0.3</span><br><span class="line">192.168.0.4</span><br><span class="line"></span><br><span class="line">csshX --hosts hosts</span><br></pre></td></tr></table></figure><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><p>csshx is not working in New Mac OS Release MacOS Mojave</p><p><a href="https://github.com/brockgr/csshx/issues/94" target="_blank" rel="noopener">https://github.com/brockgr/csshx/issues/94</a></p><pre><code>brew install parera10/csshx/csshx</code></pre>]]></content>
    
    <summary type="html">
    
      使用csshX同步管理多个SSH会话
    
    </summary>
    
      <category term="学习 | Study" scheme="https://wsgzao.github.io/categories/%E5%AD%A6%E4%B9%A0-Study/"/>
    
    
  </entry>
  
  <entry>
    <title>Terraform tencentcloud 部署实践</title>
    <link href="https://wsgzao.github.io/post/terraform-tencentcloud/"/>
    <id>https://wsgzao.github.io/post/terraform-tencentcloud/</id>
    <published>2020-10-13T06:59:49.000Z</published>
    <updated>2020-10-14T09:03:45.925Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文以 Terraform tencentcloud 腾讯云为实践案例，之后会再陆续更新 AWS, Azure, GCP 等</p><h2 id="更新历史"><a href="#更新历史" class="headerlink" title="更新历史"></a>更新历史</h2><p>2020 年 10 月 10 日 - 初稿</p><p>阅读原文 - <a href="https://wsgzao.github.io/post/terraform-tencentcloud/">https://wsgzao.github.io/post/terraform-tencentcloud/</a></p><hr><h2 id="TencentCloud-Provider"><a href="#TencentCloud-Provider" class="headerlink" title="TencentCloud Provider"></a>TencentCloud Provider</h2><p>腾讯云 Terraform 相关 API 都可以通过官网查询，注意版本</p><p><a href="https://registry.terraform.io/providers/tencentcloudstack/tencentcloud/latest/docs" target="_blank" rel="noopener">https://registry.terraform.io/providers/tencentcloudstack/tencentcloud/latest/docs</a></p><p>The TencentCloud provider is used to interact with many resources supported by <a href="https://intl.cloud.tencent.com" target="_blank" rel="noopener">TencentCloud</a>. The provider needs to be configured with the proper credentials before it can be used.</p><p>如果遇到描述不清楚的细节建议回头阅读 <a href="https://cloud.tencent.com/document/product" target="_blank" rel="noopener">腾讯云文档中心</a></p><h3 id="腾讯云创建用户"><a href="#腾讯云创建用户" class="headerlink" title="腾讯云创建用户"></a>腾讯云创建用户</h3><p>创建用户步骤</p><ol><li>腾讯云 访问管理 -&gt; 用户 -&gt; 用户列表</li><li>进行新建用户，自定义创建</li><li>对用户进行授权</li><li>创建秘钥</li></ol><p><a href="https://console.cloud.tencent.com/cam/capi" target="_blank" rel="noopener">https://console.cloud.tencent.com/cam/capi</a></p><h3 id="配置-provider-环境变量"><a href="#配置-provider-环境变量" class="headerlink" title="配置 provider 环境变量"></a>配置 provider 环境变量</h3><p>可以通过创建 main.tf 实现，但建议以临时环境变量加载避免敏感信息泄漏</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">provider &quot;tencentcloud&quot; &#123;</span><br><span class="line">  secret_id  = &quot;your_secret_id&quot;</span><br><span class="line">  secret_key = &quot;your_secret_key&quot;</span><br><span class="line">  region     = &quot;your_region&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以直接通过环境变量方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export TENCENTCLOUD_SECRET_ID=&quot;your_secret_id&quot;</span><br><span class="line">export TENCENTCLOUD_SECRET_KEY=&quot;your_secret_key&quot;</span><br><span class="line">export TENCENTCLOUD_REGION=&quot;your_region&quot;</span><br></pre></td></tr></table></figure><p>推荐的配置是使用环境变量加载 <code>SECRET_ID</code> 和 <code>SECRET_KEY</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># tencentcloud-sandbox.</span><br><span class="line">export TENCENTCLOUD_SECRET_ID=&quot;xxx&quot;</span><br><span class="line">export TENCENTCLOUD_SECRET_KEY=&quot;xxx&quot;</span><br><span class="line"></span><br><span class="line"># provider.tf</span><br><span class="line">terraform &#123;</span><br><span class="line">  required_providers &#123;</span><br><span class="line">    tencentcloud = &#123;</span><br><span class="line">      source = &quot;tencentcloudstack/tencentcloud&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  required_version = &quot;&gt;= 0.13&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># main.tf</span><br><span class="line">provider &quot;tencentcloud&quot; &#123;</span><br><span class="line">  region = &quot;ap-chengdu&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询公共资源"><a href="#查询公共资源" class="headerlink" title="查询公共资源"></a>查询公共资源</h3><p>把资源依赖的上游资源，先查询出来，便宜后面引用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># Get availability regions</span><br><span class="line">data &quot;tencentcloud_availability_regions&quot; &quot;default&quot; &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># Get availability zones</span><br><span class="line">data &quot;tencentcloud_availability_zones&quot; &quot;default&quot; &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># Get availability images</span><br><span class="line">data &quot;tencentcloud_images&quot; &quot;default&quot; &#123;</span><br><span class="line">  image_type = [&quot;PUBLIC_IMAGE&quot;]</span><br><span class="line">  os_name    = &quot;centos&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># Get availability instance types</span><br><span class="line">data &quot;tencentcloud_instance_types&quot; &quot;default&quot; &#123;</span><br><span class="line">  cpu_core_count = 1</span><br><span class="line">  memory_size    = 2</span><br><span class="line"></span><br><span class="line">  filter &#123;</span><br><span class="line">    name   = &quot;zone&quot;</span><br><span class="line">    values = [&quot;$&#123;var.availability_zone&#125;&quot;]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  filter &#123;</span><br><span class="line">    name   = &quot;instance-family&quot;</span><br><span class="line">    values = [&quot;S5&quot;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="腾讯云资源编排-TIC-实践"><a href="#腾讯云资源编排-TIC-实践" class="headerlink" title="腾讯云资源编排 TIC 实践"></a>腾讯云资源编排 TIC 实践</h2><p>TIC（Tencent Cloud Infrastructure as Code）<br><a href="https://cloud.tencent.com/document/product/1213/45684" target="_blank" rel="noopener">https://cloud.tencent.com/document/product/1213/45684</a></p><p>腾讯云资源编排 TIC 是腾讯云推出的 IaC 开放平台，融合多种业内优秀的开源技术，通过 IaC 的方式解决您在云基础设施管理中面临的效率、成本和安全问题。</p><p>TIC 提供了资源编排、配置管理和合规检查三大功能模块，支持 HCL（Terraform）格式语法编写，同时提供丰富的基于腾讯云最佳实践的公共模板，有效降低您的学习、使用难度。</p><p>创建资源参数配置文件。为了与现网真实运营环境保持一致，我们创建了 2 台 CVM 云服务器、1 个 VPC、1 个子网、1 个路由表、1 个安全组、1 个云数据库 MySQL，分别创建了对应的配置文件为：cvm.tf、vpc.tf、subnet.tf、route_table.tf、security_group.tf、mysql.tf，文件的结构如下：</p><p>完整 tf 配置文件内容，请下载 <a href="https://tic-demo-1259649581.cos.ap-nanjing.myqcloud.com/templates/tic-demo-config.zip" target="_blank" rel="noopener">tic-demo-config.zip</a></p><blockquote><p>我对 tic-demo 做了些调整，但核心还是一样的，代码就不展示了</p></blockquote><p><img src="https://raw.githubusercontent.com/wsgzao/storage-public/master/img/20201012160649.svg" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">tic-demo</span><br><span class="line">├── cvm.tf</span><br><span class="line">├── graph.svg</span><br><span class="line">├── main.tf</span><br><span class="line">├── mysql.tf</span><br><span class="line">├── provider.tf</span><br><span class="line">├── route_table.tf</span><br><span class="line">├── security_group.tf</span><br><span class="line">├── subnet.tf</span><br><span class="line">├── terraform.tfstate</span><br><span class="line">├── terraform.tfstate.backup</span><br><span class="line">├── variable.tf</span><br><span class="line">└── vpc.tf</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/wsgzao/storage-public/master/img/20201013003753.png" alt=""></p><p><img src="https://raw.githubusercontent.com/wsgzao/storage-public/master/img/20201013003909.png" alt=""></p><table><thead><tr><th>模板名称</th><th>描述</th></tr></thead><tbody><tr><td>Create a CVM instance</td><td>Create Cloud Virtual Machine (CVM), Virtual Private Cloud (VPC), Security Group (SG) and Cloud Block Storage (CBS).</td></tr><tr><td>Create a MySQL instance</td><td>Create Cloud Database MySQL (TencentDB for MySQL), Security Group (SG).</td></tr><tr><td>Create a Redis instance</td><td>Create Cloud Database Redis (TencentDB for Redis), Security Group (SG).</td></tr><tr><td>Create TKE Cluster</td><td>Create Tencent Kubernetes Engine (TKE), Security Group (SG).</td></tr><tr><td>Create a MongoDB instance</td><td>Create Cloud Database MongoDB (TencentDB for MongoDB), Security Group (SG).</td></tr><tr><td>Create Multiple CBS with CVM</td><td>Create two Cloud Block Storage (CBS) disks, and bind the Cloud Block Storage to the Cloud Virtual Machine (CVM) instance.</td></tr><tr><td>Create Multiple CVM with CLB</td><td>Create Cloud Cloud Load Balancer (CLB), Cloud Virtual Machine (CVM), Virtual Private Cloud (VPC), Security Group (SG), Cloud Block Storage (CBS), and bind two Cloud Virtual Machine instances at the ba</td></tr><tr><td>Create Multiple COS buckets</td><td>Create two Cloud Object Storage (COS) buckets.</td></tr></tbody></table><p>关于模版可以查看公共<br><a href="https://console.cloud.tencent.com/tic/templates" target="_blank" rel="noopener">https://console.cloud.tencent.com/tic/templates</a></p><h2 id="terraform-tencentcloud-腾讯云实践"><a href="#terraform-tencentcloud-腾讯云实践" class="headerlink" title="terraform tencentcloud 腾讯云实践"></a>terraform tencentcloud 腾讯云实践</h2><p>terraform requirement: (region: sinagpore)</p><ol><li>VPC</li><li>CVM * 2. CentOS7, 2c2g, 50G+200G disk, no public IP</li><li>CVM * 1 same specs with public IP as jumpserver</li><li>MYSQL * 1</li><li>REDIS * 1</li><li>LB * 1, for user access the website externally.</li><li>Security GROUP, limited 443, 22,36000, open 80. allow all from internal.</li><li>cos bucket * 1</li><li>cam user * 1 with api key only, who could only access a sub-folder under the cos bucket in step 7.</li><li>Output necessary info without login to console and check</li></ol><blockquote><p>在实践之前需要对腾讯云产品文档有一个清晰的认识</p></blockquote><p><a href="https://cloud.tencent.com/document/product/215" target="_blank" rel="noopener">VPC 私有网络</a></p><p>私有网络（Virtual Private Cloud，VPC）是基于腾讯云构建的专属云上网络空间，为您在腾讯云上的资源提供网络服务，不同私有网络间完全逻辑隔离。您可以自定义网络环境、路由表、安全策略等；同时，私有网络支持多种方式连接 Internet、连接其他 VPC、连接您的本地数据中心，助力您轻松部署云上网络。</p><p><a href="https://cloud.tencent.com/document/product/213" target="_blank" rel="noopener">CVM 云服务器</a></p><p>云服务器（Cloud Virtual Machine，CVM）为您提供安全可靠的弹性计算服务。 只需几分钟，您就可以在云端获取和启用 CVM，用于实现您的计算需求。随着业务需求的变化，您可以实时扩展或缩减计算资源。CVM 支持按实际使用的资源计费，可以为您节约计算成本。使用 CVM 可以极大降低您的软硬件采购成本，简化 IT 运维工作。</p><p><a href="https://cloud.tencent.com/document/product/214" target="_blank" rel="noopener">CLB 负载均衡</a></p><p>负载均衡（Cloud Load Balancer，CLB）提供安全快捷的流量分发服务，访问流量经由 CLB 可以自动分配到云中的多台云服务器上，扩展系统的服务能力并消除单点故障。负载均衡支持亿级连接和千万级并发，可轻松应对大流量访问，满足业务需求。</p><p><a href="https://cloud.tencent.com/document/product/215/20089" target="_blank" rel="noopener">Security GROUP 安全组</a></p><p>安全组是一种虚拟防火墙，具备有状态的数据包过滤功能，用于设置云服务器、负载均衡、云数据库等实例的网络访问控制，控制实例级别的出入流量，是重要的网络安全隔离手段。<br>您可以通过配置安全组规则，允许或禁止安全组内的实例的出流量和入流量。</p><p><a href="https://cloud.tencent.com/document/product/552" target="_blank" rel="noopener">NAT 网关</a></p><p>NAT 网关（NAT Gateway）是一种支持 IP 地址转换服务，提供 SNAT 和 DNAT 能力，可为私有网络（VPC）内的资源提供安全、高性能的 Internet 访问服务。NAT 网关支持高达 99.99% 的高可用性、5Gbps 的带宽以及 1000 万以上的并发连接数。</p><p><a href="https://cloud.tencent.com/document/product/436" target="_blank" rel="noopener">COS 对象存储</a></p><p>对象存储（Cloud Object Storage，COS）是腾讯云提供的一种存储海量文件的分布式存储服务，具有高扩展性、低成本、可靠安全等优点。通过控制台、API、SDK 和工具等多样化方式，用户可简单、快速地接入 COS，进行多格式文件的上传、下载和管理，实现海量数据存储和管理。</p><p><a href="https://cloud.tencent.com/document/product/236" target="_blank" rel="noopener">云数据库 MySQL</a></p><p>腾讯云数据库 MySQL（TencentDB for MySQL）是一种稳定可靠、可弹性扩展和便于管理的关系型数据库服务。云数据库 MySQL 提供备份恢复、监控、容灾、快速扩容、数据传输等全套解决方案，为您简化数据库运维工作，使您能更加专注于业务发展。</p><p><a href="https://cloud.tencent.com/document/product/239" target="_blank" rel="noopener">云数据库 Redis</a></p><p>云数据库 Redis（TencentDB for Redis）是基于腾讯云在分布式缓存领域多年技术沉淀，提供的兼容 Redis 协议、高可用、高可靠、高弹性的数据库服务。云数据库 Redis 兼容 Redis 2.8、Redis 4.0、Redis 5.0 版本协议，提供标准和集群两大架构版本。最大支持 4TB 的存储容量，千万级的并发请求，满足业务在缓存、存储、计算等不同场景中的需求。</p><h3 id="terraform-tencentcloud-部署代码"><a href="#terraform-tencentcloud-部署代码" class="headerlink" title="terraform tencentcloud 部署代码"></a>terraform tencentcloud 部署代码</h3><p>代码示例和细节解释参考 <a href="https://registry.terraform.io/providers/tencentcloudstack/tencentcloud/latest/docs" target="_blank" rel="noopener">TencentCloud Provider</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">entry_task</span><br><span class="line">├── README.md</span><br><span class="line">├── clb.tf</span><br><span class="line">├── cos.tf</span><br><span class="line">├── main.tf</span><br><span class="line">├── mysql.tf</span><br><span class="line">├── output.tf</span><br><span class="line">├── provider.tf</span><br><span class="line">├── redis.tf</span><br><span class="line">├── terraform.tfstate</span><br><span class="line">├── terraform.tfstate.backup</span><br><span class="line">├── variables.tf</span><br><span class="line">├── variables_cos.tf</span><br><span class="line">├── variables_mysql.tf</span><br><span class="line">└── variables_redis.tf</span><br><span class="line"></span><br><span class="line">0 directories, 14 files</span><br></pre></td></tr></table></figure><p>对方正在输入…</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://cloud.tencent.com/document/product" target="_blank" rel="noopener">腾讯云文档中心</a></p><p><a href="https://979137.com/archives/870.html" target="_blank" rel="noopener">巧用 Terraform 完成腾讯云上自动运维</a></p><p><a href="http://www.panooo.com/Terraform_On_TencentCloud" target="_blank" rel="noopener">Terraform – Practice on Tencent Cloud</a></p><p><a href="https://cloud.tencent.com/developer/article/1473713" target="_blank" rel="noopener">腾讯云 Terraform 应用指南</a></p><p><a href="https://cloud.tencent.com/developer/article/1597530" target="_blank" rel="noopener">通过 terraform 快速创建腾讯云基础资源</a></p><p><a href="https://cloud.tencent.com/document/product/436/37271" target="_blank" rel="noopener">使用 Terraform 管理 COS</a></p>]]></content>
    
    <summary type="html">
    
      Terraform tencentcloud部署实践
    
    </summary>
    
      <category term="学习 | Study" scheme="https://wsgzao.github.io/categories/%E5%AD%A6%E4%B9%A0-Study/"/>
    
    
  </entry>
  
  <entry>
    <title>macOS 安装 sshpass</title>
    <link href="https://wsgzao.github.io/post/sshpass/"/>
    <id>https://wsgzao.github.io/post/sshpass/</id>
    <published>2020-10-13T05:59:49.000Z</published>
    <updated>2020-10-13T07:21:36.481Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>sshpass 是 ansible 密码输入的必要条件，在 Linux 中使用 <code>yum install sshpass</code> 或者 <code>apt-get install sshpass</code> 都可以轻松安装，但在 macOS 新版本中由于安全原因无法直接使用 <code>brew install sshpass</code>，需要采用其它安全的办法绕过。</p><h2 id="更新历史"><a href="#更新历史" class="headerlink" title="更新历史"></a>更新历史</h2><p>2020 年 10 月 13 日 - 初稿</p><p>阅读原文 - <a href="https://wsgzao.github.io/post/sshpass/">https://wsgzao.github.io/post/sshpass/</a></p><hr><h2 id="使用-sshpass-的场景"><a href="#使用-sshpass-的场景" class="headerlink" title="使用 sshpass 的场景"></a>使用 sshpass 的场景</h2><p>在 macOS 下使用 ansible 命令 (inventory 文件中使用了密码验证的方式) 或者使用 iTerm2 来完成自动密码填充等场景会使用到 sshpass。</p><p>比如下面的样例：Inventory 文件中使用了 <code>ansible_ssh_pass</code> 选项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑 inventory</span></span><br><span class="line">cat hosts</span><br><span class="line">10.10.66.66 ansible_port=22 ansible_user=root ansible_ssh_pass=test666</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 ansible 命令会失败，提示缺少 sshpass</span></span><br><span class="line">ansible all -i test.hosts  -m ping</span><br><span class="line">10.10.66.66 | FAILED! =&gt; &#123;</span><br><span class="line">    <span class="string">"failed"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"to use the'ssh'connection type with passwords, you must install the sshpass program"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="安装-sshpass-及各种常见小问题处理"><a href="#安装-sshpass-及各种常见小问题处理" class="headerlink" title="安装 sshpass 及各种常见小问题处理"></a>安装 sshpass 及各种常见小问题处理</h2><p>直接 <code>brew install</code> 会提示不安全，被拒绝，<code>brew install --force</code> 强制安装也不行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">brew install sshpass -f</span><br><span class="line">Updating Homebrew...</span><br><span class="line">Error: No available formula with the name <span class="string">"sshpass"</span></span><br><span class="line">We won<span class="string">'t add sshpass because it makes it too easy for novice SSH users to</span></span><br><span class="line"><span class="string">ruin SSH'</span>s security.</span><br></pre></td></tr></table></figure><p>可以通过下面的命令进行安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">brew install https://raw.githubusercontent.com/kadwanev/bigboybrew/master/Library/Formula/sshpass.rb</span><br><span class="line"></span><br><span class="line">Error: Calling Non-checksummed download of sshpass formula file from an arbitrary URL is disabled! Use <span class="string">'brew extract'</span> or <span class="string">'brew create'</span> and <span class="string">'brew tap-new'</span> to create a formula file <span class="keyword">in</span> a tap on GitHub instead.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 出现上述报错可以下载至本地再次执行安装</span></span><br><span class="line">wget https://raw.githubusercontent.com/kadwanev/bigboybrew/master/Library/Formula/sshpass.rb</span><br><span class="line">brew install sshpass.rb</span><br></pre></td></tr></table></figure><p>sshpass.rb 文件内容</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'formula'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sshpass</span> &lt; Formula</span></span><br><span class="line">  url <span class="string">'http://sourceforge.net/projects/sshpass/files/sshpass/1.06/sshpass-1.06.tar.gz'</span></span><br><span class="line">  homepage <span class="string">'http://sourceforge.net/projects/sshpass'</span></span><br><span class="line">  sha256 <span class="string">'c6324fcee608b99a58f9870157dfa754837f8c48be3df0f5e2f3accf145dee60'</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">install</span></span></span><br><span class="line">    system <span class="string">"./configure"</span>, <span class="string">"--disable-debug"</span>, <span class="string">"--disable-dependency-tracking"</span>,</span><br><span class="line">                          <span class="string">"--prefix=<span class="subst">#&#123;prefix&#125;</span>"</span></span><br><span class="line">    system <span class="string">"make install"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test</span></span></span><br><span class="line">    system <span class="string">"sshpass"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>如果 (因为众所周知的网络原因) 通过 <code>brew install https://raw.githubusercontent.com/kadwanev/bigboybrew/master/Library/Formula/sshpass.rb</code> 的方式不能正常工作，可以将上面 rubby 脚本 <code>sshpass.rb</code> 的内容拷贝到本地执行 <code>brew install sshpass.rb</code></p><p>再次尝试安装提示缺少 <code>xcode-select</code> 命令行工具，可以通过 <code>xcode-select --install</code> 进行安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">brew install sshpass.rb</span><br><span class="line">Error: Xcode alone is not sufficient on Mojave.</span><br><span class="line">Install the Command Line Tools:</span><br><span class="line">  xcode-select --install</span><br><span class="line"></span><br><span class="line">xcode-select --install</span><br><span class="line">xcode-select: note: install requested <span class="keyword">for</span> <span class="built_in">command</span> line developer tools</span><br></pre></td></tr></table></figure><p>安装完 <code>xcode-select</code> 之后重新执行 <code>brew install</code> 命令，<code>sshpass</code> 安装成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">brew install sshpass.rb</span><br><span class="line">Updating Homebrew...</span><br><span class="line">==&gt; Downloading http://sourceforge.net/projects/sshpass/files/sshpass/1.06/sshpass-1.06.tar.gz</span><br><span class="line">==&gt; Downloading from https://jaist.dl.sourceforge.net/project/sshpass/sshpass/1.06/sshpass-1.06.tar.g</span><br><span class="line"><span class="comment">######################################################################## 100.0%</span></span><br><span class="line">==&gt; ./configure --prefix=/usr/<span class="built_in">local</span>/Cellar/sshpass/1.06</span><br><span class="line">==&gt; make install</span><br><span class="line">🍺  /usr/<span class="built_in">local</span>/Cellar/sshpass/1.06: 9 files, 41.6KB, built <span class="keyword">in</span> 33 seconds</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      macOS安装sshpass
    
    </summary>
    
      <category term="学习 | Study" scheme="https://wsgzao.github.io/categories/%E5%AD%A6%E4%B9%A0-Study/"/>
    
    
  </entry>
  
  <entry>
    <title>Updating Homebrew 卡住的解决方案</title>
    <link href="https://wsgzao.github.io/post/homebrew-update/"/>
    <id>https://wsgzao.github.io/post/homebrew-update/</id>
    <published>2020-10-13T04:59:49.000Z</published>
    <updated>2020-10-13T06:49:38.046Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>换了 MacBook 16 寸的电脑正好在使用 brew 安装一些应用，发现一个小问题是每次执行如 <code>brew install ansible</code> 命令停留在 <code>Updating Homebrew...</code> 的时间特别长，在新加坡理论上应该和网络无关，最后按照网络上的方案选择关闭每次检查更新解决。</p><h2 id="更新历史"><a href="#更新历史" class="headerlink" title="更新历史"></a>更新历史</h2><p>2020 年 10 月 13 日 - 初稿</p><p>阅读原文 - <a href="https://wsgzao.github.io/post/homebrew-update/">https://wsgzao.github.io/post/homebrew-update/</a></p><hr><h2 id="Homebrew-关闭自动更新"><a href="#Homebrew-关闭自动更新" class="headerlink" title="Homebrew 关闭自动更新"></a>Homebrew 关闭自动更新</h2><p>通过环境变量关闭 Homebrew 自动更新解决 Updating Homebrew 方法最简单</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 卡在 Updating Homebrew 好久 </span><br><span class="line">brew install ansible</span><br><span class="line">Updating Homebrew...</span><br><span class="line"></span><br><span class="line"># 关闭自动更新，在. zshrc 文件中加入下方命令，如果是 bash 请加在. bash_profile 文件中，全局变量可以 sudo vi /etc/profile</span><br><span class="line">vim ~/.zshrc</span><br><span class="line">export HOMEBREW_NO_AUTO_UPDATE=true</span><br><span class="line"></span><br><span class="line"># 刷新环境变量 </span><br><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure><h2 id="Homebrew-镜像源加速"><a href="#Homebrew-镜像源加速" class="headerlink" title="Homebrew 镜像源加速"></a>Homebrew 镜像源加速</h2><p>我们平时执行 brew 命令安装软件的时候，跟这三个仓库有关：</p><ol><li>brew.git</li><li>homebrew-core.git</li><li>homebrew-bottles</li></ol><p>使用阿里或者清华的 Homebrew 镜像源代替可以进行加速</p><p><a href="https://mirrors.aliyun.com/homebrew/" target="_blank" rel="noopener">https://mirrors.aliyun.com/homebrew/</a></p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 替换 brew.git</span></span><br><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>"</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.aliyun.com/homebrew/brew.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换 homebrew-core.git</span></span><br><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core"</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换 homebrew-bottles 访问地址 </span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles'</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 还原 brew.git</span></span><br><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>"</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://github.com/Homebrew/brew.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 还原 homebrew-core.git</span></span><br><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core"</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://github.com/Homebrew/homebrew-core.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 还原的话就是删除 HOMEBREW_BOTTLE_DOMAIN，上面的是 zsh 的命令，如果是 bash 的话请写在. bash_profile 文件中。</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Updating Homebrew卡住的解决方案
    
    </summary>
    
      <category term="学习 | Study" scheme="https://wsgzao.github.io/categories/%E5%AD%A6%E4%B9%A0-Study/"/>
    
    
  </entry>
  
  <entry>
    <title>nc 命令使用小结</title>
    <link href="https://wsgzao.github.io/post/nc/"/>
    <id>https://wsgzao.github.io/post/nc/</id>
    <published>2020-10-07T06:59:49.000Z</published>
    <updated>2020-10-08T16:28:36.517Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>nc 是 netcat 的简写，有着网络界的瑞士军刀美誉。因为它短小精悍、功能实用，被设计为一个简单、可靠的网络工具。比如大家很熟悉使用 telnet 测试 tcp 端口，而 nc 可以支持测试 linux 的 tcp 和 udp 端口，而且也经常被用于端口扫描，甚至把 nc 作为 server 以 TCP 或 UDP 方式侦听指定端口做简单的模拟测试。</p><h2 id="更新历史"><a href="#更新历史" class="headerlink" title="更新历史"></a>更新历史</h2><p>2020 年 10 月 07 日 - 初稿</p><p>阅读原文 - <a href="https://wsgzao.github.io/post/nc/">https://wsgzao.github.io/post/nc/</a></p><hr><h2 id="nc-简介"><a href="#nc-简介" class="headerlink" title="nc 简介"></a>nc 简介</h2><p><code>ncat</code> 或者说 <code>nc</code> 是一款功能类似 <code>cat</code> 的工具，但是是用于网络的。它是一款拥有多种功能的 CLI 工具，可以用来在网络上读、写以及重定向数据。 它被设计成可以被脚本或其他程序调用的可靠的后端工具。同时由于它能创建任意所需的连接，因此也是一个很好的网络调试工具。</p><p><code>ncat</code>/<code>nc</code> 既是一个端口扫描工具，也是一款安全工具，还能是一款监测工具，甚至可以做为一个简单的 TCP 代理。 由于有这么多的功能，它被誉为是网络界的瑞士军刀。 这是每个系统管理员都应该知道并且掌握它。</p><p>在大多数 Debian 发行版中，<code>nc</code> 是默认可用的，它会在安装系统的过程中自动被安装。 但是在 CentOS 7 / RHEL 7 的最小化安装中，<code>nc</code> 并不会默认被安装。 你需要用下列命令手工安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 nc</span></span><br><span class="line">[root@localhost wangao]<span class="comment"># yum provides nc</span></span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: centos.usonyx.net</span><br><span class="line"> * extras: centos.usonyx.net</span><br><span class="line"> * updates: centos.usonyx.net</span><br><span class="line">2:nmap-ncat-6.40-19.el7.x86_64 : Nmap<span class="string">'s Netcat replacement</span></span><br><span class="line"><span class="string">Repo        : base</span></span><br><span class="line"><span class="string">Matched from:</span></span><br><span class="line"><span class="string">Provides    : nc</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 执行 nc 或者 nmap-ncat 安装都可以 </span></span><br><span class="line"><span class="string">yum install nmap-ncat -y</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 我们通过 ll 命令查看 nc 命令, 老版本对应的 ncat，新版本则直接指向 nmap</span></span><br><span class="line"><span class="string">ll /usr/bin/nc</span></span><br><span class="line"><span class="string">lrwxrwxrwx. 1 root root 4 Feb 19 19:09 /usr/bin/nc -&gt; ncat</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[root@localhost wangao]# ll /usr/bin/nc</span></span><br><span class="line"><span class="string">lrwxrwxrwx. 1 root root 22 Oct  8 11:25 /usr/bin/nc -&gt; /etc/alternatives/nmap</span></span><br></pre></td></tr></table></figure><h2 id="nc-常用命令"><a href="#nc-常用命令" class="headerlink" title="nc 常用命令"></a>nc 常用命令</h2><p>nc 的作用：</p><ol><li>实现任意 TCP/UDP 端口的侦听，nc 可以作为 server 以 TCP 或 UDP 方式侦听指定端口</li><li>端口的扫描，nc 可以作为 client 发起 TCP 或 UDP 连接</li><li>机器之间传输文件</li><li>机器之间网络测速     </li></ol><p>nc 的控制参数不少，常用的几个参数如下所列：</p><p>1) -l</p><p>用于指定 nc 将处于侦听模式。指定该参数，则意味着 nc 被当作 server，侦听并接受连接，而非向其它地址发起连接。</p><p>2) -p <port></port></p><p>暂未用到（老版本的 nc 可能需要在端口号前加 - p 参数）</p><p>3) -s </p><p>指定发送数据的源 IP 地址，适用于多网卡机 </p><p>4) -u</p><p> 指定 nc 使用 UDP 协议，默认为 TCP</p><p>5) -v</p><p>输出交互或出错信息，新手调试时尤为有用</p><p>6）-w</p><p>超时秒数，后面跟数字 </p><p>7）-z</p><p>表示 zero，表示扫描时不发送任何数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">NAME</span><br><span class="line">       ncat - Concatenate and redirect sockets</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">       ncat [OPTIONS...] [hostname] [port]</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">       Ncat is a feature-packed networking utility which reads and writes data across networks</span><br><span class="line">       from the command line. Ncat was written for the Nmap Project and is the culmination of</span><br><span class="line">       the currently splintered family of Netcat incarnations. It is designed to be a reliable</span><br><span class="line">       back-end tool to instantly provide network connectivity to other applications and users.</span><br><span class="line">       Ncat will not only work with IPv4 and IPv6 but provides the user with a virtually</span><br><span class="line">       limitless number of potential uses.</span><br><span class="line"></span><br><span class="line">       Among Ncat&apos;s vast number of features there is the ability to chain Ncats together;</span><br><span class="line">       redirection of TCP, UDP, and SCTP ports to other sites; SSL support; and proxy</span><br><span class="line">       connections via SOCKS4 or HTTP proxies (with optional proxy authentication as well).</span><br><span class="line">       Some general principles apply to most applications and thus give you the capability of</span><br><span class="line">       instantly adding networking support to software that would normally never support it.</span><br><span class="line"></span><br><span class="line">OPTIONS SUMMARY</span><br><span class="line">           Ncat 7.50 ( https://nmap.org/ncat )</span><br><span class="line">           Usage: ncat [options] [hostname] [port]</span><br><span class="line"></span><br><span class="line">           Options taking a time assume seconds. Append &apos;ms&apos; for milliseconds,</span><br><span class="line">           &apos;s&apos; for seconds, &apos;m&apos; for minutes, or &apos;h&apos; for hours (e.g. 500ms).</span><br><span class="line">             -4                         Use IPv4 only</span><br><span class="line">             -6                         Use IPv6 only</span><br><span class="line">             -U, --unixsock             Use Unix domain sockets only</span><br><span class="line">             -C, --crlf                 Use CRLF for EOL sequence</span><br><span class="line">             -c, --sh-exec &lt;command&gt;    Executes the given command via /bin/sh</span><br><span class="line">             -e, --exec &lt;command&gt;       Executes the given command</span><br><span class="line">                 --lua-exec &lt;filename&gt;  Executes the given Lua script</span><br><span class="line">             -g hop1[,hop2,...]         Loose source routing hop points (8 max)</span><br><span class="line">             -G &lt;n&gt;                     Loose source routing hop pointer (4, 8, 12, ...)</span><br><span class="line">             -m, --max-conns &lt;n&gt;        Maximum &lt;n&gt; simultaneous connections</span><br><span class="line">             -h, --help                 Display this help screen</span><br><span class="line">             -d, --delay &lt;time&gt;         Wait between read/writes</span><br><span class="line">             -o, --output &lt;filename&gt;    Dump session data to a file</span><br><span class="line">             -x, --hex-dump &lt;filename&gt;  Dump session data as hex to a file</span><br><span class="line">             -i, --idle-timeout &lt;time&gt;  Idle read/write timeout</span><br><span class="line">             -p, --source-port port     Specify source port to use</span><br><span class="line">             -s, --source addr          Specify source address to use (doesn&apos;t affect -l)</span><br><span class="line">             -l, --listen               Bind and listen for incoming connections</span><br><span class="line">             -k, --keep-open            Accept multiple connections in listen mode</span><br><span class="line">             -n, --nodns                Do not resolve hostnames via DNS</span><br><span class="line">             -t, --telnet               Answer Telnet negotiations</span><br><span class="line">             -u, --udp                  Use UDP instead of default TCP</span><br><span class="line">                 --sctp                 Use SCTP instead of default TCP</span><br><span class="line">             -v, --verbose              Set verbosity level (can be used several times)</span><br><span class="line">             -w, --wait &lt;time&gt;          Connect timeout</span><br><span class="line">             -z                         Zero-I/O mode, report connection status only</span><br><span class="line">                 --append-output        Append rather than clobber specified output files</span><br><span class="line">                 --send-only            Only send data, ignoring received; quit on EOF</span><br><span class="line">                 --recv-only            Only receive data, never send anything</span><br><span class="line">                 --allow                Allow only given hosts to connect to Ncat</span><br><span class="line">                 --allowfile            A file of hosts allowed to connect to Ncat</span><br><span class="line">                 --deny                 Deny given hosts from connecting to Ncat</span><br><span class="line">                 --denyfile             A file of hosts denied from connecting to Ncat</span><br><span class="line">                 --broker               Enable Ncat&apos;s connection brokering mode</span><br><span class="line">                 --chat                 Start a simple Ncat chat server</span><br><span class="line">                 --proxy &lt;addr[:port]&gt;  Specify address of host to proxy through</span><br><span class="line">                 --proxy-type &lt;type&gt;    Specify proxy type (&quot;http&quot; or &quot;socks4&quot; or &quot;socks5&quot;)</span><br><span class="line">                 --proxy-auth &lt;auth&gt;    Authenticate with HTTP or SOCKS proxy server</span><br><span class="line">                 --ssl                  Connect or listen with SSL</span><br><span class="line">                 --ssl-cert             Specify SSL certificate file (PEM) for listening</span><br><span class="line">                 --ssl-key              Specify SSL private key (PEM) for listening</span><br><span class="line">                 --ssl-verify           Verify trust and domain name of certificates</span><br><span class="line">                 --ssl-trustfile        PEM file containing trusted SSL certificates</span><br><span class="line">                 --ssl-ciphers          Cipherlist containing SSL ciphers to use</span><br><span class="line">                 --version              Display Ncat&apos;s version information and exit</span><br><span class="line"></span><br><span class="line">           See the ncat(1) manpage for full options, descriptions and usage examples</span><br></pre></td></tr></table></figure><h2 id="nc-常用命令实例"><a href="#nc-常用命令实例" class="headerlink" title="nc 常用命令实例"></a>nc 常用命令实例</h2><h3 id="nc-测试-tcp-和-udp-端口"><a href="#nc-测试-tcp-和-udp-端口" class="headerlink" title="nc 测试 tcp 和 udp 端口"></a>nc 测试 tcp 和 udp 端口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试 tcp 一般会想到使用 telnet</span></span><br><span class="line">telnet 192.168.12.10 22</span><br><span class="line"></span><br><span class="line"><span class="comment"># telnet 不支持 udp 协议，所以我们可以使用 nc，nc 可以支持 tcp 也可以支持 udp</span></span><br><span class="line">yum install -y nc</span><br><span class="line">nc -z -v 192.168.10.12 22 <span class="comment">#tcp</span></span><br><span class="line">nc -z -v -u 192.168.10.12 123 <span class="comment"># udp</span></span><br></pre></td></tr></table></figure><h3 id="nc-监听端口和扫描连接端口"><a href="#nc-监听端口和扫描连接端口" class="headerlink" title="nc 监听端口和扫描连接端口"></a>nc 监听端口和扫描连接端口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 监听端口 </span></span><br><span class="line">[root@localhost wangao]<span class="comment"># nc -l 8888 -v</span></span><br><span class="line">Ncat: Version 7.50 ( https://nmap.org/ncat )</span><br><span class="line">Ncat: Listening on :::8888</span><br><span class="line">Ncat: Listening on 0.0.0.0:8888</span><br><span class="line">Ncat: Connection from 127.0.0.1.</span><br><span class="line">Ncat: Connection from 127.0.0.1:56090.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接端口 </span></span><br><span class="line">[root@localhost wangao]<span class="comment"># nc -vz -w 5 127.0.0.1 8888</span></span><br><span class="line">Ncat: Version 7.50 ( https://nmap.org/ncat )</span><br><span class="line">Ncat: Connected to 127.0.0.1:8888.</span><br><span class="line">Ncat: 0 bytes sent, 0 bytes received <span class="keyword">in</span> 0.01 seconds.</span><br></pre></td></tr></table></figure><h3 id="nc-examples"><a href="#nc-examples" class="headerlink" title="nc examples"></a>nc examples</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">EXAMPLES</span><br><span class="line">       Connect to example.org on TCP port 8080.</span><br><span class="line">           ncat example.org 8080</span><br><span class="line"></span><br><span class="line">       Listen for connections on TCP port 8080.</span><br><span class="line">           ncat -l 8080</span><br><span class="line"></span><br><span class="line">       Redirect TCP port 8080 on the local machine to host on port 80.</span><br><span class="line">           ncat --sh-exec &quot;ncat example.org 80&quot; -l 8080 --keep-open</span><br><span class="line"></span><br><span class="line">       Bind to TCP port 8081 and attach /bin/bash for the world to access freely.</span><br><span class="line">           ncat --exec &quot;/bin/bash&quot; -l 8081 --keep-open</span><br><span class="line"></span><br><span class="line">       Bind a shell to TCP port 8081, limit access to hosts on a local network, and limit the</span><br><span class="line">       maximum number of simultaneous connections to 3.</span><br><span class="line">           ncat --exec &quot;/bin/bash&quot; --max-conns 3 --allow 192.168.0.0/24 -l 8081 --keep-open</span><br><span class="line"></span><br><span class="line">       Connect to smtphost:25 through a SOCKS4 server on port 1080.</span><br><span class="line">           ncat --proxy socks4host --proxy-type socks4 --proxy-auth user smtphost 25</span><br><span class="line"></span><br><span class="line">       Create an HTTP proxy server on localhost port 8888.</span><br><span class="line">           ncat -l --proxy-type http localhost 8888</span><br><span class="line"></span><br><span class="line">       Send a file over TCP port 9899 from host2 (client) to host1 (server).</span><br><span class="line">           HOST1$ ncat -l 9899 &gt; outputfile</span><br><span class="line"></span><br><span class="line">           HOST2$ ncat HOST1 9899 &lt; inputfile</span><br><span class="line"></span><br><span class="line">       Transfer in the other direction, turning Ncat into a “one file” server.</span><br><span class="line">           HOST1$ ncat -l 9899 &lt; inputfile</span><br><span class="line"></span><br><span class="line">           HOST2$ ncat HOST1 9899 &gt; outputfile</span><br></pre></td></tr></table></figure><h3 id="nc-批量端口扫描脚本"><a href="#nc-批量端口扫描脚本" class="headerlink" title="nc 批量端口扫描脚本"></a>nc 批量端口扫描脚本</h3><blockquote><p>方案 1: 利用 nc 构建简单的 bash 脚本</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 假如我们要监控一堆指定的 IP 和端口，可新建一个文件（第 1 列为服务器 IP，第 2 列为监控的端口，中间用空格分隔）</span></span><br><span class="line">[root@localhost ~]<span class="comment"># vi ip-ports.txt</span></span><br><span class="line">127.0.0.1 21</span><br><span class="line">127.0.0.1 22</span><br><span class="line">127.0.0.1 23</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建这样一个脚本来批量检测端口是否开放，成功会返回 0 值显示 ok，失败会返回 1 值显示 fail</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># vi ncports.sh</span></span><br><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line"></span><br><span class="line">cat ip-ports.txt | <span class="keyword">while</span> <span class="built_in">read</span> line</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  nc -w 10 -z <span class="variable">$line</span> &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">  <span class="keyword">if</span> [ $? -eq 0 ]</span><br><span class="line">  <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$line</span>:ok</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$line</span>:failed</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 给脚本赋予可执行权限，并执行查看结果 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># chmod a+x ncports.sh</span></span><br><span class="line">[root@localhost ~]<span class="comment"># sh ncports.sh</span></span><br><span class="line">127.0.0.1 21:failed</span><br><span class="line">127.0.0.1 22:ok</span><br><span class="line">127.0.0.1 23:failed</span><br></pre></td></tr></table></figure><blockquote><p>方案 2: 利用 nc 或者 nmap 构建复杂的 bash 脚本</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建配置文件 </span></span><br><span class="line">vim ports_list.cfg</span><br><span class="line"></span><br><span class="line"><span class="comment">#    IP        PROTOCOL(tcp/udp)        PORTS(1,2,3)</span></span><br><span class="line">127.0.0.1      tcp                      21,22,23</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建脚本 </span></span><br><span class="line">vim scan_ports.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行脚本 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># ./scan_ports.sh</span></span><br><span class="line">2020-10-08 12:03:31  Connection to 127.0.0.1 23 port [tcp/23] failed!</span><br><span class="line">2020-10-08 12:03:31  Connection to 127.0.0.1 21 port [tcp/21] failed!</span><br><span class="line">Hosts: 1 Ports: 3 Times: 0s</span><br></pre></td></tr></table></figure><p>作用：批量端口扫描，可根据扫描主机的配置调整后台扫描进程数量（手动执行后根据统计的执行时间调整脚本中关于进程数量的参数），通过定时任务作为简单的服务监控（可修改脚本添加其他报警功能，例如邮件等）</p><p>实现：使用 nc 指令扫描端口，使用管道特性控制后台扫描进程数量</p><p>不足：仅仅对扫描端口状态为 down 的信息做记录，并没有其他报警操作</p><p>使用：</p><ol><li>需要提供包含被扫描主机的 ip 地址、协议和端口号的配置文件（格式见演示或代码专区注释）</li><li>需要一个日志文件记录端口 down 状态信息。 </li><li>配置和日志文件在脚本中定义，默认为：ports_list.cfg　和　port_down.log</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># vim scan_ports.sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># the conf_file, like this:</span></span><br><span class="line"><span class="comment">#------------------------------------------------------</span></span><br><span class="line"><span class="comment">#        IP       PROTOCOL(tcp/udp)     PORTS(1,2,3)  |</span></span><br><span class="line"><span class="comment">#                                                     |</span></span><br><span class="line"><span class="comment">#  192.168.2.250      tcp                21,22,23     |</span></span><br><span class="line"><span class="comment">#------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># config file</span></span><br><span class="line">conf_file=ports_list.cfg</span><br><span class="line">port_down_log=port_down.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># number of backgroud processes</span></span><br><span class="line">number_of_background_processes=1000</span><br><span class="line"></span><br><span class="line">host_count=0</span><br><span class="line">port_count=0</span><br><span class="line"></span><br><span class="line">time_start=0</span><br><span class="line">time_end=0</span><br><span class="line"></span><br><span class="line">all_cfg_infor=$( grep -E -v <span class="string">'(^ *#|^$)'</span> <span class="variable">$conf_file</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment"># check nc</span></span><br><span class="line"><span class="keyword">if</span> ! rpm -q nc &amp;&gt;/dev/null; <span class="keyword">then</span></span><br><span class="line">    yum install -y nc &amp;&gt;/dev/null</span><br><span class="line">    [[ $? -ne 0 ]] &amp;&amp; <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print timestamp</span></span><br><span class="line"><span class="keyword">function</span> timestamp()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">echo</span> -n <span class="string">"<span class="variable">$(date +"%Y-%m-%d %H:%M:%S")</span>"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># scan_ports main function</span></span><br><span class="line"><span class="comment"># host &#123;tcp|udp&#125; port</span></span><br><span class="line"><span class="keyword">function</span> scan_host_port()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">local</span> this_protocol</span><br><span class="line">    <span class="keyword">if</span> [[ <span class="variable">$2</span> == <span class="string">'udp'</span> ]]; <span class="keyword">then</span></span><br><span class="line">        this_protocol=<span class="string">'-u'</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        this_protocol=<span class="string">''</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">if</span> ! nc -z -w 1 <span class="variable">$this_protocol</span> <span class="variable">$1</span> <span class="variable">$3</span>; <span class="keyword">then</span></span><br><span class="line">        <span class="comment"># can add other alert msg</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"<span class="variable">$(timestamp)</span> Connection to <span class="variable">$1</span> <span class="variable">$3</span> port [<span class="variable">$2</span>/<span class="variable">$3</span>] failed!"</span> | tee -a <span class="variable">$port_down_log</span></span><br><span class="line">    <span class="comment"># else</span></span><br><span class="line">    <span class="comment">#     echo"$(timestamp) Connection to $1 $3 port [$2/$3] ok!"| tee -a $port_down_log</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum_line_of_all_cfg_infor=$(<span class="built_in">echo</span> <span class="string">"<span class="variable">$all_cfg_infor</span>"</span> | wc -l)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pipe operators</span></span><br><span class="line">fifo_file=$(date +%s)</span><br><span class="line"><span class="keyword">if</span> mkfifo <span class="variable">$fifo_file</span>; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">exec</span> 46&lt;&gt;<span class="variable">$fifo_file</span> </span><br><span class="line">    rm -fr <span class="variable">$fifo_file</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Create fifo file failed !"</span></span><br><span class="line">    <span class="built_in">exit</span> 2</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># control function</span></span><br><span class="line">time_start=$(date +%s)</span><br><span class="line"><span class="keyword">for</span>((count_n=1; count_n&lt;=number_of_background_processes; count_n++))</span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">    <span class="built_in">echo</span> &gt;&amp;46</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -----------------------------$(timestamp)--------------------------- &gt;&gt;<span class="variable">$port_down_log</span></span><br><span class="line"><span class="keyword">for</span>((line_num=1; line_num&lt;=sum_line_of_all_cfg_infor; line_num++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    </span><br><span class="line">    line_infor=$( <span class="built_in">echo</span> <span class="string">"<span class="variable">$all_cfg_infor</span>"</span> | sed -n <span class="string">"<span class="variable">$&#123;line_num&#125;</span>p"</span> )</span><br><span class="line">    line_ip=$( <span class="built_in">echo</span> <span class="variable">$line_infor</span> | awk  <span class="string">'&#123;print $1&#125;'</span> )</span><br><span class="line">    line_protocol=$( <span class="built_in">echo</span> <span class="variable">$line_infor</span> | awk <span class="string">'&#123;print $2&#125;'</span> )</span><br><span class="line">    <span class="comment"># read line_ip line_protocol &lt; &lt;(echo $line_infor | awk'&#123;print $1,$2&#125;')</span></span><br><span class="line">    <span class="keyword">for</span> this_port <span class="keyword">in</span> $( <span class="built_in">echo</span> <span class="variable">$line_infor</span> | awk <span class="string">'&#123;print $3&#125;'</span> | tr <span class="string">','</span> <span class="string">' '</span>)</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="comment"># read pipe after port scan</span></span><br><span class="line">        <span class="built_in">read</span> -u46</span><br><span class="line">        <span class="comment"># put process into background for concurrency</span></span><br><span class="line">        &#123;</span><br><span class="line">            scan_host_port <span class="variable">$line_ip</span> <span class="variable">$line_protocol</span> <span class="variable">$this_port</span></span><br><span class="line">            <span class="comment"># make a write operation after pipe operator finished</span></span><br><span class="line">            <span class="built_in">echo</span> &gt;&amp;46</span><br><span class="line">        &#125; &amp;</span><br><span class="line">        <span class="built_in">let</span> port_count++</span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    <span class="built_in">let</span> host_count++</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">wait</span></span><br><span class="line"><span class="comment"># release</span></span><br><span class="line"><span class="built_in">exec</span> 46&gt;&amp;-</span><br><span class="line"><span class="built_in">exec</span> 46&lt;&amp;-</span><br><span class="line">time_end=$(date +%s)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> Hosts: <span class="variable">$host_count</span>  Ports: <span class="variable">$port_count</span>  Times: $((time_end-time_start))s | tee -a <span class="variable">$port_down_log</span></span><br></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.linuxtechi.com/nc-ncat-command-examples-linux-systems/" target="_blank" rel="noopener">10 useful ncat (nc) Command Examples for Linux Systems</a></p><p><a href="https://cloud.tencent.com/developer/article/1493030" target="_blank" rel="noopener">nc 命令用法举例</a></p>]]></content>
    
    <summary type="html">
    
      nc命令使用小结
    
    </summary>
    
      <category term="学习 | Study" scheme="https://wsgzao.github.io/categories/%E5%AD%A6%E4%B9%A0-Study/"/>
    
    
  </entry>
  
  <entry>
    <title>Terraform 学习路径</title>
    <link href="https://wsgzao.github.io/post/terraform/"/>
    <id>https://wsgzao.github.io/post/terraform/</id>
    <published>2020-10-06T06:59:49.000Z</published>
    <updated>2020-10-21T06:25:03.139Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>相信 Infrastructure as Code (IaC)的 DevOps 理念已经深入人心，如果是 Ansible 是偏向 Infrastructure Configuration tool，那么 Terraform 就是 Infrastructure provision tool，两者本身并不冲突，而 Terraform 使用 declarative 声明式语法结合强大的生态让我们在多云 (AWS, Azure, GCP, Alibaba Cloud, TencentCloud) 和容器化 (K8s) 环境中可以更加地从容应对新挑战实现统一的资源编排管理。</p><h2 id="更新历史"><a href="#更新历史" class="headerlink" title="更新历史"></a>更新历史</h2><p>2020 年 10 月 06 日 - 更新 Terraform 在 AWS / 阿里云 / 腾讯云的部署实例<br>2020 年 10 月 01 日 - 初稿</p><p>阅读原文 - <a href="https://wsgzao.github.io/post/terraform/">https://wsgzao.github.io/post/terraform/</a></p><hr><h2 id="Terraform-简介"><a href="#Terraform-简介" class="headerlink" title="Terraform 简介"></a>Terraform 简介</h2><blockquote><p>Terraform 官方文档中 CTO 的介绍视频可以帮助你快速了解</p></blockquote><p><img src="https://raw.githubusercontent.com/wsgzao/storage-public/master/img/20200917160138.png" alt=""></p><p>Terraform is a tool for building, changing, and versioning infrastructure safely and efficiently. Terraform can manage existing and popular service providers as well as custom in-house solutions.</p><p>Configuration files describe to Terraform the components needed to run a single application or your entire datacenter. Terraform generates an execution plan describing what it will do to reach the desired state, and then executes it to build the described infrastructure. As the configuration changes, Terraform is able to determine what changed and create incremental execution plans which can be applied.</p><p>The infrastructure Terraform can manage includes low-level components such as compute instances, storage, and networking, as well as high-level components such as DNS entries, SaaS features, etc.</p><p>开发公司：HashiCorp<br>入门手册：<a href="https://www.terraform.io/intro/index.html" target="_blank" rel="noopener">https://www.terraform.io/intro/index.html</a><br>官网: <a href="https://www.terraform.io/" target="_blank" rel="noopener">https://www.terraform.io/</a><br>Github：<a href="https://github.com/hashicorp/terraform" target="_blank" rel="noopener">https://github.com/hashicorp/terraform</a><br>功能：terraform 用于各类基础设施资源初始化，支持多种云平台，支持第三方服务对接</p><p><a href="https://www.terraform.io/intro/index.html" target="_blank" rel="noopener">Introduction to Terraform</a></p><p><a href="https://learn.hashicorp.com/tutorials/terraform/infrastructure-as-code" target="_blank" rel="noopener">Introduction to Infrastructure as Code with Terraform</a></p><p>Advantages of Infrastructure as Code</p><ul><li>Easily Repeatable</li><li>Easily Readable</li><li>Operational certainty with “terraform plan”</li><li>Standardized environment builds</li><li>Quickly provisioned development environments</li><li>Disaster Recovery</li></ul><p>关于 Terraform 开源版你需要知道的缺点，官方的介绍视频主要通过引入 Terraform Enterprise 企业版来解决以下问题</p><ol><li>状态管理非常原始</li><li>缺乏状态可视化</li></ol><p><a href="https://www.bilibili.com/video/BV1vK411J71d" target="_blank" rel="noopener">追赶 terraform，让基础设施代码化更加容易，pulumi 都做了些什么？</a></p><h2 id="Terraform-安装"><a href="#Terraform-安装" class="headerlink" title="Terraform 安装"></a>Terraform 安装</h2><blockquote><p>Terraform 的安装和基础命令并不复杂，需要重点学习和熟悉的是各个云厂商开放的 API 语法</p></blockquote><p>安装 Terraform，找到与你系统 <a href="https://www.terraform.io/downloads.html" target="_blank" rel="noopener">匹配的软件包</a> 然后下载。Terraform 被打包为一个 zip 归档文件。</p><p>下载完 zip 文件以后，解压这个包。Terraform 是一个名为 terraform 的独立文件。包里其他所有的文件都可以安全删掉，Terraform 依然可以正常工作。</p><p>最后一步确保 terraform 二进制文件在 PATH 上可用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># copy binary file to path</span></span><br><span class="line">mv ~/Downloads/terraform /usr/<span class="built_in">local</span>/bin/</span><br><span class="line"></span><br><span class="line"><span class="comment"># macOS can use Homebrew to install terraform</span></span><br><span class="line">brew install hashicorp/tap/terraform</span><br><span class="line"></span><br><span class="line"><span class="comment"># terraform</span></span><br><span class="line">Usage: terraform [-version] [-<span class="built_in">help</span>] &lt;<span class="built_in">command</span>&gt; [args]</span><br><span class="line"></span><br><span class="line">The available commands <span class="keyword">for</span> execution are listed below.</span><br><span class="line">The most common, useful commands are shown first, followed by</span><br><span class="line">less common or more advanced commands. If you<span class="string">'re just getting</span></span><br><span class="line"><span class="string">started with Terraform, stick with the common commands. For the</span></span><br><span class="line"><span class="string">other commands, please read the help and docs before usage.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Common commands:</span></span><br><span class="line"><span class="string">    apply              Builds or changes infrastructure</span></span><br><span class="line"><span class="string">    console            Interactive console for Terraform interpolations</span></span><br><span class="line"><span class="string">    destroy            Destroy Terraform-managed infrastructure</span></span><br><span class="line"><span class="string">    env                Workspace management</span></span><br><span class="line"><span class="string">    fmt                Rewrites config files to canonical format</span></span><br><span class="line"><span class="string">    get                Download and install modules for the configuration</span></span><br><span class="line"><span class="string">    graph              Create a visual graph of Terraform resources</span></span><br><span class="line"><span class="string">    import             Import existing infrastructure into Terraform</span></span><br><span class="line"><span class="string">    init               Initialize a Terraform working directory</span></span><br><span class="line"><span class="string">    login              Obtain and save credentials for a remote host</span></span><br><span class="line"><span class="string">    logout             Remove locally-stored credentials for a remote host</span></span><br><span class="line"><span class="string">    output             Read an output from a state file</span></span><br><span class="line"><span class="string">    plan               Generate and show an execution plan</span></span><br><span class="line"><span class="string">    providers          Prints a tree of the providers used in the configuration</span></span><br><span class="line"><span class="string">    refresh            Update local state file against real resources</span></span><br><span class="line"><span class="string">    show               Inspect Terraform state or plan</span></span><br><span class="line"><span class="string">    taint              Manually mark a resource for recreation</span></span><br><span class="line"><span class="string">    untaint            Manually unmark a resource as tainted</span></span><br><span class="line"><span class="string">    validate           Validates the Terraform files</span></span><br><span class="line"><span class="string">    version            Prints the Terraform version</span></span><br><span class="line"><span class="string">    workspace          Workspace management</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">All other commands:</span></span><br><span class="line"><span class="string">    0.12upgrade        Rewrites pre-0.12 module source code for v0.12</span></span><br><span class="line"><span class="string">    0.13upgrade        Rewrites pre-0.13 module source code for v0.13</span></span><br><span class="line"><span class="string">    debug              Debug output management (experimental)</span></span><br><span class="line"><span class="string">    force-unlock       Manually unlock the terraform state</span></span><br><span class="line"><span class="string">    push               Obsolete command for Terraform Enterprise legacy (v1)</span></span><br><span class="line"><span class="string">    state              Advanced state management</span></span><br></pre></td></tr></table></figure><p>可以在云上创建 Terraform 的账户，并创建 AccessKey，通过环境变量存放认证信息</p><p>terrafrom 常用命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">terraform init   <span class="comment"># 初始化工作目录，也是我们第一个要执行的命令</span></span><br><span class="line">terraform plan   <span class="comment"># 生成计划</span></span><br><span class="line">terraform appy   <span class="comment"># 提交请求</span></span><br><span class="line">terraform state  <span class="comment"># 查看资源状态</span></span><br><span class="line">terraform graph  <span class="comment"># 生成执行计划图</span></span><br></pre></td></tr></table></figure><p><a href="https://learn.hashicorp.com/tutorials/terraform/install-cli" target="_blank" rel="noopener">Install Terraform</a></p><h2 id="Terraform-in-60-Seconds"><a href="#Terraform-in-60-Seconds" class="headerlink" title="Terraform in 60 Seconds"></a>Terraform in 60 Seconds</h2><p>A Terraform configuration is a series of code blocks that define your intended infrastructure. You’ll run the <code>terraform</code> command against this file to create an Nginx webserver and view the default Nginx web page.</p><h3 id="View-code"><a href="#View-code" class="headerlink" title="View code"></a>View code</h3><p>First, open the <code>main.tf</code> file in the text editor by clicking this link.</p><p><code>main.tf</code></p><p>You don’t have to edit or even understand the code. It defines two resources: a Docker disk image that packages the Nginx webserver, and a Docker container that gives it a name and runs it on port 80.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># pwd</span><br><span class="line">/root/terraform-docker-demo</span><br><span class="line"></span><br><span class="line"># vim main.tf</span><br><span class="line">terraform &#123;</span><br><span class="line">  required_providers &#123;</span><br><span class="line">    docker = &#123;</span><br><span class="line">      source = &quot;terraform-providers/docker&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  required_version = &quot;&gt;= 0.13&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource &quot;docker_image&quot; &quot;nginx&quot; &#123;</span><br><span class="line">  name = &quot;nginx:latest&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource &quot;docker_container&quot; &quot;nginx&quot; &#123;</span><br><span class="line">  image = docker_image.nginx.latest</span><br><span class="line">  name  = &quot;tutorial&quot;</span><br><span class="line">  ports &#123;</span><br><span class="line">    internal = 80</span><br><span class="line">    external = 80</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h3><p>All Terraform workflows start with the <code>init</code> command. Terraform searches the configuration for both direct and indirect references to providers (such as Docker). Terraform then attempts to load the required plugins.</p><p><code>terraform init</code></p><h3 id="Apply"><a href="#Apply" class="headerlink" title="Apply"></a>Apply</h3><p>Now provision the webserver by running <code>apply</code>.</p><p><code>terraform apply</code></p><p>You will be asked to confirm. Type <code>yes</code> and press <code>ENTER</code>. It may take up to 30 seconds. A message will display confirmation that it succeeded.</p><h3 id="Verify"><a href="#Verify" class="headerlink" title="Verify"></a>Verify</h3><p>Visit this URL to view the default Nginx web page which is now live:</p><ul><li><a href="https://2886795306-80-shadow03.environments.katacoda.com/" target="_blank" rel="noopener">Nginx index page</a></li></ul><p>Alternatively, you can examine Docker’s process list. You will see the <code>tutorial</code> container which is running Nginx.</p><p><code>docker ps</code></p><h3 id="Destroy"><a href="#Destroy" class="headerlink" title="Destroy"></a>Destroy</h3><p>To remove the Nginx webserver as defined in <code>main.tf</code>, run the destroy command.</p><p><code>terraform destroy</code></p><p>You will be prompted to confirm. Type <code>yes</code> and press <code>ENTER</code>.</p><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>You have now created and destroyed your first Terraform resources! Terraform supports hundreds of ecosystem providers, from major cloud resources to content delivery networks and more.</p><p>Continue learning at <a href="https://learn.hashicorp.com/terraform" target="_blank" rel="noopener">HashiCorp Learn</a> and the <a href="https://www.terraform.io/" target="_blank" rel="noopener">Terraform API documentation</a> or discuss with others on the <a href="https://discuss.hashicorp.com/c/terraform-core/27" target="_blank" rel="noopener">Terraform forum</a>.</p><h2 id="Terraform-学习路径"><a href="#Terraform-学习路径" class="headerlink" title="Terraform 学习路径"></a>Terraform 学习路径</h2><blockquote><p>之前也提到了 Terraform 学起来很快，但更重要的是熟悉不同 Providers 之前的调用差异</p></blockquote><p><a href="https://learn.hashicorp.com/terraform/" target="_blank" rel="noopener">Learn Terraform</a> - New users can start here. Interactive guides to teach you how to use Terraform’s features. Begin with the <a href="https://learn.hashicorp.com/terraform/getting-started/install" target="_blank" rel="noopener">Getting Started guide</a>, then continue with task-specific advanced guides or go directly to the <a href="https://www.terraform.io/docs/cli-index.html" target="_blank" rel="noopener">Terraform CLI docs</a>.</p><p><a href="https://www.terraform.io/docs/providers/index.html" target="_blank" rel="noopener">Providers</a><br>Terraform is used to create, manage, and update infrastructure resources such as physical machines, VMs, network switches, containers, and more. Almost any infrastructure type can be represented as a resource in Terraform.</p><p>A provider is responsible for understanding API interactions and exposing resources. Most providers configure a specific infrastructure platform (either cloud or self-hosted). Providers can also offer local utilities for tasks like generating random numbers for unique resource names.</p><p><a href="https://www.terraform.io/docs/providers/aws/index.html" target="_blank" rel="noopener">AWS</a></p><p><a href="https://www.terraform.io/docs/providers/azurerm/index.html" target="_blank" rel="noopener">Azure</a></p><p><a href="https://www.terraform.io/docs/providers/google/index.html" target="_blank" rel="noopener">Google Cloud Platform</a></p><p><a href="https://www.terraform.io/docs/providers/alicloud/index.html" target="_blank" rel="noopener">Alibaba Cloud</a></p><p><a href="https://www.terraform.io/docs/providers/tencentcloud/index.html" target="_blank" rel="noopener">TencentCloud</a></p><h2 id="Terraform-关键概念"><a href="#Terraform-关键概念" class="headerlink" title="Terraform 关键概念"></a>Terraform 关键概念</h2><p>Terraform 管理的是云资源</p><p>基础设施和服务统称为资源，如私有网络、子网、物理机、虚拟机、镜像、专线、NAT 网关等等都可以称之为资源，也是开发和运维人员经常要打交道要维护的东西。</p><p>资源分为两种 resource 和 data</p><p><strong>resource</strong><br>这类资源一般是抽象的真正的云服务资源，支持增删改，如私有网络、NAT 网关、虚拟机实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">resource &quot; 资源类名 & quot; &quot; 映射到本地的唯一资源名 & quot; &#123;</span><br><span class="line">  参数 = 值</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>data</strong><br>这类资源一般是固定的一些可读资源，如可用区列表、镜像列表。大部分情况下，resource 资源也会封装一个 data source 方法，用于资源查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data &quot; 资源类名 & quot; &quot; 映射到本地的唯一资源名 & quot; &#123;</span><br><span class="line">  参数 = 值</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在使用 Terraform 的过程中，通常接触到很多名词，如 configuration，provider，resource，datasource，state，backend，provisioner 等，本文将一一跟大家介绍这些概念。</p><h3 id="Configuration：基础设施的定义和描述"><a href="#Configuration：基础设施的定义和描述" class="headerlink" title="Configuration：基础设施的定义和描述"></a>Configuration：基础设施的定义和描述</h3><p>“基础设施即代码（Infrastructure as Code）”，这里的 Code 就是对基础设施资源的代码定义和描述，也就是通过代码表达我们想要管理的资源。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># VPC 资源</span><br><span class="line">resource &quot;alicloud_vpc&quot; &quot;vpc&quot; &#123;</span><br><span class="line">        name          = &quot;tf_vpc&quot;</span><br><span class="line">        cidr_block  = &quot;172.16.0.0/16&quot;</span><br><span class="line">&#125;</span><br><span class="line"># VSwitch 资源</span><br><span class="line">resource &quot;alicloud_vswitch&quot; &quot;vswitch&quot; &#123;</span><br><span class="line">        vpc_id            = alicloud_vpc.vpc.id</span><br><span class="line">        cidr_block        = &quot;172.16.1.0/24&quot;</span><br><span class="line">        availability_zone = &quot;cn-beijing-a&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对所有资源的代码描述都需要定义在一个以 <code>tf</code> 结尾的文件用于 Terraform 加载和解析，这个文件我们称之为 “Terraform 模板” 或者“Configuration”。</p><h3 id="Provider：基础设施管理组件"><a href="#Provider：基础设施管理组件" class="headerlink" title="Provider：基础设施管理组件"></a>Provider：基础设施管理组件</h3><p>Terraform 通常用于对云上基础设施，如虚拟机，网络资源，容器资源，存储资源等的创建，更新，查看，删除等管理动作，也可以实现对物理机的管理，如安装软件，部署应用等。</p><p><a href="https://www.terraform.io/docs/providers/index.html" target="_blank" rel="noopener">【Provider】</a> 是一个与 Open API 直接交互的后端驱动，Terraform 就是通过 Provider 来完成对基础设施资源的管理的。不同的基础设施提供商都需要提供一个 Provider 来实现对自家基础设施的统一管理。目前 Terraform 目前支持超过 160 多种的 providers，大多数云平台的 Provider 插件均已经实现了，阿里云对应的 Provider 为 <code>alicloud</code> 。</p><p>在操作环境中，Terraform 和 Provider 是两个独立存在的 package，当运行 Terraform 时，Terraform 会根据用户模板中指定的 provider 或者 resource／datasource 的标志自动的下载模板所用到的所有 provider，并将其放在执行目录下的一个隐藏目录 <code>.terraform</code> 下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">provider &quot;alicloud&quot; &#123;</span><br><span class="line">  version              = &quot;&gt;=1.56.0&quot;</span><br><span class="line">  region               = &quot;cn-hangzhou&quot;</span><br><span class="line">  configuration_source = &quot;terraform-alicloud-modules/classic-load-balance&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模板中显示指定了一个阿里云的 Provider，并显示设置了 provider 的版本为 <code>1.56.0+</code> （默认下载最新的版本），指定了需要管理资源的 region，指定了当前这个模板的标识。<br>通常 Provider 都包含两个主要元素 resource 和 data source。</p><h3 id="Resource：基础设施资源和服务的管理"><a href="#Resource：基础设施资源和服务的管理" class="headerlink" title="Resource：基础设施资源和服务的管理"></a>Resource：基础设施资源和服务的管理</h3><p>在 Terraform 中，一个具体的资源或者服务称之为一个 resource，比如一台 ECS 实例，一个 VPC 网络，一个 SLB 实例。每个特定的 resource 包含了若干可用于描述对应资源或者服务的属性字段，通过这些字段来定义一个完整的资源或者服务，比如实例的名称（name），实例的规格（instance_type），VPC 或者 VSwitch 的网段（cidr_block）等。<br>定义一个 Resource 的语法非常简单，通过 <code>resource</code> 关键字声明，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 定义一个 ECS 实例</span><br><span class="line">resource &quot;alicloud_instance&quot; &quot;default&quot; &#123;</span><br><span class="line">  image_id        = &quot;ubuntu_16_04_64_20G_alibase_20190620.vhd&quot;</span><br><span class="line">  instance_type   = &quot;ecs.sn1ne.large&quot;</span><br><span class="line">  instance_name   = &quot;my-first-vm&quot;</span><br><span class="line">  system_disk_category = &quot;cloud_ssd&quot;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>其中 <code>alicloud_instance</code> 为 <strong> 资源类型（Resource Type)</strong>，定义这个资源的类型，告诉 Terraform 这个 Resource 是阿里云的 ECS 实例还是阿里云的 VPC。</li><li><code>default</code> 为 <strong> 资源名称(Resource Name)</strong>，资源名称在同一个模块中必须唯一，主要用于供其他资源引用该资源。</li><li>大括号里面的 block 块为 <strong> 配置参数(Configuration Arguments)</strong>，定义资源的属性，比如 ECS 实例的规格、镜像、名称等。</li></ul><p>显然这个 Terraform 模板的功能为在阿里云上创建一个 ECS 实例，镜像 ID 为 <code>ubuntu_16_04_64_20G_alibase_20190620.vhd</code> ，规格为 <code>ecs.sn1ne.large</code> ，自定义了实例名称和系统盘的类型。</p><p>除此之外，在 Terraform 中，一个资源与另一个资源的关系也定义为一个资源，如一块云盘与一台 ECS 实例的挂载，一个弹性 IP（EIP）与一台 ECS 或者 SLB 实例的绑定关系。这样定义的好处是，一方面资源架构非常清晰，另一方面，当模板中有若干个 EIP 需要与若干台 ECS 实例绑定时，只需要通过 Terraform 的 <code>count</code> 功能就可以在无需编写大量重复代码的前提下实现绑定功能。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">resource &quot;alicloud_instance&quot; &quot;default&quot; &#123;</span><br><span class="line">  count = 5</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line">resource &quot;alicloud_eip&quot; &quot;default&quot; &#123;</span><br><span class="line">    count = 5</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line">resource &quot;alicloud_eip_association&quot; &quot;default&quot; &#123;</span><br><span class="line">  count = 5</span><br><span class="line">  instance_id = alicloud_instance.default[count.index].id</span><br><span class="line">  allocation_id = alicloud_eip.default[count.index].id</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然这个 Terraform 模板的功能为在阿里云上创建 5 个 ECS 实例和 5 个弹性 IP，并将它们一一绑定。</p><h3 id="Data-Source：基础设施资源和服务的查询"><a href="#Data-Source：基础设施资源和服务的查询" class="headerlink" title="Data Source：基础设施资源和服务的查询"></a>Data Source：基础设施资源和服务的查询</h3><p>对资源的查询是运维人员或者系统最常使用的操作，比如，查看某个 region 下有哪些可用区，某个可用区下有哪些实例规格，每个 region 下有哪些镜像，当前账号下有多少机器等，通过对资源及其资源属性的查询可以帮助和引导开发者进行下一步的操作。</p><p>除此之外，在编写 Terraform 模板时，Resource 使用的参数有些是固定的静态变量，但有些情况下可能参数变量不确定或者参数可能随时变化。比如我们创建 ECS 实例时，通常需要指定我们自己的镜像 ID 和实例规格，但我们的模板可能随时更新，如果在代码中指定 ImageID 和 Instance，则一旦我们更新镜像模板就需要重新修改代码。<br>在 Terraform 中，Data Source 提供的就是一个查询资源的功能，每个 data source 实现对一个资源的动态查询，Data Souce 的结果可以认为是动态变量，只有在运行时才能知道变量的值。</p><p>Data Sources 通过 <code>data</code> 关键字声明，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// Images data source for image_id</span><br><span class="line">data &quot;alicloud_images&quot; &quot;default&quot; &#123;</span><br><span class="line">  most_recent = true</span><br><span class="line">  owners      = &quot;system&quot;</span><br><span class="line">  name_regex  = &quot;^ubuntu_18.*_64&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data &quot;alicloud_zones&quot; &quot;default&quot; &#123;</span><br><span class="line">  available_resource_creation = &quot;VSwitch&quot;</span><br><span class="line">  enable_details              = true</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Instance_types data source for instance_type</span><br><span class="line">data &quot;alicloud_instance_types&quot; &quot;default&quot; &#123;</span><br><span class="line">  availability_zone = data.alicloud_zones.default.zones.0.id</span><br><span class="line">  cpu_core_count    = 2</span><br><span class="line">  memory_size       = 4</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource &quot;alicloud_instance&quot; &quot;web&quot; &#123;</span><br><span class="line">  image_id        = data.alicloud_images.default.images[0].id</span><br><span class="line">  instance_type   = data.alicloud_instance_types.default.instance_types[0].id</span><br><span class="line">  instance_name   = &quot;my-first-vm&quot;</span><br><span class="line">  system_disk_category = &quot;cloud_ssd&quot;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上例子中的 ECS Instance 没有指定镜像 ImageID 和实例规格，而是通过 <code>data</code> 引用，Terraform 运行时将首先根据镜像名称前缀选择系统镜像，如果同时有多个镜像满足条件，则选择最新的镜像。实例规格也是类似，在某个可用区下选择 2 核 4G 的实例规格进行返回。</p><h3 id="State：保存资源关系及其属性文件的数据库"><a href="#State：保存资源关系及其属性文件的数据库" class="headerlink" title="State：保存资源关系及其属性文件的数据库"></a>State：保存资源关系及其属性文件的数据库</h3><p>Terraform 创建和管理的所有资源都会保存到自己的数据库上，这个数据库不是通常意义上的数据库（MySQL，Redis 等），而是一个文件名为 <code>terraform.tfstate</code> 的文件，在 Terraform 中称之为 <a href="https://www.terraform.io/docs/state/index.html" target="_blank" rel="noopener"><code>state</code></a><a href="https://www.terraform.io/docs/state/index.html" target="_blank" rel="noopener"> </a>，默认存放在执行 Terraform 命令的本地目录下。这个 <code>state</code> 文件非常重要，如果该文件损坏，Terraform 将认为已创建的资源被破坏或者需要重建（实际的云资源通常不会受到影响），因为在执行 Terraform 命令是，Terraform 将会利用该文件与当前目录下的模板做 Diff 比较，如果出现不一致，Terraform 将按照模板中的定义重新创建或者修改已有资源，直到没有 Diff，因此可以认为 Terraform 是一个有状态服务。</p><p>当涉及多人协作时不仅需要拷贝模板，还需要拷贝 <code>state</code> 文件，这无形中增加了维护成本。幸运的是，目前 Terraform 支持把  <code>state</code> 文件放到远端的存储服务 <code>OSS</code> 上或者 <code>consul</code> 上，来实现 <code>state</code> 文件和模板代码的分离。具体细节可参考 <a href="https://www.terraform.io/docs/state/remote.html" target="_blank" rel="noopener">官方文档 Remote State</a> 或者关注后续文章的详细介绍。</p><h3 id="Backend：存放-State-文件的载体"><a href="#Backend：存放-State-文件的载体" class="headerlink" title="Backend：存放 State 文件的载体"></a>Backend：存放 State 文件的载体</h3><p>正如上节提到，Terraform 在创建完资源后，会将资源的属性存放在一个 <code>state</code> 文件中，这个文件可以存放在本地也可以存放在远端。存放 <code>state</code> 文件的载体就是 <a href="https://www.terraform.io/docs/backends/index.html" target="_blank" rel="noopener"><code>Backend</code></a> 。<br> <code>Backend</code> 分为本地（local）和远端（remote）两类，默认为本地。远端的类型也非常多，目前官方网站提供的有 13 种，并且阿里云的 <a href="https://www.terraform.io/docs/backends/types/oss.html" target="_blank" rel="noopener">OSS</a>就位列其中。</p><p>使用远端的 Backend，既可以降低多人协作时对 state 的维护成本，而且可以将一些敏感的数据存放在远端，保证了数据的安全性。</p><h3 id="Provisioner：在机器上执行操作的组件"><a href="#Provisioner：在机器上执行操作的组件" class="headerlink" title="Provisioner：在机器上执行操作的组件"></a>Provisioner：在机器上执行操作的组件</h3><p><a href="https://www.terraform.io/docs/provisioners/index.html" target="_blank" rel="noopener">Provisioner</a> 通常用来在本地机器或者登陆远程主机执行相关的操作，如 <code>local-exec</code> provisioner 用来执行本地的命令， <code>chef</code> provisioner  用来在远程机器安装，配置和执行 chef client， <code>remote-exec</code> provisioner 用来登录远程主机并在其上执行命令。</p><p>Provisioner 通常跟 Provider 一起配合使用，provider 用来创建和管理资源，provisioner 在创建好的机器上执行各种操作。</p><h2 id="Terraform-常用命令详解"><a href="#Terraform-常用命令详解" class="headerlink" title="Terraform 常用命令详解"></a>Terraform 常用命令详解</h2><p>Terraform 对资源的管理主要是对资源生命周期的管理，即通过命令实现对 Terraform 模板中所定义资源的创建，修改，查看和删除。</p><p>CURD 定义了用于处理数据的基本原子操作，它代表创建（Create），更新（Update），读取（Retrieve）和删除（Delete）操作。</p><p>CRUD 是指在做计算处理时的增加 (Create)、读取查询(Retrieve)、更新(Update) 和删除 (Delete) 几个单词的首字母简写。主要被用在描述软件系统中 DataBase 或者持久层的基本操作功能。</p><p>CRUD 通常说的就是数据库增查改删(增删改查)<br>C：Create 增加对应 CREATE TBL …; ADD TBL IN (…) VALUES (…)<br>R：Retrieve 查询 SELECT * from TBL<br>U：Update 修改 UPDATE TBL ..SET …<br>D：Delete 删除 DELETE FROM TBL WHERE ….</p><p>Terraform 的使用主要有三个非常基本的命令：</p><ul><li>terraform plan，实现对于模板所定义资源的预览功能，在真正生产资源之前可以实时地去查看当前模板所要生产哪些资源。</li><li>terraform apply，这就是真正地生产资源的过程，执行这个命令就可以解析模板进而调用相应的 API 去实现对于资源的真实生产，资源后续的更新也会通过这个命令进行。</li><li>terraform destroy，就是当需要去释放资源的时候，可以执行这个命令，从而达到对于模板所定义资源的全部释放销毁。</li></ul><h3 id="Terraform-资源管理常用命令"><a href="#Terraform-资源管理常用命令" class="headerlink" title="Terraform 资源管理常用命令"></a>Terraform 资源管理常用命令</h3><blockquote><p>terraform plan：资源的预览</p></blockquote><p><code>plan</code> 命令用于对模板中所定义资源的预览，主要用于以下几个场景：</p><ul><li>预览当前模板中定义的资源是否符合管理预期，和 Markdown 的预览功能类似</li><li>如果当前模板已经存在对应的 state 文件，那么 <code>plan</code> 命令将会展示模板定义与 state 文件内容的 diff 结果，如果有变更，将会展示结果并在下方显示出来</li><li>对 DataSource 而言，执行 <code>plan</code> 命令，即可直接获取并输出所要查询的资源及其属性</li></ul><blockquote><p>terraform apply：资源的新建和变更</p></blockquote><p><code>apply</code> 命令用于实际资源的新建和变更操作，为了安全起见，在命令运行过程中增加了人工交互的过程，即需要手动确认是否继续，当然也可以通过 <code>--auto-approve</code> 参数来跳过人工确认的过程。<br><code>apply</code> 命令适用于以下几种场景：</p><ul><li>创建新的资源</li><li>通过修改模板参数来修改资源的属性</li><li>如果从当前模板中删除某个资源的定义， <code>apply</code> 命令会将该资源彻底删除。可以理解为“资源的移除也是一种变更”</li></ul><blockquote><p>terraform show：资源的展示</p></blockquote><p><code>show</code> 命令用于展示当前 state 中所有被管理的资源及其所有属性值。</p><blockquote><p>terraform destroy：资源的释放</p></blockquote><p><code>destroy</code> 命令用于对资源的释放操作，为了安全起见，在命令执行过程中，也增加了人工交互的过程，如果想要跳过手动确认操作，可以通过 <code>--force</code> 参数来跳过。<br><code>terraform destroy</code> 默认会释放当前模板中定义的所有资源，如果只想释放其中某个特定的资源，可以通过参数 <code>-target=&lt;资源类型&gt;.&lt;资源名称&gt;</code>  来指定。</p><blockquote><p>terraform import：资源的导入</p></blockquote><p><code>import</code> 命令用于将存量的云资源导入到 terraform state 中，进而加入到 Terraform 的管理体系中，适用的场景包含但不限于以下几种：</p><ul><li>从来没有使用 Terraform 管控过任何资源，当前所有的存量云资源都是通过控制台，阿里云 CLI，ROS 或者直接调用 API 创建和管理的，现在想要切换为 Terraform 管理</li><li>在不影响资源正常使用的前提下，重构资源模板中的资源定义</li><li>阿里云的 Provider 进行了兼容性升级，新版 Provider 对原有模板中所定义的资源支持了更多的参数，需要把最新的参数同步进来</li></ul><blockquote><p>terraform taint: 标记资源为“被污染”</p></blockquote><p><code>taint</code> 命令用于把某个资源标记为 “被污染” 状态，当再次执行 <code>apply</code> 命令时，这个被污染的资源将会被先释放，然后再创建一个新的，相当于对这个特定资源做了先删除后新建的操作。<br>命令的详细格式为： <code>terraform taint &lt;资源类型&gt;.&lt;资源名称&gt;</code> ，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ terraform taint alicloud_vswitch.this</span><br><span class="line">Resource instance alicloud_vswitch.this has been marked as tainted.</span><br></pre></td></tr></table></figure><blockquote><p>terraform untaint：取消 “被污染” 标记</p></blockquote><p><code>untaint</code> 命令是 <code>taint</code> 的逆向操作，用于取消 “被污染” 标记，使其恢复到正常的状态。命令的详细格式和 <code>taint</code> 类似为： <code>terraform untaint &lt;资源类型&gt;.&lt;资源名称&gt;</code> ，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ terraform untaint alicloud_vswitch.this</span><br><span class="line">Resource instance alicloud_vswitch.this has been successfully untainted.</span><br></pre></td></tr></table></figure><blockquote><p>terraform output：打印出参及其值</p></blockquote><p>如果在模板中显示定义了 <code>output</code> 参数，那么这个 output 的值将在 <code>apply</code> 命令之后展示，但 <code>plan</code> 命令并不会展示，如果想随时随地快速查看 output 的值，可以直接运行命令 <code>terraform output</code> :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ terraform output</span><br><span class="line">vswitchId = vsw-gw8gl31wz********</span><br></pre></td></tr></table></figure><h3 id="Terraform-状态管理常用命令"><a href="#Terraform-状态管理常用命令" class="headerlink" title="Terraform 状态管理常用命令"></a>Terraform 状态管理常用命令</h3><p>Terraform 对资源状态的管理，实际上是对 State 文件中数据的管理。State 文件保存了当前 Terraform 管理的所有资源及其属性，内容都是由 Terraform 自动存储的，为了保证数据的完整性，不建议手动修改 State 内容。</p><p>对 State 数据的操作可以通过 <code>terraform state</code> 命令来完成。</p><blockquote><p>terraform state list：列出当前 state 中的所有资源</p></blockquote><p><code>state list</code> 按照 <code>&lt;资源类型&gt;.&lt;资源名称&gt;</code> 的格式列出当前 state 中存在的所有资源（包括 datasource），如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ terraform state list</span><br><span class="line">data.alicloud_slbs.default</span><br><span class="line">alicloud_vpc.default</span><br><span class="line">alicloud_vswitch.this</span><br></pre></td></tr></table></figure><blockquote><p>terraform state show：展示某一个资源的属性</p></blockquote><p><code>state show</code> 命令按照 Key-Value 的格式展示出特定资源的所有属性及其值，命令的完整格式为 <code>terraform state show &lt;资源类型&gt;.&lt;资源名称&gt;</code> ，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ terraform state show alicloud_vswitch.this</span><br><span class="line"># alicloud_vswitch.this:</span><br><span class="line">resource &quot;alicloud_vswitch&quot; &quot;this&quot; &#123;</span><br><span class="line">    availability_zone = &quot;eu-central-1a&quot;</span><br><span class="line">    cidr_block        = &quot;172.16.0.0/24&quot;</span><br><span class="line">    id                = &quot;vsw-gw8gl31wz******&quot;</span><br><span class="line">    vpc_id            = &quot;vpc-gw8calnzt*******&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>terraform state pull：获取当前 state 内容并展示</p></blockquote><p> <code>state pull</code> 命令用于原样展示当前 state 文件数据，类似与 Shell 下的 cat 命令，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$ terraform state pull</span><br><span class="line">&#123;</span><br><span class="line">  &quot;version&quot;: 4,</span><br><span class="line">  &quot;terraform_version&quot;: &quot;0.12.8&quot;,</span><br><span class="line">  &quot;serial&quot;: 615,</span><br><span class="line">  &quot;lineage&quot;: &quot;39aeeee2-b3bd-8130-c897-2cb8595cf8ec&quot;,</span><br><span class="line">  &quot;outputs&quot;: &#123;</span><br><span class="line">    ***</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;resources&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;mode&quot;: &quot;data&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;alicloud_slbs&quot;,</span><br><span class="line">      &quot;name&quot;: &quot;default&quot;,</span><br><span class="line">      &quot;provider&quot;: &quot;provider.alicloud&quot;,</span><br><span class="line">      ***</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;mode&quot;: &quot;managed&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;alicloud_vpc&quot;,</span><br><span class="line">      &quot;name&quot;: &quot;default&quot;,</span><br><span class="line">      &quot;provider&quot;: &quot;provider.alicloud&quot;,</span><br><span class="line">      ***</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>terraform state rm：移除特定的资源</p></blockquote><p><code>state rm</code> 命令用于将 state 中的某个资源移除，但是实际上并不会真正删除这个资源，命令格式为： <code>terraform state rm &lt;资源类型&gt;.&lt;资源名称&gt;</code> ，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> terraform state rm alicloud_vswitch.this</span><br><span class="line">Removed alicloud_vswitch.this</span><br><span class="line">Successfully removed 1 resource instance(s).</span><br></pre></td></tr></table></figure><p>移除后，如果模板内容不变并且再次执行 <code>apply</code> 命令，将会新增一个同样的资源。移除后的资源可以再次通过 <code>import</code> 命令再次加入。</p><blockquote><p>terraform state mv：变更特定资源的存放地址</p></blockquote><p>如果想调整某个资源所在的 state 文件，可以通过 <code>state mv</code> 命令来完成，类似于 Shell 下的 mv 命令，这个命令的使用有多种选项，可以通过命令 <code>terraform state mv --help</code> 来详细了解。本文只介绍最常用的一种： <code>terraform state mv --state=./terraform.tfstate --state-out=&lt;target path&gt;/terraform-target.tfstate &lt;资源类型&gt;.&lt;资源名称 A&gt; &lt;资源类型&gt;.&lt;资源名称 B&gt;</code> ，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ terraform state mv -state-out=../tf.tfstate alicloud_vswitch.this alicloud_vswitch.default</span><br><span class="line">Move &quot;alicloud_vswitch.this&quot; to &quot;alicloud_vswitch.default&quot;</span><br><span class="line">Successfully moved 1 object(s).</span><br></pre></td></tr></table></figure><p>如上命令省略了默认的 <code>--state=./terraform.tfstate</code> 选项，命令最终的结果是将当前 State 中的 VSwitch 资源移动到了上层目录下名为 <code>tf.tfstate</code> 的 State 中，并且将 VSwitch 的资源名称由 “this” 改为了 “default”。</p><blockquote><p>terraform refresh：刷新当前 state</p></blockquote><p><code>refresh</code> 命令可以用来刷新当前 State 的内容，即再次调用 API 并拉取最新的数据写入到 state 文件中。</p><h3 id="Terraform-其他常用命令"><a href="#Terraform-其他常用命令" class="headerlink" title="Terraform 其他常用命令"></a>Terraform 其他常用命令</h3><p>除了资源和 state 的管理命令外，还有一些常用的应用在模板，provider 等多种场景下的命令。</p><blockquote><p>terraform init：初始化加载模块</p></blockquote><p><code>init</code> 用来初始化加载所需的模块，包括 Provider，Provisioner，Module 等。</p><blockquote><p>terraform graph：输出当前模板定义的资源关系图</p></blockquote><p>每个模板定义的资源之间都存在不同程度的关系，如果想看资源关系大图，可以使用命令 <code>terraform graph</code> :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ terraform graph</span><br><span class="line">digraph &#123;</span><br><span class="line">        compound = &quot;true&quot;</span><br><span class="line">        newrank = &quot;true&quot;</span><br><span class="line">        subgraph &quot;root&quot; &#123;</span><br><span class="line">                &quot;[root] alicloud_vpc.default&quot; [label = &quot;alicloud_vpc.default&quot;, shape = &quot;box&quot;]</span><br><span class="line">                &quot;[root] alicloud_vswitch.this&quot; [label = &quot;alicloud_vswitch.this&quot;, shape = &quot;box&quot;]</span><br><span class="line">                ******</span><br><span class="line">                &quot;[root] output.vswitchId&quot; -&gt; &quot;[root] alicloud_vswitch.this&quot;</span><br><span class="line">                &quot;[root] provider.alicloud (close)&quot; -&gt; &quot;[root] alicloud_vswitch.this&quot;</span><br><span class="line">                                ******</span><br><span class="line">                &quot;[root] root&quot; -&gt; &quot;[root] provider.alicloud (close)&quot;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该命令的结果还可以通过命令 <code>terraform graph | dot -Tsvg &gt; graph.svg</code> 直接导出为一张图片（需要提前安装 graphviz： <code>brew install graphviz</code> ）</p><blockquote><p>terraform validate：验证模板语法是否正确</p></blockquote><p>Terraform 模板的编写需要遵循其自身定义的一套简单的语法规范，编写完成后，如果想要检查模板是否存在语法错误或者在运行 <code>plan</code> 和 <code>apply</code> 命令的时候报语法错误，可以通过执行命令 <code>terraform validate</code> 来检查和定位错误出现的详细位置和原因。</p><h2 id="Terraform-实例解析"><a href="#Terraform-实例解析" class="headerlink" title="Terraform 实例解析"></a>Terraform 实例解析</h2><p>Hashicorp 为 Terraform 设计了一套语言 HCL（Hashicorp Configuration Language）来描述基础设施资源的状态。比如我们要在 AWS 上创建一台运行 OpenResty 的 EC2，可以这么写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">provider &quot;aws&quot; &#123;</span><br><span class="line">  region = &quot;us-west-2&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data &quot;aws_ami&quot; &quot;openresty&quot; &#123;</span><br><span class="line">  most_recent = true</span><br><span class="line"></span><br><span class="line">  filter &#123;</span><br><span class="line">    name   = &quot;name&quot;</span><br><span class="line">    values = [&quot;openresty-*&quot;]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  filter &#123;</span><br><span class="line">    name   = &quot;virtualization-type&quot;</span><br><span class="line">    values = [&quot;hvm&quot;]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  owners = [&quot;xxxx&quot;] # aws ID</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource &quot;aws_security_group&quot; &quot;lb_sg&quot; &#123;</span><br><span class="line">  name        = &quot;lb_sg&quot;</span><br><span class="line">  description = &quot;allow http/https access&quot;</span><br><span class="line">  vpc_id      = &quot;$&#123;aws_vpc.main.id&#125;&quot;</span><br><span class="line"></span><br><span class="line">  ingress &#123;</span><br><span class="line">    from_port   = 443</span><br><span class="line">    to_port     = 443</span><br><span class="line">    protocol    = &quot;tcp&quot;</span><br><span class="line">    cidr_blocks = [&quot;0.0.0.0/0&quot;]</span><br><span class="line">  &#125;</span><br><span class="line">  ingress &#123;</span><br><span class="line">    from_port   = 80</span><br><span class="line">    to_port     = 80</span><br><span class="line">    protocol    = &quot;tcp&quot;</span><br><span class="line">    cidr_blocks = [&quot;0.0.0.0/0&quot;]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  egress &#123;</span><br><span class="line">    from_port   = 0</span><br><span class="line">    to_port     = 0</span><br><span class="line">    protocol    = &quot;-1&quot;</span><br><span class="line">    cidr_blocks = [&quot;0.0.0.0/0&quot;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource &quot;aws_instance&quot; &quot;lb&quot; &#123;</span><br><span class="line">  ami           = &quot;$&#123;data.aws_ami.openresty.id&#125;&quot;</span><br><span class="line">  instance_type = &quot;t2.micro&quot;</span><br><span class="line"></span><br><span class="line">  tags = &#123;</span><br><span class="line">    Name = &quot;lb&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource &quot;aws_network_interface_sg_attachment&quot; &quot;sg_attachment&quot; &#123;</span><br><span class="line">  security_group_id    = &quot;$&#123;aws_security_group.lb_sg.id&#125;&quot;</span><br><span class="line">  network_interface_id = &quot;$&#123;aws_instance.lb.primary_network_interface_id&#125;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码读起来并不复杂：</p><ol><li>首先我们声明了用 aws provider 来创建资源，所以下述的资源都会创建在 aws 的 us-west-2 区域，就是美国西海岸俄勒冈的数据中心。</li><li>然后我们描述要使用的 AMI（Amazon Machine Image），这里我使用了我自己个人账号下的通过 packer（也是 Hashicorp 的一个开源项目）构建好的名为 “openresty-xxx” 的 AMI。</li><li>随后描述一个资源：security group，开放 80/443 端口。</li><li>之后描述一个资源：EC2 实例，使用刚才描述的 AMI，实例大小用 t2.micro。</li><li>最后描述如何把 security group 和 EC2 实例绑定起来。</li></ol><p>从这段代码我们可以看出，terraform 是声明式语言（Declarative Language），它描述这个脚本运行完云平台应该具有什么状态。所以 terraform 脚本在运行的时候，会拿代码中的状态和服务器端的状态进行对比，得出一个 diff，然后生成为实现这个 diff 所需要的 cloudformation（对于 aws 而言）代码，最后执行之。当然，如果每次都去云平台拿所有相关资源的状态，效率太低，所以 terraform 会将上一次执行完的结果的状态保存在本地或者公共的存储（一般是 S3），对比代码和上一次执行完保存的状态即可。</p><p>虽然 terraform 写起来很简单，但当我们撰写越来越多的 terraform 代码后，我们会发现，要能够很好地复用代码，还是要下一番功夫的。terraform 支持模块（module），一个模块就像一个函数，有输入输出，以及函数的主体。上面的代码如果封装成一个模块，那么其输入可以是 security group 想要开放的端口，EC2 实例的大小，磁盘大小，使用的 AMI 的名字等等，而输出可以是 EC2 实例的 id，public / private IP 等等。</p><p>除了模块外，terraform 还支持各种各样的 provider，比如各个云服务商的基础设施相关的 provider，以及丰富的在软件生命周期内可能涉及的各种 IT 服务，比如管理代码的 github，处理监控的 datadog，静态网站部署的 netlify, 监控报警用的 opsgenie, 进行单点登录（SSO）的 okta 等。这些 provider 让 terraform 的生命力非常旺盛，前景非常广阔。目前，大部分基础设施代码化的工作还聚焦在生产环境的代码化上面，而未来企业的 IT 系统的架构的代码化，将会是一座巨大的金矿。</p><blockquote><p>前面都在吹 terraform 的特点和优势，我们也来看看 terraform 的问题：</p></blockquote><p><strong>1）状态管理还处在原始社会。</strong></p><p>terraform 作为开源软件，既有开源软件生态丰富代码相对难以作恶的优势，又有开源软件只重视核心功能不注重使用体验的劣势。状态管理是 terraform 用户体验非常差的一环，由于没有提供相应的功能，客户只能自己在开源社区里找解决方案。目前 AWS 上常用的方案是 S3 存储状态，DynamoDB 用来加锁。如果多个人部署同一个 stack，就简单粗暴去 DynamoDB 拿锁排队。这个方案在几十人的团队里还凑合，再大就会有很多麻烦。另外，状态的版本控制基本上没有，或者只能通过状态使用的存储引擎做版本管理（比如 S3），很难有效对比多个状态之间的差异。</p><p><strong>2）缺乏可视化的手段。</strong></p><p>状态的展示，部署的过程其实都可能做很多可视化的事情，让整体体验更好一些，减少 devOps 犯错。然而，terraform 并没有做这方面的支持。</p><p><strong>3）代码表现力一般。</strong></p><p>用于描述基础设施的代码是否需要强大的表现力？强大的表现力是福还是祸？这块一直有争论。然而，实际使用的时候，我们总是绕不开循环，条件判断，以及对字符串做处理等各种工作，而 terraform 在这一块的表现力太弱，使得代码写起来非常冗长，很多时候不得不复制粘贴。</p><p><strong>4）terraform cloud 才刚刚起步。</strong></p><p>头两个问题也许在 terraform 的企业版中得到解决，但我和我的公司都没有用过，具体怎么样不得而知。也许是迫于接下来要讲的 pulumi 在市场上的压力吧，Hashicorp 在 2019 年 9 月开始提供 terraform cloud，为小团队解决这两个问题。然而，目前 terraform cloud 更像是一个临时拼凑的 CI 工具，还有很长的路要走。</p><h2 id="Terraform-使用技巧"><a href="#Terraform-使用技巧" class="headerlink" title="Terraform 使用技巧"></a>Terraform 使用技巧</h2><h3 id="避免秘钥直接写入-tf-文件中"><a href="#避免秘钥直接写入-tf-文件中" class="headerlink" title="避免秘钥直接写入 tf 文件中"></a>避免秘钥直接写入 tf 文件中</h3><p>将秘钥直接填入到. tf 文件中是十分不安全的，在多用户共同管理资源时，不建议把云 API 的秘钥直接写到源代码里，以免一不小心更新到公开的版本中，造成安全风险。</p><p>涉及 Provider API 中的如数据库用户名密码也同样建议以变量的形式加载，避免明文写入到文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># configure the secret key in the environment path</span></span><br><span class="line"><span class="built_in">export</span> TENCENTCLOUD_SECRET_ID=<span class="string">"your_fancy_accessid"</span></span><br><span class="line"><span class="built_in">export</span> TENCENTCLOUD_SECRET_KEY=<span class="string">"your_fancy_accesskey"</span></span><br><span class="line"><span class="built_in">export</span> TENCENTCLOUD_REGION=<span class="string">"ap-hongkong"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># configure provider.tf</span></span><br><span class="line">vim provider.tf</span><br><span class="line"></span><br><span class="line">provider <span class="string">"tencentcloud"</span> &#123;</span><br><span class="line"><span class="comment">#   secret_id  = "AKID****************"</span></span><br><span class="line"><span class="comment">#   secret_key = "QdcM***************"</span></span><br><span class="line">    region     = <span class="string">"ap-hongkong"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"aws_db_instance"</span> <span class="string">"example"</span> &#123;</span><br><span class="line">  engine               = <span class="string">"mysql"</span></span><br><span class="line">  engine_version       = <span class="string">"5.7"</span></span><br><span class="line">  instance_class       = <span class="string">"db.t2.micro"</span></span><br><span class="line">  name                 = <span class="string">"example"</span></span><br><span class="line">  <span class="comment"># Set the secrets from variables</span></span><br><span class="line">  username             = var.username</span><br><span class="line">  password             = var.password</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set secrets via environment variables</span></span><br><span class="line"><span class="built_in">export</span> TF_VAR_username=(the username)</span><br><span class="line"><span class="built_in">export</span> TF_VAR_password=(the password)</span><br><span class="line"><span class="comment"># When you run Terraform, it'll pick up the secrets automatically</span></span><br><span class="line">terraform apply</span><br></pre></td></tr></table></figure><h3 id="善用-variable-环境变量"><a href="#善用-variable-环境变量" class="headerlink" title="善用 variable 环境变量"></a>善用 variable 环境变量</h3><p><code>variable</code> 是 Terraform 重要的配置文件类型之一，通过对变量的集中管理，用户可以在资源文件中直接引用变量名进行赋值</p><p>创建 <code>variable.tf</code> 文件，配置可用区参数的默认值 <code>ap-guangzhou-1</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># variable.tf</span><br><span class="line">variable &quot;default_az&quot; &#123;</span><br><span class="line">  type = string</span><br><span class="line">  efault = &quot;ap-guangzhou-1&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># instance.tf</span><br><span class="line"># create a CVM instance</span><br><span class="line">resource &quot;tencentcloud_instance&quot; &quot;tc_cvm_instance&quot; &#123;</span><br><span class="line">  image_id          = &quot;xxx&quot;</span><br><span class="line">  availability_zone = &quot;var.default_az&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="善用-output-做-debug"><a href="#善用-output-做-debug" class="headerlink" title="善用 output 做 debug"></a>善用 output 做 debug</h3><p><code>terraform output</code> 指令用于从状态文件中提取输出变量的值。</p><p><strong> 标准语法：</strong><code>terraform output [options] [NAME]</code></p><ul><li><code>options</code> 用来填写 <code>output</code> 的 flags</li><li><code>NAME</code> 用来指定要输出的变量的值，默认为根模块的所有输出</li></ul><p>配置 <code>output.tf</code> 文件，设置要输出的内容，案例中设置查看服务器的 <code>id</code> 和 <code>availability_zone</code> 两个参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># output.tf</span><br><span class="line"></span><br><span class="line">output &quot;cvm_az&quot; &#123;</span><br><span class="line">  value = &quot;$&#123;tencentcloud_instance.cvm.availability_zone&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &quot;cvm_id&quot; &#123;</span><br><span class="line">  value = &quot;$&#123;tencentcloud_instance.cvm.id&#125;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行 <code>terraform apply</code>，<code>output</code> 的内容自动显示出来，也可以执行 <code>terraform output</code> 再次查看全部输出内容</p><p>通过 <code>terraform output cvm_id</code> 单独查看服务器 id</p><p>有关 <code>output</code> 指令的更多信息，请点击<a href="https://www.terraform.io/docs/commands/output.html" target="_blank" rel="noopener">这里</a></p><h3 id="terrafrom-目录布局"><a href="#terrafrom-目录布局" class="headerlink" title="terrafrom 目录布局"></a>terrafrom 目录布局</h3><p>Terraform 运行时会读取工作目录中所有的 <code>*.tf</code>, <code>*.tfvars</code> 文件，所以我们不必把所有的东西都写在单个文件中去，应按职责分列在不同的文件中，例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">provider.tf             ### provider 配置</span><br><span class="line"></span><br><span class="line">terraform.tfvars        ### 配置 provider 要用到的变量</span><br><span class="line"></span><br><span class="line">varable.tf              ### 通用变量</span><br><span class="line"></span><br><span class="line">resource.tf             ### 资源定义</span><br><span class="line"></span><br><span class="line">data.tf                 ### 包文件定义</span><br><span class="line"></span><br><span class="line">output.tf               ### 输出</span><br></pre></td></tr></table></figure><h3 id="其它-terraform-指令"><a href="#其它-terraform-指令" class="headerlink" title="其它 terraform 指令"></a>其它 terraform 指令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># providers 有新版本时可以使用以下指令更新脚本，获取最新的应用</span></span><br><span class="line">terraform init -upgrade</span><br><span class="line"></span><br><span class="line"><span class="comment"># 限制并发操作的数量，默认是 10</span></span><br><span class="line">terraform apply -parallelism=5</span><br></pre></td></tr></table></figure><p>对方正在输入…</p><h2 id="Terraform-认证考试"><a href="#Terraform-认证考试" class="headerlink" title="Terraform 认证考试"></a>Terraform 认证考试</h2><p><a href="https://www.hashicorp.com/certification/terraform-associate" target="_blank" rel="noopener">Terraform Associate Certification</a></p><p>The Terraform Associate exam has both a study guide and a review guide. While much of the information in these two guides are the same, they are presented differently for different uses. Use the <a href="https://learn.hashicorp.com/terraform/certification/terraform-associate-study-guide" target="_blank" rel="noopener">study guide</a>if you want to study all the exam objectives. Use the <a href="https://learn.hashicorp.com/terraform/certification/terraform-associate-review" target="_blank" rel="noopener">review guide</a> if you already have Terraform experience and want to choose which objectives to review before taking the exam. We provide <a href="https://learn.hashicorp.com/terraform/certification/terraform-associate-sample-questions" target="_blank" rel="noopener">sample questions</a> so you know what to expect when taking the exam.</p><ul><li>True or False</li><li>Multiple choice with a single answer</li><li>Multiple choice with several answers</li><li>Text match, where you’ll choose the right text insert or command from a set of possible answers</li></ul><p>As for the actual content, the <a href="https://www.hashicorp.com/certification/terraform-associate/" target="_blank" rel="noopener">Exam Objectives</a> give you a comprehensive breakdown of what you’ll need to know for each subject. The nine key objectives are as follows:</p><ol><li>Understand infrastructure as code (IaC) concepts</li><li>Understand Terraform’s purpose (vs other IaC)</li><li>Understand Terraform basics</li><li>Use the Terraform CLI (outside of core workflow)</li><li>Interact with Terraform modules</li><li>Navigate Terraform workflow</li><li>Implement and maintain state</li><li>Read, generate, and modify configuration</li><li>Understand Terraform Cloud and Enterprise capabilities</li></ol><p>Prepare for the “HashiCorp Certified: Terraform Associate” exam. This track will walk you through each test objective and study resources.</p><p><a href="https://learn.hashicorp.com/collections/terraform/certification" target="_blank" rel="noopener">Prepare for Certification</a></p><p><a href="https://www.contino.io/insights/hashicorp-certified-terraform-associate-exam" target="_blank" rel="noopener">The Ultimate Guide to Passing the HashiCorp Certified Terraform Associate Exam</a></p><h2 id="Terraform-官方培训笔记"><a href="#Terraform-官方培训笔记" class="headerlink" title="Terraform 官方培训笔记"></a>Terraform 官方培训笔记</h2><p><a href="https://play.instruqt.com/binxio/tracks/terraform-intro" target="_blank" rel="noopener">Terraform Intro</a></p><p><a href="https://play.instruqt.com/instruqt/tracks/terraform-arcade" target="_blank" rel="noopener">Terraform</a></p><p><a href="https://play.instruqt.com/hashicorp/tracks/sentinel-for-terraform-v3" target="_blank" rel="noopener">Sentinel for Terraform</a></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.terraform.io/docs/index.html" target="_blank" rel="noopener">Terraform Documentation</a> - The documentation is an in-depth reference guide to all the features of Terraform, including technical details about the internals of how Terraform operates.</p><p><a href="https://zhuanlan.zhihu.com/p/164624588" target="_blank" rel="noopener">追赶 terraform，让基础设施代码化更加容易，pulumi 都做了些什么？</a></p><p><a href="https://aws.amazon.com/cn/blogs/china/aws-china-region-guide-series-terraform1/" target="_blank" rel="noopener">使用 Terraform 在 AWS 中国区域实现自动化部署指南系列</a></p><p><a href="https://godleon.github.io/blog/DevOps/terraform-getting-started/" target="_blank" rel="noopener">Terraform 入門學習筆記</a></p><p><a href="https://developer.aliyun.com/article/713099" target="_blank" rel="noopener">玩转阿里云 Terraform</a></p><p><a href="https://developer.aliyun.com/article/118719" target="_blank" rel="noopener">Terraform/Ansible on Cloud– 基础设施和应用管理实践</a></p><p><a href="https://cloud.tencent.com/developer/article/1473713" target="_blank" rel="noopener">腾讯云 Terraform 应用指南</a></p><p><a href="https://cloud.tencent.com/developer/article/1597530" target="_blank" rel="noopener">通过 terraform 快速创建腾讯云基础资源</a></p>]]></content>
    
    <summary type="html">
    
      Terraform学习路径
    
    </summary>
    
      <category term="学习 | Study" scheme="https://wsgzao.github.io/categories/%E5%AD%A6%E4%B9%A0-Study/"/>
    
    
  </entry>
  
  <entry>
    <title>DevOps Roadmap 持续学习路径分享</title>
    <link href="https://wsgzao.github.io/post/devops/"/>
    <id>https://wsgzao.github.io/post/devops/</id>
    <published>2020-10-01T08:31:24.000Z</published>
    <updated>2020-10-06T07:26:21.496Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.v2ex.co/o2t5S8at.png" alt=""></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>其实一直很想整理一篇 DevOps 学习资源导航类文章，主要原因除了自己的懒惰外，技术的不断创新也让未来更加值得期待。虽然在大多数情况下我们既无法面面俱到也突破不了点的极限，但是这也不会阻碍我们对于学习的热爱。梳理这篇文章也是希望自己能够始终保持学习的态度，完善自己的知识体系，坚持技术沉淀的过程，享受点滴进步的快乐。</p><p>DevOps 这篇文章是 2015 年写的初稿，到现在 2020 年新技术的变化确实是肉眼可见，不过底层的一些知识体系始终没有改变，如果能够把基础打得更扎实些相信未来又会有更多收获。DevOps 代表的是一种文化，现在越来越多的公司会设立 SRE 或 DevOps 的岗位，传统的运维人员也需要向开发运维工程师转变，不进则退。</p><blockquote><p>DevOps 是一段持续学习之旅</p></blockquote><hr><h2 id="更新历史"><a href="#更新历史" class="headerlink" title="更新历史"></a>更新历史</h2><p>2020 年 10 月 01 日 - 更新内容<br>2020 年 03 月 20 日 - 重构内容<br>2018 年 05 月 15 日 - 修改内容<br>2016 年 05 月 11 日 - 增加 PHPHub，Ruby China<br>2016 年 03 月 25 日 - 增加 InfoQ，神秘的程序员<br>2016 年 02 月 14 日 - 增加 Forvo，Coursera，自强学堂<br>2016 年 01 月 04 日 - 增加利器<br>2015 年 12 月 22 日 - 增加极客学院，网易公开课，曹政微信订阅号<br>2015 年 10 月 29 日 - 初稿</p><p>阅读原文 - <a href="https://wsgzao.github.io/post/devops/">https://wsgzao.github.io/post/devops/</a></p><hr><h2 id="DevOps-Roadmap"><a href="#DevOps-Roadmap" class="headerlink" title="DevOps Roadmap"></a>DevOps Roadmap</h2><p><img src="https://roadmap.sh/roadmaps/devops.png" alt=""></p><p>上图出自 <a href="https://roadmap.sh/" target="_blank" rel="noopener">Developer Roadmaps</a>，上面还有针对其他方向的 roadmap，总结的相对比较全面，因为国内的开源项目刚刚开始在世界崭露头角，相信随着国内开源社区的不断成熟发展，可以看到越来越多的国内项目出现在各个榜单上，加油！奥利给！</p><p>Google SRE vs. DevOps: competing standards or close friends? 以及中文翻译整合到了一起，方便大家阅读<br><a href="https://wsgzao.github.io/post/sre-vs-devops/">SRE 和 DevOps</a></p><p>How To Become a DevOps Engineer In Six Months or Less - CODING 做了中文翻译<br><a href="https://zhuanlan.zhihu.com/p/68703999" target="_blank" rel="noopener">DevOps 工程师成长日记系列</a></p><h2 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h2><p>我在 2015 年推荐的是 Kindle 然而也一直处于吃灰状态，没想到从 2019 年开始以微信读书为代表的电子阅读 APP 竟然成功跨平台至 Web 和电子水墨屏，优质的阅读体验并通过各种奖励降低用户阅读门槛，除了英文原版书籍没有 Kindle 丰富，在微信读书中我也可以看到越来越多的技术书籍，新的阅读方式让身处国外的小伙伴可以获得更多幸福感。随着国内在线教育在 2020 年疫情中的强势觉醒，也许又会开辟出更多新的契机。</p><p>微信读书 - <a href="https://weread.qq.com/" target="_blank" rel="noopener">https://weread.qq.com/</a></p><h2 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h2><blockquote><p>善用搜索引擎，穿过一堵墙你的知识面可能会更加立体</p></blockquote><p>Google - <a href="https://www.google.com/" target="_blank" rel="noopener">https://www.google.com/</a><br>Google Images - <a href="https://images.google.com/" target="_blank" rel="noopener">https://images.google.com/</a><br>Google Scholar - <a href="https://scholar.google.com/" target="_blank" rel="noopener">https://scholar.google.com/</a></p><ul><li>事实证明大多数情况下还是 Google 最懂我们的心</li></ul><p>WikipediA - <a href="https://www.wikipedia.org/" target="_blank" rel="noopener">https://www.wikipedia.org/</a></p><ul><li>试着把维基百科作为你的首选，弱化自己对于百度的依赖</li></ul><p>Forvo - <a href="https://zh.forvo.com/" target="_blank" rel="noopener">https://zh.forvo.com/</a></p><ul><li>妈妈再也不用担心我不会发音了，让 Forvo 来做你的发音指南</li></ul><h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><blockquote><p>黑客的思路往往让人眼前一亮，多向大牛们学习</p></blockquote><p>DevSec Hardening Framework - <a href="https://dev-sec.io/baselines/" target="_blank" rel="noopener">https://dev-sec.io/baselines/</a></p><ul><li>开源直观的 baselines 包括 Linux, Windows, MySQL, Nginx, Docker, K8S 等</li></ul><p>知道创宇研发技能表 - <a href="https://blog.knownsec.com/Knownsec_RD_Checklist/index.html" target="_blank" rel="noopener">https://blog.knownsec.com/Knownsec_RD_Checklist/index.html</a></p><ul><li>感谢 <a href="http://evilcos.me/" target="_blank" rel="noopener">@余弦</a></li></ul><p>纳威安全导航 - <a href="https://navisec.it/" target="_blank" rel="noopener">https://navisec.it/</a></p><ul><li>FreeBuf，i 春秋等都值得你多逛逛</li></ul><h2 id="订阅"><a href="#订阅" class="headerlink" title="订阅"></a>订阅</h2><blockquote><p>信息爆炸的时代如何过滤噪音很重要，少浪费些无价值的时间在游戏，微博，微信，头条，抖音等社交媒体，也许我们可以看见更多</p></blockquote><p>开发者头条 - <a href="https://toutiao.io/" target="_blank" rel="noopener">https://toutiao.io/</a></p><ul><li>码农周刊团队为程序员设计的阅读分享平台</li><li>掘金，奇舞周刊等也是类似的</li></ul><p>湾区日报 - <a href="https://wanqu.co/" target="_blank" rel="noopener">https://wanqu.co/</a></p><ul><li>关注创业与技术, 每天推送 5 篇优质英文文章</li><li>坚持向来不易，锻炼下英文阅读能力也不错哦</li></ul><h2 id="社区"><a href="#社区" class="headerlink" title="社区"></a>社区</h2><blockquote><p>Way to Explore &amp; Way too Extreme</p></blockquote><p>V2EX - <a href="https://www.v2ex.com/" target="_blank" rel="noopener">https://www.v2ex.com/</a></p><ul><li>一个与众不同的社区</li></ul><p>Stack Overflow - <a href="https://stackoverflow.com/" target="_blank" rel="noopener">https://stackoverflow.com/</a></p><ul><li>如果你使用 Google 相信会在这里看到不少高质量的答案</li></ul><p>PHPhub - <a href="https://phphub.org/" target="_blank" rel="noopener">https://phphub.org/</a></p><ul><li>PHPhub 是积极向上的 PHP &amp; Laravel 开发者社区</li></ul><p>Ruby China - <a href="https://ruby-china.org/" target="_blank" rel="noopener">https://ruby-china.org/</a></p><ul><li>中国 Ruby 社区，由众多爱好者共同维护，致力于构建完善的 Ruby 中文社区</li></ul><h2 id="微信订阅号"><a href="#微信订阅号" class="headerlink" title="微信订阅号"></a>微信订阅号</h2><p>小道消息 - WebNotes</p><ul><li>冯大辉的小道消息已经成为微信订阅号的标杆之一</li></ul><p>曹政 - caozsay</p><ul><li>曹大做为一个有故事的人，愿意分享更愿意交流，已经很难得了</li></ul><p>高效运维 - greatops</p><ul><li>萧田国组织维护的 “高效运维” 公众号每周多篇干货满满的原创好文</li></ul><p>神秘的程序员 - coderstory</p><ul><li>西乔和霍炬共同创作的程序员主题漫画，为生活添加一抹色彩</li></ul><h2 id="OJ"><a href="#OJ" class="headerlink" title="OJ"></a>OJ</h2><blockquote><p>ACM 和奥数类似属于有天赋的你们，但实际工作中更要注重学习方法和问题总结</p></blockquote><p>LeetCode - <a href="https://leetcode.com/" target="_blank" rel="noopener">https://leetcode.com/</a><br>力扣 - <a href="https://leetcode-cn.com/" target="_blank" rel="noopener">https://leetcode-cn.com/</a></p><ul><li>leetcode 是一个针对程序员的面试准备平台</li><li>在中国推出了独立的力扣</li></ul><p>牛客网 - <a href="http://www.nowcoder.com/" target="_blank" rel="noopener">http://www.nowcoder.com/</a></p><ul><li>一个新的专业 IT 笔试面试备考平台</li></ul><h2 id="信息聚合"><a href="#信息聚合" class="headerlink" title="信息聚合"></a>信息聚合</h2><blockquote><p>分享一些实用的技术学习路线</p></blockquote><p>Linux 就该这么学 - <a href="https://www.linuxprobe.com/docs/LinuxProbe.pdf" target="_blank" rel="noopener">https://www.linuxprobe.com/docs/LinuxProbe.pdf</a></p><ul><li>作者持续更新并开源精心制作的 Linux 文档，推荐优先学习作为基础铺垫</li><li>以前还会推荐《鸟哥的 Linux 私房菜》，但现在就是《Linux 就该这么学》</li></ul><p>InfoQ - <a href="https://www.infoq.com/" target="_blank" rel="noopener">https://www.infoq.com/</a></p><ul><li>促进软件开发领域知识与创新的传播</li><li>MacTalk - 池建强加入后还打造了《极客时间》</li></ul><p>菜鸟教程 - <a href="https://www.runoob.com/" target="_blank" rel="noopener">https://www.runoob.com/</a></p><ul><li>学的不仅是技术，更是梦想</li><li>同类型还有 w3school 等</li></ul><p>自强学堂 - <a href="https://code.ziqiangxuetang.com/" target="_blank" rel="noopener">https://code.ziqiangxuetang.com/</a></p><ul><li>感谢 @涂伟忠，Django 可是自强学堂的招牌教程</li></ul><p>优设 - <a href="https://hao.uisdc.com/" target="_blank" rel="noopener">https://hao.uisdc.com/</a></p><ul><li>以前很喜欢腾讯 CDC 的设计理念，现在老了只能偶尔瞅瞅</li></ul><p>VMware - <a href="http://www.vmware.com/cn/support/support-resources/pubs/" target="_blank" rel="noopener">http://www.vmware.com/cn/support/support-resources/pubs/</a></p><ul><li>没有贴图还能把虚拟化手册写得灰常清晰具有可操作性，VMware 必须得算一个</li><li>当然也推荐大家阅读 Microsoft，RedHat，Oracle 等官方帮助文档</li></ul><p>AWS - <a href="https://docs.aws.amazon.com/" target="_blank" rel="noopener">https://docs.aws.amazon.com/</a></p><ul><li>AWS 在公有云市场份额第一，虽然技术未必是最领先的但文档和用户体验都都得到大伙的认可</li><li>Google Cloud 和 Microsoft Azure 紧随其后，国内的阿里云 / 腾讯云也在奋起直追</li><li>云即未来</li></ul><h2 id="Blog"><a href="#Blog" class="headerlink" title="Blog"></a>Blog</h2><blockquote><p>推荐的 Blog 不多，希望大家找到适合自己的博客</p></blockquote><p>编程随想 - <a href="https://program-think.blogspot.com/" target="_blank" rel="noopener">https://program-think.blogspot.com/</a></p><ul><li>你应该了解一些真实的信息</li></ul><p>阮一峰 - <a href="http://www.ruanyifeng.com/" target="_blank" rel="noopener">http://www.ruanyifeng.com/</a></p><ul><li>坚持分享技术和生活的典范</li></ul><p>廖雪峰 - <a href="https://www.liaoxuefeng.com/" target="_blank" rel="noopener">https://www.liaoxuefeng.com/</a></p><ul><li>之前学 Python 的时候就是看廖雪峰的 Blog</li></ul><p>酷壳 - <a href="https://coolshell.cn/" target="_blank" rel="noopener">https://coolshell.cn/</a></p><ul><li>坚持更新技术类 Blog 的人或团队越来越少，这也是认真做事的态度</li></ul><h2 id="在线教育"><a href="#在线教育" class="headerlink" title="在线教育"></a>在线教育</h2><p>极客时间 - <a href="https://time.geekbang.org/" target="_blank" rel="noopener">https://time.geekbang.org/</a></p><ul><li>在线教育类网站很多，我不做太多推荐，极客时间是一个好产品，感谢 MacTalk - 池建强团队</li></ul><p>Coursera - <a href="https://www.coursera.org/" target="_blank" rel="noopener">https://www.coursera.org/</a></p><ul><li>在国外生活的同学几乎都会推荐的网络学习平台</li></ul><h2 id="特别推荐"><a href="#特别推荐" class="headerlink" title="特别推荐"></a>特别推荐</h2><p><a href="https://github.com/selfteaching/the-craft-of-selfteaching" target="_blank" rel="noopener">自学是门手艺 - 李笑来</a></p><p>One has no future if one couldn’t teach themself.</p>]]></content>
    
    <summary type="html">
    
      DevOps是一段持续学习之旅
    
    </summary>
    
      <category term="学习 | Study" scheme="https://wsgzao.github.io/categories/%E5%AD%A6%E4%B9%A0-Study/"/>
    
    
  </entry>
  
  <entry>
    <title>从国内跳槽至新加坡工作的经验分享</title>
    <link href="https://wsgzao.github.io/post/singapore/"/>
    <id>https://wsgzao.github.io/post/singapore/</id>
    <published>2020-09-23T02:59:49.000Z</published>
    <updated>2020-09-28T14:30:31.770Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/wsgzao/storage-public/master/img/20191007154135.png" alt=""></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为什么会写这样一篇长文记录和分享自己在新加坡的工作生活，主要是我在 2018 年 6 月 9 日前需要了解新加坡的时候网上的参考信息屈指可数，出于这个原因我决定顺手记录来新加坡的经历方便自己回顾也方便他人参考。非常感谢在 2019 年出现的<a href="https://996.icu" target="_blank" rel="noopener">996.icu</a>，让更多人看到了一个不一样的世界，里面也有很多朋友分享了新加坡的生活经历。不管你现在的生活是 996 还是 669，我都希望大家可以从电视剧《都挺好》里发现那个最真实的自己。如果你只想了解我是如何来到新加坡的可以直接跳到最后一章。</p><h2 id="更新历史"><a href="#更新历史" class="headerlink" title="更新历史"></a>更新历史</h2><p>2020 年 09 月 09 日 - 跳槽离职，租房搬家，保险补充，新加坡买房准备<br>2020 年 03 月 03 日 - 增加新加坡金融理财以及信用卡申请心得<br>2019 年 12 月 31 日 - 增加新加坡保险购买经历的思考和新加坡 2020 年各行业工资数据<br>2019 年 10 月 16 日 - 更新 EP 申请 PR 材料细节，增加新加坡婚礼红包份子钱的礼仪<br>2019 年 06 月 09 日 - 更新新加坡一周年经历<br>2019 年 02 月 14 日 - 更新半年的经历以及 PR 申请流程<br>2018 年 09 月 09 日 - 增加新加坡 3 个月工作生活感受<br>2018 年 08 月 01 日 - 更新个人经验<br>2018 年 05 月 15 日 - 初稿</p><p>阅读原文 - <a href="https://wsgzao.github.io/post/singapore/">https://wsgzao.github.io/post/singapore/</a></p><p><strong> 扩展阅读 </strong></p><p><a href="https://github.com/623637646/996.Leave" target="_blank" rel="noopener">逃离 996</a></p><p><a href="https://zhuanlan.zhihu.com/p/65226485" target="_blank" rel="noopener">算法工程师肉身翻墙新加坡经验分享（踩坑记）</a></p><p><a href="https://mp.weixin.qq.com/s/1EOA7MpTpmR-fg6b0nvMXg" target="_blank" rel="noopener">坡县生存指北 V1.0</a></p><p><a href="https://www.zhihu.com/question/357534411/answer/963038239" target="_blank" rel="noopener">有什么是你到过新加坡才知道的？</a></p><hr><h2 id="我的新加坡之旅时间轴"><a href="#我的新加坡之旅时间轴" class="headerlink" title="我的新加坡之旅时间轴"></a>我的新加坡之旅时间轴</h2><blockquote><p>时间轴不再描述细节，如果需要了解详细信息可以阅读后面的内容</p></blockquote><p><strong>2018-04</strong></p><ul><li>LinkedIn 收到 100offer 猎头来自 Sea 的工作邀请机会</li><li>经历 3 轮远程 Skype 视频面试，时间约为 3 周</li><li>提出辞职由 Sea HR 帮忙开始申请 EP，时间约为 3 周</li></ul><p><strong>2018-05</strong></p><ul><li>完成离职流程，时间约为 1 个月</li><li>收到 EP 的 IPA，由 Sea HR 帮忙开始申请 DP，时间约为 1 周(申请 DP 请提前准备好结婚证公正)</li><li>完成新加坡机票，住宿，货币，各种材料纸质化和电子扫描化的准备(可选为申请 PR 准备国内学历学位公证和出生证公证)</li></ul><blockquote><p>再强调一下出国前的建议</p></blockquote><ol><li>随身携带好护照和相关入境材料，非常重要，非常重要，非常重要</li><li>证件，学历和结婚证公正翻译等材料可以通过扫描全能王 (CamScanner) 录入为电子版，水印是可以很方便去除的，这里就不多说了。如果觉得好用请购买正版服务支持下总部位于上海的合合信息，名片全能王 (CamCard) 也是他们家的产品</li><li>提前规划好到达新加坡后的住宿(新加坡 Airbnb 违法请慎重考虑)，交通出行，手机应用，SIM 卡，入职流程</li><li>准备好足够的新币现金建议 4k+，因为银行卡和租房都是大头，有条件至少准备一张以上的 Visa/Mastercard 信用卡</li><li>出国前检查下国内的银行，手机，社保，人事档案是否安排妥当，身份证和护照离过期更换时间是否可控</li><li>如果有条件出国前做下全面的体检至少对自己身体有一个清晰的认识，把牙齿之类的小毛小病尽可能提前扫除隐患</li><li>现在的网络通信都很发达，记得和家人保持联系，减少他们的担心，自己照顾好自己</li></ol><p><strong>2018-06</strong></p><ul><li>20180609 星期六晚上 20 点第一次来到新加坡</li><li>完成住宿，EZ-Link 交通卡和 Singtel Prepaid 手机卡，时间约为 1 天</li><li>入职一周左右由 HR 协助申请 EP，需要本人预约 MOM 现场办理 EP，收到 EP 实体卡时间约为 1 周内</li><li>收到 EP 实体卡使用 SGWorkPass 扫描获取有效期并保存照片，注册 SingPass，约 1 周左右收到密码信封然后激活</li><li>办理 Zero1.sg 的无合约限制，无限流量的 Postpaid 手机卡，背后运营商为 Singtel 质量靠谱</li><li>携带相关证明办理银行卡，我选择 UOB 但是推荐各位选择 DBS，如需转账回国可以再额外开通工商银行</li></ul><p><strong>2019-03</strong></p><ul><li>全年在新加坡工作满 183 天以上需要报税，新加坡阶梯税率较低，普通人平均缴税额度大概年收入 5%-8%，对外国人来说可以理解为税前≈税后或者到手收入</li><li>工作满半年可以开始申请 PR，但一般建议等满 2 年，可以提前准备各种材料，国内学历学位和出生证公证在新加坡本地认证机构都可以代办</li><li>在半年时间中根据自身状况可选办理信用卡，健身卡，推荐补充个人住院医疗，重疾人寿意外为可选项，保障自己的身体健康很重要</li><li>基本熟悉新加坡的生活节奏，明白新加坡的优缺点，规划自己下一个阶段目标</li></ul><p><strong>2019-12</strong></p><ul><li>新加坡保险的思考和决策</li><li>我购买的是 AIA 储蓄 + 终生人寿重疾险 30 万新币保障额度</li></ul><p>我身边很多购买过保险的人基本是 AIA 和 Prudential，我为什么会买 AIA 因为一直在房产投资群潜水，偶然冒泡后误打误撞结识了 AIA 团队排名第一的 (真) 学霸，大佬开玩笑邀请我去他们团队私人会所检验其专业性，我拖了半年觉得自己对保险的认知仅停留在皮毛阶段，最后选择在年末去了解下，对方因为私人原因跨行业横向切入保险的经历挺不容易的，我简单说下我理解的新加坡保险，不正确的地方也欢迎补充，毕竟这对每个人来说都息息相关：</p><ol><li>公司配置的一般是团体险，覆盖门诊 + 住院医疗，福利好可以不用担心看不起病。如果额度不高就建议单独购买住院医疗，大家应该清楚新加坡住院的费用是很贵的，保险费用在 1000 新币 / 年左右不算贵，选择哪家保险都差不多，这也是大多数人在新加坡自费购买的第一个保险。如果是 PR/SC 可以升级政府 CPF 中的私人医疗保险。</li><li>新加坡的寿险分定期和终生，保额高费用低，单独购买每年 800 新币即可配置 100w 保额，这也是很多人从国内飞来新加坡购买寿险的原因。</li><li>新加坡的重疾险和国内一样都是最贵的险种，但核心优势是新加坡保险协会制定的保障范围覆盖初期 + 中期 + 重疾种类市场最多，而且购买和赔付流程合理清晰。需要根据家庭收入分配，年龄，保额，初期，倍数等仔细评估</li><li>新加坡的意外险比较简单，注意并理解赔付规则为意外的含义</li><li>新加坡投资类保险收益没有香港的乐观</li></ol><p>如果买保险只需要找同类型最便宜的，那我们也就不用这么累去仔细比较。保险中存在很多影响价格的关键参数，不少细节也需要你和保险代理一一沟通确认清楚，无论你选择哪一家保险公司一个专业且靠谱的保险代理会让你省心不少，如果你在国内买过保险或者房子应该能感同身受。</p><p>对于买保险这个事情千万不能像父母那一代认为是骗子或者买成了人情险，要对自己的家庭生活品质和风险管理负责，新加坡保险代理相对国内比较靠谱，购买保险前多和已经买过的朋友或者不同的保险公司对比咨询如何合理搭配，在不同阶段买适合的保险产品，不要等到大病意外或被拒绝赔付后才意识到为什么没有提前配置正确的保险产品。微信朋友圈中你也许已经看到过大量真实的水滴筹大病求助信息，我希望你或者你的家人朋友能通过保险的来应对生活的挑战。</p><p>我也相信国内以蚂蚁金服和微信为首的互联网渠道会让大家更透明放心的购买保险，总有一天会实现没有中间商赚差价。</p><p><a href="http://m.opinion.caixin.com/zknews/2017-01-22/101047816.html" target="_blank" rel="noopener">我为什么要去新加坡买定期寿险 - 财新网专栏作家 - 明宏义</a></p><p><strong>2020-03</strong></p><ul><li>关于新加坡银行储蓄利率和信用卡申请选择</li></ul><p>DBS: Debit Card, DBS Multiplier Account, POSB Everyday Card, PAssion POSB Debit Card<br>UOB: Debit Card, UOB One Account, UOB ONE CARD<br>OCBC: Debit Card, OCBC 360 Account, OCBC 365 Credit Card<br>ICBC: Debit Card, Credit Card<br>Gray: GrayPay Card</p><ol><li>新加坡银行首选 DBS，因为我是 UOB，我老婆是 DBS，略微复杂的阶梯储蓄利率奖励额度上限一般 10w 新币超出部分按基础利率计算，整体来看新加坡本地银行基本都维持在年化利率 2%，选任何一家收益差别并不大，没有特殊情怀自然是推荐用户体验更好本土实力更强的 DBS</li><li>新加坡信用卡在你没有决定是否长期留在新加坡前属于可有可无，如果需要办理信用卡可以参考知乎 @<a href="https://www.zhihu.com/question/336365196" target="_blank" rel="noopener">中国工商银行股份有限公司新加坡分行 信用卡部主管 邢起超</a>的客观回答，<a href="https://www.moneysmart.sg/" target="_blank" rel="noopener">MoneySmart.sg</a>有更多详细的评测报告</li><li>单从投资收益和风险来说我希望各位可以多关注下 REITs，ETF，美股或者港股，以学习的心态了解整个世界的金融体系大概如何运作的，如果各位对金融理财了解不多，推荐先阅读一本书《小狗钱钱》，微信读书可以免费看。</li></ol><p><strong>2020-09</strong></p><ul><li>关于跳槽离职</li><li>关于租房搬家</li><li>关于保险补充</li><li>关于新加坡买房准备</li></ul><p>如果你想找参照坐标可以浏览<a href="http://sgprapp.com/listPage" target="_blank" rel="noopener">新加坡 PR,Citizen,EP,SP 统计查询</a></p><p>上面已经提到我在新加坡的第一份工作是在 Sea 也就是 Garena 和 Shopee 的母公司，也依次面试通过了 ByteDance，Grab，Tencent 等，每个公司的离职流程不完全一样记得多了解清楚和耐心沟通，新加坡华人圈子很小尤其是做技术的，以后说不定哪天就又成为同事了。</p><p>我也是第一次经历真正意义上的租房，靠近市中心地铁绿线上 1 房 Condo 2100-2500 新币左右，2 房 HDB 为 2500-3000，我比较幸运找到了锁房间的新 HDB，这样既满足整租私密性又兼顾地理位置和价格。PR 以及公民搬家后记得在 28 天内到移民与关卡局或警局办理更换身份证住址的手续。关于新加坡租房的细节也在后文中写了，这里也不再赘述了。</p><p>上文我提到在 2019-12 月办理了 AIA 30w 新币额度的终身重疾人寿，然后也是按照原计划在 2020-07 月办理了 AIA 100w 新币额度的 100 岁定期人寿，保险金字塔底层算是基本成型了。除了新加坡政府提供的 <a href="https://www.cpf.gov.sg/Members/Schemes/schemes/other-matters/dependants-protection-scheme" target="_blank" rel="noopener">Dependants’ Protection Scheme (DPS)</a> 小额人寿以外还有非常重要的住院医疗保险俗称终身健保<a href="https://www.moh.gov.sg/cost-financing/healthcare-schemes-subsidies/medishield-life" target="_blank" rel="noopener">MediShield Life</a>，之后我也会考虑升级至<a href="https://www.moh.gov.sg/cost-financing/healthcare-schemes-subsidies/medishield-life/comparison-of-integrated-shield-plans" target="_blank" rel="noopener">Integrated Shield Plans</a></p><p>关于新加坡买房的注意细节我也都更新到后文了，这里简单聊一下思路，如果愿意租房等 3 年或者提前至第 2 年转为新加坡国籍，那么选择 Resale HDB 组屋会合适些，好处主要是大，便宜以及选择多，2015 年的 5 房 HDB 才 100w 新币左右。如果是追求生活质量选择 Condo，常见的 2-3 房价格区间在 120w-200w 不等，从投资角度来看买热门预售新 Condo 然后等到 3 年后转售可以获得超过 15%-30% 乐观收益，购买建议是先以 1 个人名义或者按 99:1 的比例买第 1 套，这样等到有实力投资购买第 2 套时可以合法少缴纳 ABSD 额外印花税。</p><p>关于新加坡养娃和上学的问题我也提前更新了一些资料在后文中，有需要的可以继续往下阅读。我个人的理解是双 PR 家庭大概率至少有 1 人要带着娃转为新加坡公民参与好学校的竞争，不然得花高价钱走国际学校路线，如果选择散养教育那就是另一回事了。</p><p>回顾自己从 2018-06 到 2020-09 的新加坡经历，很多人会问为什么选择来新加坡，如何来新加坡，如何申请新加坡 PR 等问题。我依然无法回答所有的疑问，能够帮助到大家的就是尽可能多的分享自己的这份经历，虽然不能代替各位做选择，但真诚的希望可以辅助你做出决定。</p><h2 id="认识狮城"><a href="#认识狮城" class="headerlink" title="认识狮城"></a>认识狮城</h2><p>姓名：新加坡</p><p>年龄：53 岁（成立于 1965 年，国庆日为每年的 8 月 9 日）</p><p>家庭住址：北半球赤道地区，位于马来半岛最南端 （北纬 1°22′，东经 103°48′）</p><p>住房面积：新加坡国土面积 710.3 平方公里 （新加坡面积是上海的 1/9，北京的 1/23）</p><p>家庭成员：人口约 520 万，密度达到每平方公里 7700 多人（排在世界前列）</p><p>相貌特征：新加坡多元种族和文化的相互融合是其极具魅力的原因之一，由华族（占全国人口约四分之三）、欧亚族、印度族、马来族、土生华人构成。</p><p>性格特征：新加坡以实行严格的法律和制度著称，无论是居民还是游客，都需要予以足够重视，否则可能会被课以重罚。当然，如果您遵循当地法律规章，也不必过分担心。</p><blockquote><p>所获荣誉：或许这些荣誉只属于过去，我们更需要关心的是现在和未来会怎样</p></blockquote><p>让人最想移民的国家全球排名第一<br>全球最具竞争力国家排名第一<br>最适应亚洲人士居住的地方全球排名第一<br>城市基础设施建设全球排名第一<br>全球化程度最高的城市排名第一</p><p>其他方面：<a href="http://www.visitsingapore.com.cn/travel-guide-tips/about-singapore/" target="_blank" rel="noopener">http://www.visitsingapore.com.cn/travel-guide-tips/about-singapore/</a></p><h2 id="旅游出入境"><a href="#旅游出入境" class="headerlink" title="旅游出入境"></a>旅游出入境</h2><blockquote><p>新加坡 5 件套</p></blockquote><ul><li>打疫苗</li><li>打 HPV</li><li>开账户</li><li>买保险</li><li>看学校</li></ul><blockquote><p>签证</p></blockquote><p>中国公民去新加坡须提前申请有效签证，不可以落地签。</p><p>中国公民申请的新加坡旅游 / 商务签证为电子签证（e-Visa），在获得签证后，建议上网打印多份有效签证以防遗失。签证费为每人 SG$30。</p><p>新加坡签证可多次入境，有效期分别有 35 天 / 62 天 / 2 年，由签证官根据申请人资料而定。逗留时间则由入境官决定，通常为 14-30 天。从 2015 年 6 月 1 日起新加坡将给予符合条件的中国公民有效期长达 10 年的多次入境签证。</p><p><a href="http://www.visitsingapore.com.cn/travel-guide-tips/travelling-to-singapore/" target="_blank" rel="noopener">http://www.visitsingapore.com.cn/travel-guide-tips/travelling-to-singapore/</a></p><blockquote><p>申请途径 How to Apply</p></blockquote><p>2014 年 12 月 8 日起大使馆及各领事馆停止接收签证申请，可登录新加坡外交部官网，查询中国国内官方指定的签证机构，办理新加坡签证。</p><blockquote><p>所需资料 Required Information</p></blockquote><ol><li>个人信息表（登录新加坡外交部官网下载表格，链接：<a href="http://www.mfa.gov.sg）" target="_blank" rel="noopener">www.mfa.gov.sg）</a></li><li>户口本（原件或扫描电子版，户主 + 个人页复印件）</li><li>身份证（原件或正反面扫描电子版，正反面复印件）</li><li>护照（原件或个人页扫描电子版，个人页复印件，有效期 6 个月以上）</li><li>2 张 2 寸白底免冠照片</li><li>在职证明原件或相关职业证书</li></ol><blockquote><p>出入境</p></blockquote><p>从 2018 年 10 月 4 日起，新加坡纸质入境卡（人称 “白卡”）即将走入历史！取而代之的是电子化入境卡。</p><p>访客可通过移民关卡局官方网站 <a href="https://www.ica.gov.sg/" target="_blank" rel="noopener">https://www.ica.gov.sg/</a> 或下载手机应用程序填写资料。通过手机填写资料还有自动储存功能，以方便下一次入境时使用。而与家人或小组团体同游新加坡的人，能够以团体方式提交入境资料。</p><p>离境前别忘了退税，在附有 “退税” 标志的场所消费满 100 新币以上，即可退回 7% 的商品及服务税，退税时需出示购物发票或收据。具体的退税要求，可咨询工作人员。</p><blockquote><p>其它注意事项</p></blockquote><p>电源插座：新加坡使用的标准电流是 220-240 伏特交流电（50 赫兹），在这里，您可以使用三眼电源插座。</p><p><a href="http://www.visitsingapore.com.cn/travel-guide-tips/" target="_blank" rel="noopener">http://www.visitsingapore.com.cn/travel-guide-tips/</a></p><p><img src="https://raw.githubusercontent.com/wsgzao/storage-public/master/img/20190802161219.png" alt=""></p><h2 id="新加坡工作准证"><a href="#新加坡工作准证" class="headerlink" title="新加坡工作准证"></a>新加坡工作准证</h2><blockquote><p>关于工作准证的最新信息请以新加坡人力部 (MOM) 发布的为准，比如 2020 年 EP 薪资要求就上升至 3900，未来金融 EP 直接上 5000</p></blockquote><p><a href="https://www.mom.gov.sg/" target="_blank" rel="noopener">https://www.mom.gov.sg/</a></p><p>在新加坡工作，新加坡人力部 Ministry Of Manpower (MOM) 是最常打交道的政府部门，工作准证不仅是由人力部批准和颁发所有文件提交最终也是到达人力部</p><p>注意：所有提交给 MOM 的资料原件，都需要在入境的时候随身携带。以便在去人力部办卡的时候，让长官核实和查阅。</p><ol><li>新版卡片上将不再印刷准证的到期日期，新版卡片会印上二维码（QR Code），下载 SGWorkPass 的手机 APP 后，可以扫码查看持卡人的职务、证件是否有效等信息</li><li>如果过海关或签合约等需要核对卡片截止日期时，不再可以只看卡面信息，还需要扫码或在线上核对截止日期等，建议保存 SGWorkPass 截图至手机中以防万一</li></ol><p><img src="https://raw.githubusercontent.com/wsgzao/storage-public/master/img/20190802161307.png" alt=""><br><img src="https://raw.githubusercontent.com/wsgzao/storage-public/master/img/20200922115846.png" alt=""></p><p><a href="https://docs.qq.com/sheet/DeVh5ZEhKWnhCTldK" target="_blank" rel="noopener">如果发现表有错误请点击链接申请编辑更新，谢谢</a></p><h3 id="Work-Permit-WP"><a href="#Work-Permit-WP" class="headerlink" title="Work Permit (WP)"></a>Work Permit (WP)</h3><p>WP 是人力部设置的给外国低水准员工提供的工作准证。</p><p>对申请者的要求：薪水和学历：无要求<br>年龄：马来西亚人（18-58 周岁），非马来西亚人（18-50 周岁）；<br>对公司的要求：需要为其购买保额至少 15000 新币的保险；缴纳 5000 新币担保金<br>注意事项：<br>公司需要先为雇员申请好 WP 并办理保险，才可以持 WP 准证进入新加坡。在申请的状态中，本人不可以进入新加坡。</p><h3 id="S-PASS-SP"><a href="#S-PASS-SP" class="headerlink" title="S PASS (SP)"></a>S PASS (SP)</h3><p>SP 是人力部设置的给外国中级技术水准雇员提供的工作准证。</p><p>对申请者的要求：学历：大专，本科，或者技术资质认证（需要至少一年全职学习获得的技术认证）；<br>工作年限：虽然没有明文规定最少需要多少年的工作经验，但工作经验会作为一个审核标准；<br>对公司的要求：所付起薪 2200 新币；</p><p>注意事项：<br>也有公司人头配额限制：服务行业 SP 人数不可超过总员工的 15%，其它行业是 20%。<br>你在申请之前需要确保学历在 Dataflow，学信网及中国学位与研究生教育信息网上可以查到。另外，针对不同的行业，也有可能需要提交相关的专业证明。</p><h3 id="Employment-Pass（EP）"><a href="#Employment-Pass（EP）" class="headerlink" title="Employment Pass（EP）"></a>Employment Pass（EP）</h3><p>EP 是人力部设置的给外国专业人员（管理层，主管或专业职位）提供的工作准证. 是工作准证中级别最高的。</p><p>对申请者的要求：<br>年轻的申请者需拥有优秀院校的毕业证书，且达到 3600 的雇佣薪水以及拥有相关专业经验才可以申请。<br>至于年长的申请人，则必须拥有更高的薪水以及相应工作经验和工作质量。</p><p>对雇主的要求：<br>所付起薪 3600 新币</p><p>注意事项：<br>和申请 SP 一样，在申请之前需要确保学历在 Dataflow，学信网及中国学位与研究生教育信息网上可以查到。另外，针对不同的行业，也有可能需要提交相关的专业证明。<br>根据对应的准证类型，提交人力部 (MOM) 所要求的材料</p><ul><li>有效的护照信息</li><li>必要的技能证书</li><li>有效的毕业证</li></ul><p>2018 年 1 月 1 日起两件重要变化</p><ul><li>EP 准证持有人月薪至少 6000 新币以上可以给配偶和孩子申请相关准证(DP)</li><li>EP 准证持有人月薪至少 12000 新币以上可以申请父母长期探访准证（LTVP)</li></ul><h2 id="家庭成员准证"><a href="#家庭成员准证" class="headerlink" title="家庭成员准证"></a>家庭成员准证</h2><h3 id="Dependant‘s-Pass-家属准证（DP）"><a href="#Dependant‘s-Pass-家属准证（DP）" class="headerlink" title="Dependant‘s Pass 家属准证（DP）"></a>Dependant‘s Pass 家属准证（DP）</h3><p>家属准证，在新加坡工作或经商，并持有 EP SP 或 Enptrpass 的人士，可为自己的配偶及 21 岁以下小孩申请的一种准证。持家属准证的小孩，可直接入学新加坡政府中小学。</p><p>薪水：担保人固定月薪薪水需达到 5,000 新币以上。（2018 年 1 月 1 日起至少达到 6000 新币以上）。</p><p>工作：EP 或创业准证家属，可通过公司向人力部申请新加坡工作的凭证 LOC（Letter of consent），批准后，可直接工作（不占用公司配额）。SP 家属准证，需申请工作准证后才能工作。家属准证（DP）持有人申请到工作准证（EP 或 SP）后需取消 DP，SP 家属取得的工作准证有效期与 SP 持有人准证有效期相关。</p><h3 id="Long-Term-Visit-Pass-长期探访准证（LTVP）"><a href="#Long-Term-Visit-Pass-长期探访准证（LTVP）" class="headerlink" title="Long Term Visit Pass 长期探访准证（LTVP）"></a>Long Term Visit Pass 长期探访准证（LTVP）</h3><p>长期探访准证，是新加坡政府颁发的一种可以在新加坡长期居住的准证，期限从半年到十年不等。其中新加坡公民的配偶又可以申请获得 LTVP+。目前的审批部门有两个，一个是 ICA 移民厅，一个是 MOM 人力部。</p><p>需要去移民厅申请的：</p><ol><li>新加坡公民的配偶<br>2.PR 的配偶</li><li>新加坡公民 / PR 未满 21 周岁的小孩</li><li>新加坡公民 / 21 周岁以上 PR 的父母</li><li>寻求在新加坡工作的有关高校毕业生</li><li>小孩 / 孙辈在新加坡持学生准证读书的母亲或外祖母</li><li>寻求准许在新加坡分娩者</li></ol><p>新加坡移民局网址<br><a href="https://www.ica.gov.sg/" target="_blank" rel="noopener">https://www.ica.gov.sg/</a></p><p>需要去人力部申请的：</p><ol><li>EP/SP 准证持有者的配偶（2018 年 1 月 1 日起至少 6000 新币）</li><li>EP/SP 准证持有者未满 21 周岁的未婚残疾子女（2018 年 1 月 1 日起至少 6000 新币）</li><li>EP/SP 准证持有者未满 21 周岁的未婚继子女（2018 年 1 月 1 日起至少 6000 新币）</li><li>EP/SP 准证持有者的父母（2018 年 1 月 1 日起至少 12000 新币）</li><li>Entrepass（创业准证）的父母</li></ol><p>新加坡人力部网址：<br><a href="https://www.mom.gov.sg/" target="_blank" rel="noopener">https://www.mom.gov.sg/</a></p><h2 id="新加坡手机通讯指南"><a href="#新加坡手机通讯指南" class="headerlink" title="新加坡手机通讯指南"></a>新加坡手机通讯指南</h2><p>国内的手机大部分都可以在新加坡直接换卡使用，除非你的手机是定制版本，由于网络制式的区别，无法使用新加坡网络。</p><blockquote><p>小贴士：建议使用全网通手机，去国外任何地方都可以直接换卡使用。</p></blockquote><p>运营商：新电信（Singtel）、星河（Starhub）和 M1（Mobile One）</p><p>在新加坡机场、邮局、7-11 便利店和代理商都可以购买和充值电话卡，记得一定要带上护照，新加坡的手机卡采用实名制。推荐大家下载所用运营商的 App，查询和购买话费、流量等。</p><blockquote><p>Zero1: Get Ready For Unlimited Data | Plans</p></blockquote><p>我自己办理的是 Zero1 的 9.9 新币 / 月无限流量套餐，背后合作运营商是 Singtel，质量靠谱</p><p>详情请参考官网：<a href="https://zero1.sg/" target="_blank" rel="noopener">https://zero1.sg/</a></p><ol><li>新加坡支持携号转网但仅限于 post-paid，pre-paid 是不支持的</li><li>不要过分追求价格便宜和大流量，信号稳定流量够用对工作和生活更加重要</li></ol><h2 id="新加坡交通指南"><a href="#新加坡交通指南" class="headerlink" title="新加坡交通指南"></a>新加坡交通指南</h2><p>新加坡主要交通出行方式：地铁（MRT）、轻轨（LRT）、巴士（Bus）和德士（Taxi）。</p><p>其中地铁（MRT）是新加坡最便捷的交通工具，也是日常最佳的出行方式。目前主要的运营线中，南北运营线以 “NS” 红线标明，东西运营线以 “EW” 绿线标明，东北运营线以 “NE” 紫线标明，环线以 “CC” 黄线标明，市区运营线以 “DT” 蓝线。</p><p><img src="https://www.lta.gov.sg/content/ltagov/en/getting_around/public_transport/rail_network/_jcr_content/par/textimage_967171583/image.img.png/1595500087101.png" alt=""></p><p>新加坡地铁图</p><p><a href="https://www.lta.gov.sg/content/ltagov/en/getting_around/public_transport/rail_network.html" target="_blank" rel="noopener">https://www.lta.gov.sg/content/ltagov/en/getting_around/public_transport/rail_network.html</a></p><p>新加坡地铁和巴士车 (站) 内规定</p><ol><li>不可吃喝、吸烟、携带榴莲、大声喧哗和带宠物 </li><li>Bus 不报站、上下车需要刷卡</li></ol><p>温馨提示</p><ol><li>地铁和巴士上冷气很足，建议携带薄外套</li><li>在 20 分钟内，地铁和巴士之间转换，车资有优惠</li><li>在地铁或者商场等使用扶梯时，左侧是站立侧，右侧是快速通道</li></ol><h2 id="新加坡房屋指南"><a href="#新加坡房屋指南" class="headerlink" title="新加坡房屋指南"></a>新加坡房屋指南</h2><blockquote><p>组屋(HDB)</p></blockquote><p>新加坡的“组屋”，全称为组合房屋。由新加坡建屋发展局（HDB）不以盈利为目的承担建筑的楼房，为大部分新加坡人（80%）的住所。</p><p>组屋一般分为三房式、四房式和五房式。三房式指一厅两房，使用面积约 60 平方米；四房式是一厅三房，使用面积约 90 平方米；五房式是两厅三房，使用面积大致在 110 平方米。</p><p>组屋的区分都是按照地区名 + 数字，例如：PasirRis Block 186（巴西立大牌 186）、YishunBlock 210（义顺大牌 210）等。</p><p>屋内客厅，厨房，卫生间都是公用设施，一般会配备冰箱，洗衣机，空调或者风扇。</p><blockquote><p>私人公寓(Condo)</p></blockquote><p>公寓，常见两房式或三房式，相当于国内的高档成熟社区，内有免费游泳池、健身房，BBQ 等公共设施，住宿环境相对较好，价格也相对高一些；大部分的 condo 房间都有主人房与非主人房之分，主人房有自己独立的洗手间和相对宽敞的卧室，当然价格也比非主人房高 200-300 / 月(非主人房平均价格<br>S$1,000-1,500 / 间 / 月)</p><blockquote><p>排屋(Terrace)</p></blockquote><p>独门不独栋的联排别墅，此类出租房源相对较少，住宿环境、价格与房子位置、条件有相当大的关系。</p><blockquote><p>独栋别墅(Landedproperty)</p></blockquote><p>少见于房间出租。</p><h2 id="新加坡租房"><a href="#新加坡租房" class="headerlink" title="新加坡租房"></a>新加坡租房</h2><blockquote><p>如果英语不是太差，不推荐狮城 BBS 或者微博租房，如果你有认识的新加坡房产中介自然是最佳选择</p></blockquote><p>PropertyGuru - <a href="http://www.propertyguru.com.sg/" target="_blank" rel="noopener">http://www.propertyguru.com.sg/</a></p><p>SRX - <a href="https://www.srx.com.sg/" target="_blank" rel="noopener">https://www.srx.com.sg/</a></p><p>新加坡本地发布平台，房源多。使用下来感觉 PropertyGuru 和 SRX 信息发布是最多的，信息筛选条件多，容易搜索到希望的房源。多为中介发布，有中介费。</p><p>我移除了 Nestia 和 99.co 因为根据新加坡房地产中介的建议他们只会在流量头部站点积极更新，其它站点基本疏于维护，租房房源一般 3 周以上就可能不用看已经租出去了。</p><p><strong> 租房费用 </strong></p><p>新型组屋 (近 10 年内建成的) 相对条件会好很多 (平均价格 S$1000-1200 / 间)</p><ul><li>单人单间：500-1000 新币</li><li>二人间：350-550 新币 / 人</li><li>四人间：270-350 新币 / 人</li></ul><p>如果是男女朋友或者夫妻家庭为单位，价格以新币计算就会比较高了</p><ul><li>租屋主人房: 1000-1500</li><li>组屋整租: 2500-3500</li><li>公寓 1 房整租: 2000-3000</li><li>公寓 2 房以上: 适合高收入家庭</li></ul><p><strong> 小贴士 </strong></p><ol><li>新加坡政府规定租住的房子必须要能在建屋局上注册。正常情况下，注册要求至少住 6 个月。如果不能注册，就是不合法的房屋。</li><li>如果退租，一定要提前一月声明，以防押金不退。</li><li>仔细看合同，仔细看合同，仔细看合同。</li></ol><blockquote><p>房间类型主要关注主卧和普通房，当然也可以直接整租</p></blockquote><p>主卧（Master Room）：房子里最大的那个房间，配有独立卫生间</p><p>普通房（Common Room)： 房间比主卧小，通常需要和别人合用洗手间</p><p>佣人房（Maid Room）：房间比较小，一般只能放一张单人床和一个衣柜，有些没有窗</p><p>避坑中介，可能是最全的新加坡租房合同条款解读<br><a href="https://www.shicheng.news/show/728651" target="_blank" rel="noopener">https://www.shicheng.news/show/728651</a></p><ul><li>“遇上黑心房东，上小额法庭”</li><li>“在新加坡租房，退房时房东让我赔偿 16,000 新币”</li><li>“新加坡租房，房东不退押金怎么办”</li><li>“房东扣 2 个月押金不退，我反被告上法庭赔偿”</li><li>“合约中途要求换房客，房东不同意怎么办”</li><li>“租约一年不能旅履行，可以提前终止么”</li></ul><p>地表最强新加坡水电网实用指南，get 一下<br><a href="https://www.shicheng.news/show/837984" target="_blank" rel="noopener">https://www.shicheng.news/show/837984</a></p><p>在新加坡租房，有哪些经验可以分享？<br><a href="https://www.zhihu.com/question/22430961" target="_blank" rel="noopener">https://www.zhihu.com/question/22430961</a></p><h2 id="新加坡水电网常见问题"><a href="#新加坡水电网常见问题" class="headerlink" title="新加坡水电网常见问题"></a>新加坡水电网常见问题</h2><p>水电费用估算，以 SP Utilities 为例</p><ul><li>租屋：平均每人每月 50 新币左右</li><li>公寓：平均每人每月 100 新币左右</li></ul><p><a href="https://www.spgroup.com.sg/wcm/connect/spgrp/54a21e82-4ab6-47b4-8dee-39ab6a746c13/%5BInfo%5D+Understanding+Your+Utilities+Bill.pdf?MOD=AJPERES" target="_blank" rel="noopener">Understanding Your Utilities Bill</a></p><p>网络：推荐 Singtel，更加稳定可靠</p><ol><li>主要 Singtel 和 StarHub，如果不想绑定 2 年合约限制可以考虑接手他人的转让合约</li><li>以 1Gbps 为例，合约价格基本在 45-50 新币每月左右</li></ol><p>银行缴费方法：以缴纳 Keppel Electric 为例，如果是 SP Services Limited 搜索 SP 关键词就可以看到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DBS：</span><br><span class="line">1a. Select “Pay” -&gt; “Pay Bills” from top ribbon</span><br><span class="line">1b. Select “Billing Organization not in my pre-arranged list” from “Select Payment Option”</span><br><span class="line">1c. Select “Keppel Electric (Residents)” under Billing Organization list</span><br><span class="line">Click Next</span><br><span class="line">2a. Input your 10-digits account number into the “Bill Reference” field</span><br><span class="line">2b. Input the payable amount in to the “Payment Amount” field</span><br><span class="line">Click Next</span><br><span class="line">3. Follow through your 2FA and complete the payment</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">UOB：</span><br><span class="line">1a. Select “Pay and Transfer” -&gt; “Pay Bills” from left ribbon</span><br><span class="line">1b. Follow through your 2FA process</span><br><span class="line">1c. If “Keppel Electric (Residents)” is not found in Billing organization list, click “Add new payee here.”</span><br><span class="line">2a. Select “Keppel Electric (Residents)” under Billing Organization list</span><br><span class="line">2b. Input your 10-digits account number into the “Bill Reference Number” field</span><br><span class="line">2c. Click Submit</span><br><span class="line">3a. Follow through your 2FA and complete the payment</span><br><span class="line">3b. Select which bank account to be deducted from</span><br><span class="line">3c. Click Continue and Confirm</span><br></pre></td></tr></table></figure><h3 id="Singtel-路由器设置方法"><a href="#Singtel-路由器设置方法" class="headerlink" title="Singtel 路由器设置方法"></a>Singtel 路由器设置方法</h3><p>Singtel 路由器简介</p><ol><li>Huawei HG8240T5 Optical Network Router (ONR) ，就是文章里 feiy 提到的 Singtel 光纤 + 路由硬件<br><a href="https://www.singtel.com/personal/support/broadband/routers-ont" target="_blank" rel="noopener">https://www.singtel.com/personal/support/broadband/routers-ont</a></li><li>Singtel-issued AC Plus router，这个大家伙算是路由器，但真的登录上去又会发现有很多阉割限制<br><a href="https://www.singtel.com/personal/support/broadband/routers-ont/arcadyan-ac-plus-guide" target="_blank" rel="noopener">https://www.singtel.com/personal/support/broadband/routers-ont/arcadyan-ac-plus-guide</a></li><li>一般首次安装 Singtel 工作人员会上门配置，如果涉及 resale 转让或者搬家建议和 Singtel 官方客服确认清楚细节流程，这样可以有效减少不必要的麻烦</li></ol><p>Singtel 路由器常见问题</p><ol><li>路由器到底怎么登录进去？官网留了个坑就是 feiy 提到的需要移除网线断电重启才能真正进入路由器后台，无需密码，<a href="http://192.168.1.254/" target="_blank" rel="noopener">http://192.168.1.254/</a><br><a href="https://www.singtel.com/personal/support/broadband/routers-ont/arcadyan-ac-plus-guide/change-wireless-settings" target="_blank" rel="noopener">https://www.singtel.com/personal/support/broadband/routers-ont/arcadyan-ac-plus-guide/change-wireless-settings</a></li><li>Band Steering 自动频段切换要不要禁用，禁用的好处是可以分别独立开启 2.4G 和 5G 并重新命名不同名字的 SSID，但我还没有详细的评测数据，目前体验下来暂未发现问题，欢迎补充</li><li>如果是游戏用户或者对网速要求较高，老老实实用有线网络会比较合适，充分榨干 1Gbps</li></ol><p>Singtel 路由器配置过程小结</p><ol><li>我最初的需求是计划修改 SSID，默认密码，独立设置 2.4G 和 5G，交换机和路由器 192.168.1.1/24 网段分离避免 192.168.1.254 地址冲突导致无法进入路由器后台的尴尬</li><li>最后不做任何配置修改，感觉也没必要折腾，但如果我未来觉得有其它问题还是会再回来调优的</li></ol><p><a href="https://feiyang233.club/post/singtel/" target="_blank" rel="noopener">singtel 路由器踩坑经历</a></p><h2 id="在新加坡买房与中国有何不同？"><a href="#在新加坡买房与中国有何不同？" class="headerlink" title="在新加坡买房与中国有何不同？"></a>在新加坡买房与中国有何不同？</h2><blockquote><p>无论在中国还是新加坡买房前后都记得关注下政策上的变化，新加坡买房的流程很简单，首付 = 房屋价格 + 税 + 中介费 - 贷款额度。</p></blockquote><p><img src="https://raw.githubusercontent.com/wsgzao/storage-public/master/img/20200109111339.png" alt=""></p><p><img src="https://raw.githubusercontent.com/wsgzao/storage-public/master/img/20190802162119.png" alt=""></p><p>① 面积</p><p>说到面积，首先让中国买家摸不着头脑的，就是面积单位的换算。中国买家习惯用平方米（也称平方公尺）计算面积，来新加坡选购房子时听到的都是平方英尺，往往脑子得转一圈才知道个大概。1 平方米约等于 10.8 平方英尺。100 平方米就是 1080 平方英尺。</p><p>除了计算单位不同，“面积”一词在两地公寓市场上的定义也不一样。在中国，面积指的是建筑面积；新加坡算的是实用面积。建筑面积的算法比较繁琐。简单来讲，是根据各套房屋的套内建筑面积，求得各套房屋分摊所得的共有建筑分摊面积，比如门口的面积、楼梯等，都按比例算进每一个单位的建筑面积。</p><p>所以，同一个公寓单位，其建筑面积一定会大于实用面积，通常后者比前者少 20％左右。在中国买一个 “100 平方米” 的单位，和在新加坡买一个“1080 平方英尺”（相当于 100 平方米）相比，后者明显感觉宽敞一点，就是这个道理。</p><p>② 地契</p><p>中国的房产地契通常是 70 年左右，而新加坡的则有 99 年、999 年和永久地契之分。新加坡的房产因为地契年限长，颇受外籍人士青睐。其中，永久地契的房产一般要比 99 年地契的贵 20％。尽管如此，永久地契一直很抢手，也深受中国买家欢迎，因为买家看准这块市场的保值与增值。</p><p>这其中很大程度上因为新加坡的地皮比较少，想要建新楼必须拆掉现有的建筑。不像中国地皮比较多，还有可开发的地段。新加坡永久地契的地段价值比较高，所以如果进行集体出售、或是被政府征用的话，永久地契房地产的房主会可得到较高的补偿。</p><p>物以稀为贵，永久地契房产越是少见，也就越炙手可热。此外，永久地契对中国买家还有另一大吸引力，那就是永久地契满足了 “总觉得要给后代留下点什么” 的传统华人心愿。所以说，新加坡房产能如此吸引外国买家，与地契久脱不了关系。</p><p>③ 贷款</p><p>在新加坡首次购房的买家，可向金融机构贷款的房贷比率顶限为 80％，外籍人士一般则最高 70％。在中国，外国人一般不能向本土中国银行贷款，只能通过外资银行或中国银行境外支行。</p><p>原本新加坡和中国在房贷比率顶限方面有很大差别。不过两国都不断调整房贷比率顶限，因此两国的房贷比率顶限差别已缩小。</p><p>④ 税收</p><p>在新加坡，如果在一定期限里卖掉公寓，卖家需要上缴印花税。在 2011 年 1 月 14 日过后买房的购屋者，只要在四年内卖房屋都需要支付卖方印花税，第一、二、三和四年卖掉房产的税率分别是 16％、12％、8％和 4％。此后就不必上缴卖家印花税。</p><p>在中国，除了印花税外，还需要上缴增值税。为了给中国房地产市场降温，中国政府在 2013 年实施 20％的房地产买卖增值税。所谓增值税，就是对卖家卖房所得的利润征收的税。譬如，150 万人民币买的房子在几年后以 200 万人民币卖掉，卖家所赚得的 50 万就将需要以一定的比率交税。</p><p>⑤ 车位</p><p>在中国购买中高档住宅，需要另外购买车位。而在新加坡，买家不需要另付车位费，发展商一般会为每个新单位赠送一个车位。可不能小瞧这个车位费。近年来，车位费在中国节节攀升，动辄十几、二十万人民币，是一笔不小的开销。</p><p>新加坡私人公寓不收车位费，而是将停车场的修建和维护等费用，包括在每月的项目管理费之中。管理费除了车库，还包括游泳池、健身房等设施，每月一般是几百元新元。如果每月的管理费是 300 元新元（约 1400 元人民币），一年就是 1 万 7000 元人民币，15 年刚好是 25 万 5000 元人民币。总体来讲，这要比中国的车位 “划算” 得多。</p><blockquote><p>一般来新加坡时间比较早比如本科前，然后工作半年能顺利拿到 PR，夫妻都是 PR 且满 3 年那么组屋 HDB 是一个非常高性价的首选，如果名下海外有房产或家庭月收入超过 14000 那么就只好选择私人公寓 Condo</p></blockquote><p>政府组屋 (Housing Development Board Flats 简称为 HDB)</p><p>执行共管公寓 (Executive Condominiums 简称为 EC) </p><p>私人公寓 (Private Condominium 简称 Condo)</p><p>购买私人住宅 vs 执行共管公寓 vs 政府组屋<br><a href="https://xinjiapoloupan.cn/sirengongyu-vs-zhuwu/" target="_blank" rel="noopener">https://xinjiapoloupan.cn/sirengongyu-vs-zhuwu/</a></p><p>新加坡买房必看：门道竟然这么多<br><a href="https://www.luobodianping.com/copy-of-1" target="_blank" rel="noopener">https://www.luobodianping.com/copy-of-1</a></p><h2 id="新加坡医疗指南"><a href="#新加坡医疗指南" class="headerlink" title="新加坡医疗指南"></a>新加坡医疗指南</h2><p>新加坡是一个热带国家，从国内刚过去有可能因水土不服引起的伤风、感冒、皮肤敏感或蚊虫叮咬等。出行之前可以带一些三九胃泰、牛黄解毒等日常药品之类的药品，防范于未然是最好的。</p><p>看医生：在新加坡持有工作签证，所在的公司会按照新加坡劳工部规定给每位员工会购买医疗保险或者费用报销。</p><p>医疗保险：一般是三种模式</p><ol><li>直接去合作门诊，提供公司信息，看病不用自己拿钱。</li><li>直接去合作门诊，提供公司信息，看病前给门诊 5 新币（每个公司不一样），其它的费用不用自己拿。</li><li>直接去合作门诊，自己先付产生的费用，然后去公司报销。意外伤害险等（视公司合同规定）。</li></ol><p><img src="https://raw.githubusercontent.com/wsgzao/storage-public/master/img/20191219193504.png" alt=""></p><p><a href="https://toutiaosg.com/%E6%96%B0%E5%8A%A0%E5%9D%A1%E5%8C%BB%E7%96%97%E5%85%A8%E7%90%83%E7%AC%AC%E4%B8%89%EF%BC%8C%E5%87%AD%E4%BB%80%E4%B9%88%EF%BC%9F/" target="_blank" rel="noopener">新加坡医疗全球第三，凭什么？</a></p><h2 id="公立和私立医疗服务"><a href="#公立和私立医疗服务" class="headerlink" title="公立和私立医疗服务"></a>公立和私立医疗服务</h2><blockquote><p>中国人在新加坡看病就好比外国人在中国看病一样不是很方便，价格不便宜，小病也有可能看成大病</p></blockquote><p>新加坡的医疗服务体系以优质高效著称，选择面广, 综合医院，专科医院，私人诊所遍布全国, 随处可见；不仅为全新加坡的公民，永久居民，外籍工作人士提供服务，同时周边国家的高端人群, 包括东南亚、亚洲、欧洲、中东阿拉伯等国家的病患都会将新加坡的国际医疗服务作为他们的首选。</p><p>新加坡的公立医疗机构和私立医疗机构在整个医疗系统中扮演着不同的角色。基础医疗门诊 80% 由私立医疗机构 / 家庭医生诊所提供，另外 20% 则是由政府综合诊疗所提供；而综合医疗，包括各类科室的住院，专科和 24 小时急诊主要由公立医疗机构提供，占 80% 的比例，剩下的 20% 由私立医疗机构提供。由于政府的有效规划和管控，公立医院和私立医院相辅相成, 缺一不可。</p><p>在公立医疗机构就诊一般都需要提前预约, 候诊时间较长, 也不能自由选择医生。由于那里的医生要面对更多的患者, 为每个患者服务的时间相对较短；而私立医疗机构由于患者相对较少, 不需要预约, 候诊时间较短，还可以自己选择医生，医生也能与患者作更多的交流, 提供更细致的服务，收费就相应高一些。</p><p>一些新加坡的公立医院也为自费病人提供高端医疗服务, 设有针对性的部门和项目, 如体检，会诊，专科治疗等。基础的检查和服务, 公立医院比私立医院收费较低；对于外籍人士和高端的服务项目, 公立和私立医院的收费差异不大。</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzIwMTQxODUxNw==&amp;mid=2650871863&amp;idx=3&amp;sn=b9536c73a1b6a0e0ed02019598d75c35&amp;chksm=8d1b8a4dba6c035b898a133fdf30ec613eb6826a0f4a66d5befe6364a04e24fb6bde9a981ce7&amp;scene=21" target="_blank" rel="noopener">8 家新加坡著名的公立和私立医院</a></p><h2 id="货币兑换和汇款"><a href="#货币兑换和汇款" class="headerlink" title="货币兑换和汇款"></a>货币兑换和汇款</h2><blockquote><p>不要贪图小便宜走非正规渠道，得不偿失</p></blockquote><p>新加坡实行货币开放政策，货币兑换中心随处可见，尤其是在牛车水 (China Town) 附近。如有汇款需求到国内，新加坡老牌的有长城和汉生，互联网后起之秀有熊猫速汇 Pandaremit</p><p>小贴士：第一次汇钱到国内，当填写汇款单据的时候一定要知道对方银行卡是在 <strong> 省 </strong> 市 ** 银行支行开户的(很重要)。</p><h2 id="法律法规"><a href="#法律法规" class="headerlink" title="法律法规"></a>法律法规</h2><p>新加坡向来是给世人展示优美环境，井然秩序，舒适安全的名片，然而这些美好的展现离不开新加坡法律制度的约束和规范。Singaporeis a“fine”country 完整的诠释了这两方面。所以在新加坡生活，你需要注意以下细节：</p><ol><li>自动排队：公共场合最经常听到的一句话就是 please queue！</li><li>着装：不同场合穿不同衣服, 建议每天换衣服。</li><li>公共习惯：乘坐公共交通或者在公共场合用餐时, 切忌大声喧哗, 不然你一样会被当做异类奥! 而且记得再饿也要撑到下车再用餐。</li><li>言论：新加坡是多文化和宗教融合的国家, 公共场合不要发表敏感政治言论或者宗教话题, 这也体现互相尊重。</li><li>不当行为：竖中指可能会被当做种族歧视处理的</li><li>如厕：来也匆匆, 去也冲冲。如若不然请准备 500 新币吧。</li><li>口香糖：公共场所不允许嚼口香糖, 不可以随意买卖, 允许带少量入境, 正是这个奇葩的规定维护了公共环境的整洁。</li><li>吸烟：新加坡公共场所绝对禁烟。如若吸烟不幸被抓到, 恭喜你一个月的工资 (高达 2000 新币) 为国家做贡献了!</li><li>垃圾：乱丢垃圾初犯者将处高达 1000 新币罚款, 再犯者将罚款额提高至 2000 新币以及在劳改法令下受罚。</li><li>交通规则：闯红灯, 随便乱穿马路这些不多啰嗦。违反的是规则, 伤害的是人身安全, 因为小编也感觉马路上的车如同闪电般行驶。</li><li>不可非法聚会和使用暴力</li></ol><p>以上内容是提醒大家在生活细节方面应遵守的规则, 但有些行为未必就可以罚款结案的, 比如: 签证到期后逾期逗留、抢劫、公共场所涂鸦、纵火、携带毒品等这些可都是在鞭刑的定罪范围内的。</p><p><strong> 最后郑重的提醒各位：</strong> 在机场不要发扬助人为乐精神帮陌生人携带物品, 因为很有可能你同时把生命交给了别人(运输毒品和贩毒同罪)。</p><h2 id="工作准证遗失如何处理"><a href="#工作准证遗失如何处理" class="headerlink" title="工作准证遗失如何处理"></a>工作准证遗失如何处理</h2><ol><li>发现丢失后立即携带护照或者工作准证的复印件到任何一间警察局报案，记得保存报案记录原件。</li><li>通知雇主公司 HR, 让其在 7 天之内在新加坡人力部网上提交补办工作准证的申请。</li><li>费用: 首次补办 100 新币, 第二次是 300 新币(一般在提交申请补办 4 个工作日可去新卡)</li></ol><h2 id="银行卡遗失如何处理"><a href="#银行卡遗失如何处理" class="headerlink" title="银行卡遗失如何处理"></a>银行卡遗失如何处理</h2><ol><li>发现遗失后立即拨打银行客户服务中心热线挂失</li><li>银行客户专员会核对护照和工作准证信息, 然后等待新卡邮寄到住处或者去支行直接领取。</li></ol><p>POSB 用户请拨打 18003396963<br>DBS 用户请拨打 18001111111<br>UOB 用户请拨打 18002222121<br>OCBC 用户请拨打 18003633333</p><h2 id="护照遗失如何处理"><a href="#护照遗失如何处理" class="headerlink" title="护照遗失如何处理"></a>护照遗失如何处理</h2><p>如护照遗失或被盗, 请立即到中国驻新加坡大使馆如实填写《护照遗失陈述表》，提供关于护照遗失或被盗的情况说明, 以及提供报警记录原件及复印件。如护照损毁, 请提交损毁的护照, 以及护照损毁的原因说明。</p><p>具体的更换护照和网上预约等等详细流程请参考大使馆的官网：<a href="http://www.chinaembassy.org.sg/chn/" target="_blank" rel="noopener">http://www.chinaembassy.org.sg/chn/</a></p><p>中国驻新加坡大使馆信息:</p><p>地址: 150 TANGLIN ROAD,SINGAPORE 247969</p><p>领事部：64712117；92971517(仅限紧急领保求助, 不接受证件咨询)</p><p>Email: <a href="mailto:chinaemb_sg@mfa.gov.cn" target="_blank" rel="noopener">chinaemb_sg@mfa.gov.cn</a></p><p>办公时间：周一至周五(节假日除外)</p><p>上午 9:00-11:30</p><h2 id="设定-GIRO-自动缴费"><a href="#设定-GIRO-自动缴费" class="headerlink" title="设定 GIRO 自动缴费"></a>设定 GIRO 自动缴费</h2><p>GIRO （General Interbank Recurring Order） 是一个自动缴款的机制，可以用来自动扣缴以下费用。</p><ul><li>水电费（SP Group）</li><li>三大电信商手机、网络费 SingTel， StarHub， M1 Limited。</li><li>银行信用卡费。</li><li>银行定期定额基金投资。</li><li>健身房会费。</li><li>等等… DBS 支持的完整列表在此： <a href="https://www.dbs.com.sg/personal/deposits/pay-with-ease/local-bill-payments/giro-payee-organisations.page" target="_blank" rel="noopener">GIRO Billing Organisation</a> 。</li></ul><p>DBS 设定的方法是。</p><ol><li>从 <a href="https://www.dbs.com.sg/personal/deposits/pay-with-ease/local-bill-payments/giro-payee-organisations.page" target="_blank" rel="noopener">GIRO Billing Organisation</a> 列表里找到你想使用的服务，确认他指定的参考编号规则。</li><li>从以前的账单或登入会员网站找到你的参考编号。</li><li>登录 iBanking 并根据 <a href="https://www.dbs.com.sg/personal/support/bank-payment-setup-giro-arrangement.html" target="_blank" rel="noopener">Set Up GIRO Arrangement</a> 新增 GIRO。</li></ol><p>其他主要银行的相关说明。</p><ul><li><a href="http://www.ocbc.com/personal-banking/help-and-support/payments-giro.html" target="_blank" rel="noopener">OCBC</a></li><li><a href="https://www.uob.com.sg/corporate/transaction-banking/payables-solutions/interbank-giro.page" target="_blank" rel="noopener">UOB</a></li></ul><p>申请方式应该大同小异，如果没有或不会使用线上申请接口，也可以临柜办理。</p><h2 id="新加坡日常-App-推荐"><a href="#新加坡日常-App-推荐" class="headerlink" title="新加坡日常 App 推荐"></a>新加坡日常 App 推荐</h2><blockquote><p>如果是 Android 记得安装 Google 框架，如果是 iOS 记得调整更改 Apple ID 国家或地区</p></blockquote><p>交通: Grab(类似国内滴滴)、Google Map(谷歌地图)、SG Buses(公交时刻表)</p><p>社交: Facebook、WhatsApp、Twitter、Instagram</p><p>购物: Shopee、Lazada、eBay、Amazon、淘宝国际、京东国际、网易考拉、网易严选、小米有品、拼多多</p><p>娱乐: Youtube(视频必备)、 Golden Village(电影院)、CATHAY (电影院)</p><p>快递: ezShip，小坡岛集运，淘宝直送 / 集运</p><p>微信公众号: </p><ul><li>新加坡眼</li><li>新加坡狮城椰子</li></ul><p>视频 / 音频播客:</p><ul><li><a href="https://www.youtube.com/channel/UClL3IBde8AhRSqGXioa3FiA" target="_blank" rel="noopener">AbbieLu 新加坡</a></li><li><a href="https://www.ximalaya.com/toutiao/5218657/" target="_blank" rel="noopener">俊玮谈新</a></li></ul><p>特别推荐: </p><ul><li><a href="https://zero1.sg/" target="_blank" rel="noopener">Zero1</a>: 9.9 每月无限流量手机卡</li><li><a href="https://originallyus.sg/products/" target="_blank" rel="noopener">SG BusLeh</a>: 个人认为是比 SG Buses 更好用的公交时刻表</li><li><a href="http://refer.eatigo.com/eati17aqf-1v9" target="_blank" rel="noopener">eatigo</a>: 开启新加坡美食 5 折之旅</li><li><a href="https://app.shopback.com/sgp?raf=kxg2ZG" target="_blank" rel="noopener">ShopBack</a>: 类似于国内的购物返现平台</li><li><a href="https://ezbuy.sg/ezShip" target="_blank" rel="noopener">ezShip</a>: 我使用 ezShip 代替小坡岛运送来自中国和美国的产品，价格更优惠</li><li><a href="https://mall.ebuymart.sg/#/pages/invitation-share/invitation-share?_id=5f37cc34031f52034554122c" target="_blank" rel="noopener">EBuyMart</a>: 终于在新加坡有人做了国内盒马 + 百果园的结合体，不再依赖新加坡线下本地超市做到买菜自由</li></ul><p>推荐信息聚合平台:</p><ul><li><a href="https://toutiaosg.com/" target="_blank" rel="noopener">新加坡头条</a>: 聚合了主流的新加坡本地中文站点，用来搜索历史记录比较合适</li><li><a href="https://blog.seedly.sg/" target="_blank" rel="noopener">Seedly</a>: 熟悉新加坡本地的银行金融，保险，买房投资规则</li><li><a href="https://www.moneysmart.sg/" target="_blank" rel="noopener">MONEYSMART</a>: 详细的金融类评测对比报告</li></ul><h2 id="新加坡至其他国家旅游"><a href="#新加坡至其他国家旅游" class="headerlink" title="新加坡至其他国家旅游"></a>新加坡至其他国家旅游</h2><blockquote><p>旅游可以具体向专业旅行社咨询，以政策变化为准</p></blockquote><p><a href="http://cs.mfa.gov.cn/wgrlh/lhqz/cjwdn_660600/t1175681.shtml" target="_blank" rel="noopener">境外中国公民赴香港特区怎么办理？</a></p><ol><li>持中华人民共和国护照，在海外过境香港特区前往中国内地或其他国家（或地区），凭有效护照和联程机票，可免办进入许可并在港停留 7 天。持中华人民共和国护照，自内地经香港特区前往其他国家（或地区），出示联程机票和前往国家或地区的签证，或合法居留证件 (如 “绿卡”) 后，可免办进入许可并在香港特区停留 7 天。 </li><li>如预计在香港特区停留超过 7 天，应事先申请进入许可。中国驻外使领馆可根据申请人情况签发 3 个月一次或两次有效，每次停留不超过 30 天的进入许可。持有外国永久居留证件，并在海外居住不少于 1 年者，可申请两年多次有效进入许可。</li></ol><p><a href="https://mp.weixin.qq.com/s?__biz=MzAxMjA4NzQzNA==&amp;mid=503621899&amp;idx=1&amp;sn=62d66af2463312f4d66adf0a272e71f8&amp;chksm=004730ee3730b9f8b6a0ece62952493af344cce03f3a9fb8504a3e3a9a15777f6e351d285d26&amp;mpshare=1&amp;scene=23&amp;srcid=08022k223Jxs2MD7XXeHCXxT&amp;sharer_sharetime=1564734537933&amp;sharer_shareid=456ba82bbd1a1c9f32e5725824095308%23rd" target="_blank" rel="noopener">新加坡到各国签证办理条例</a></p><h2 id="新加坡父母签证"><a href="#新加坡父母签证" class="headerlink" title="新加坡父母签证"></a>新加坡父母签证</h2><blockquote><p>网上找到的，忘记出处了，如果有错误描述请及时指正</p></blockquote><p>本人 PR，老婆七月份预产期。打算让父母 6 月中旬来。计划步骤如下:<br>1, 先买往返机票（返程可更改的）。<br>=== 对的。<br>2,5 月份申请父母旅游签证。<br>=== 旅游签证可提前一个月内申请，有效期多数 63 天，也有一年，两年，非固定。有效期内入境即可。<br>3, 父母来新后申请延期至 89 天。<br>=== 对的。<br>4, 同时申请 LTVP。<br>=== 也没错。<br>5, 悲剧后申诉。<br>=== 步骤没错。<br>请指点一下按这样做有什么不拖吗？<br>=== 有什么不妥是吧？没什么不妥的，如果觉得自己条件还可以，就可以早点安排申请 LTVP，如果觉得条件比较牵强，可以晚一点入境，晚一点延期，晚一点申请 ltvp，争取在月子后多待一点时间帮你们带孩子。<br>可以现在就申请旅行签证吗?<br>=== 提前一个月内申请，一个月内，内。<br>旅行签证有效期多久? 一年多次吗？<br>=== 上面已经回答了。<br>申请 LTVP 必须人在新加坡吗？<br>=== 是的。必须入境后申请。</p><p><a href="https://www.ica.gov.sg/" target="_blank" rel="noopener">https://www.ica.gov.sg/</a></p><h2 id="新加坡婚礼红包份子钱"><a href="#新加坡婚礼红包份子钱" class="headerlink" title="新加坡婚礼红包份子钱"></a>新加坡婚礼红包份子钱</h2><blockquote><p>婚礼怎么随份子钱，是个讲究活儿。它不仅是人情的体现，也是婚礼平衡开支的一种方式</p></blockquote><p>切记要分清是 “午宴” 还是 “晚宴”，时间是在工作日还是周末。毕竟在不同时段，价格差异很大。</p><p>想知道新加坡各大酒店在工作日、周末或公共假期时的婚礼餐标，可以查看<a href="http://www.weddingangbao.com" target="_blank" rel="noopener">Wedding Ang Bao</a></p><p>这可以通过知道婚礼举办地每桌的费用来推算出最合适的红包金额。计算方式是，每桌的基本费用处以 10，就能得到最低应给红包金额。比如婚宴每桌需要 1000 新币（包括了消费税 7% 和服务税 10%）。每桌 10 位客人。将 1000 除以 10，平均每人需要送红包 100 新币。</p><p>另外，由于红包的价格通常是整数，最好包一些新加坡人认为是比较吉利的数字。礼金金额切忌有 1，3 或 4，因为它被认为是不吉利的。最常见的礼金金额是 100 新币、120 新币、128 新币、150 新币、160 新币。</p><ul><li>红包的行情，是在餐馆还是酒店举行，午宴或晚宴，平日或周末，都不相同<ul><li>CAPELLA，ST.REGIS 等这种超级高大上的酒店一般要给 200-250 新币 / 人</li><li>金沙，香格里拉等酒店则是 160-200 新币 / 人</li><li>希尔顿，圣淘沙的酒店则是 150-200 新币 / 人</li><li>凯悦，泛太平洋酒店则是 120-150 新币</li><li>非酒店的餐馆，一般 100-120 新币 / 人</li><li>如果是自助餐档次的呢，80-100 新币 / 人</li></ul></li><li>红包的数目其实就是按人头计算，常用的计算方式是每桌的基本费用处以 10</li><li>关系特别好的时候，有些朋友也会在最少红包数额的基础上加 100-200 新币哦</li></ul><h2 id="新加坡公民-永久居民-外国人的区别"><a href="#新加坡公民-永久居民-外国人的区别" class="headerlink" title="新加坡公民 / 永久居民 / 外国人的区别"></a>新加坡公民 / 永久居民 / 外国人的区别</h2><blockquote><p>我们大多数人的起点是外国人，这点与国内的户口制度类似，无论是中国还是新加坡始终绕不开买房和教育这两座大山</p></blockquote><p><img src="https://raw.githubusercontent.com/wsgzao/storage-public/master/img/20190802162244.png" alt=""></p><p><a href="https://docs.qq.com/sheet/B80RhZ2ZATLC0ge3Bi2bLYpr2iY5PC1nE3031LWRcK1rTcgj0Z2bvD00bDO63Ie3tz2ovOwW4" target="_blank" rel="noopener">如果发现表有错误请点击链接申请编辑更新，谢谢</a></p><h2 id="EP-申请-PR"><a href="#EP-申请-PR" class="headerlink" title="EP 申请 PR"></a>EP 申请 PR</h2><blockquote><p>在新加坡工作满半年即可申请 PR，不过大概率是被拒的，失败后等待半年继续申请挑战吧</p></blockquote><p>新加坡 PR 查询统计系统，可以查看 PR 申请登记成功或者失败的例子，做个参考<br><a href="http://sgprapp.com/listPage" target="_blank" rel="noopener">http://sgprapp.com/listPage</a></p><p>Becoming a Permanent Resident<br><a href="https://www.ica.gov.sg/apply/PR/apply_PR_who" target="_blank" rel="noopener">https://www.ica.gov.sg/apply/PR/apply_PR_who</a></p><blockquote><p>申请步骤均在网上完成，务必提前准备好申请材料，重点检查 4、6、7、9、10</p></blockquote><ol><li>有效的护照个人信息和官方备注页面，原件与复印件</li><li>EP 或 S Pass 准证原件及复印件</li><li>身份证（如有）</li><li>出生证明或者家庭户口（非英文需要公证书翻译）</li><li>更名证明文件（如有）</li><li>标准护照尺寸照片</li><li>最高学历（成绩单，资格证，会员资质等也可提供）(非英文需要公证书翻译)</li><li>以前雇主的推荐信，说明就业的性质，持续时间以及基本工资（如有）</li><li>过去六个月的工资单</li><li>现任雇主的信函，说明就业日期，过去六个月的每月工资，包括加班和津贴，可以找 HR 准备，要在申请前一个月内开具此信件</li><li>IRAS 同意书，表示同意 ICA 获取和核实与此相关的财务信息</li><li>对于自雇人士，需出示有效商业登记证明书并显示合伙人姓名</li><li>对于自雇人士，与工作有关的职业执照（例如小贩执照，营业执照， 物业代理牌照）</li></ol><blockquote><p>已婚人士还需要这些：</p></blockquote><ol><li>结婚证书（非英文需要公证书翻译）</li><li>关于之前婚姻的死亡证明或离婚证明（如有）</li><li>关于以前婚姻的子女的监护文件（如有）</li><li>配偶的最高教育证书（包括大专学历），成绩单，职业资格证等（非英文需要公证书翻译）</li></ol><blockquote><p>如果配偶一同申请：</p></blockquote><ol><li>配偶的有效旅行证件及有效的入境通行证，护照（资料页）</li><li>配偶的出生证明（非英文需要公证书翻译）</li><li>更名文件（如有）</li><li>配偶的身份证（如适用）</li><li>关于配偶以前的婚姻离婚证明以及孩子的监护文件，或者死亡证明（如有）</li></ol><blockquote><p>如果孩子一起申请：</p></blockquote><ol><li>孩子的护照资料页</li><li>孩子的出生证明，显示孩子和父母的姓名（非英文需要公证书翻译）</li><li>儿童收养文件（如适用）</li><li>儿童改名证明（如适用）</li></ol><p>关于其他的申请条件可以访问移民局网站，查询需要提交的资料。</p><blockquote><p>关于 PR 申请期间搬家修改住址需要更新信息，可以直接 Email ICA</p></blockquote><p>把需要更新的扫描件发给 <a href="mailto:ICA_PR@ica.gov.sg" target="_blank" rel="noopener">ICA_PR@ica.gov.sg</a>，邮件标题可以写”Updates documents for PR application EPR-20XX-PRE-XXXXX“（PR 申请记录号码）。通常会有人工回复的，说是收到了</p><p><a href="mailto:ICA_PR@ica.gov.sg" target="_blank" rel="noopener">ICA_PR@ica.gov.sg</a><br><a href="mailto:ICA_Feedback@ica.gov.sg" target="_blank" rel="noopener">ICA_Feedback@ica.gov.sg</a></p><p>A) Applicant / Sponsor’s full name:</p><p>B) Applicant /Sponsor’s NRIC/FIN :</p><p>C) Application Reference Number (if any):</p><p>D) Your contact number:</p><h2 id="PR-申请之后"><a href="#PR-申请之后" class="headerlink" title="PR 申请之后"></a>PR 申请之后</h2><blockquote><p>感谢顺丰快递疫情期间只用了 3 个工作日就把分散在上海和四川的原件材料安全送达新加坡，真心帮了大忙</p></blockquote><p>如果收到了新加坡永久居民（PR）身份的批准信这封信，那么，恭喜你 ！离新加坡 PR 只差最后一步了！</p><p>现在你需要做的，是按照批准信里面的步骤完善 PR 手续：</p><ol><li>准备你所提交的申请材料的原版文件</li><li>在新加坡移民局网站 (ICA) 预约办理手续的时间</li><li>准时到达，并完成：资料审核（若需）；住址、电话、邮箱等基本信息录入；指纹、虹膜录入；费用支付。</li></ol><p>在 ICA 完善 PR 手续时，需要支付的费用包含：<br>– 单次入境许可证：20 新币<br>– 5 年有效 - 多次入境许可证（re-entry permit）：50 新币<br>– PR 卡工本费：50 新币<br>– 单次入境签证：30 新币（若需）</p><p>一旦完成了上述手续，你就是不折不扣的新加坡 PR 了！</p><p>After received the letter from ICA, you must to complete the PR formalities within 1 months. You need to book appointment again via ICA website and bring along the documents as below,</p><ol><li>IPA letter</li><li>Passport with work pass</li><li>Acknowledge letter from CPF  (online submit via CPF website with singpass)</li><li>Medical report.</li><li>2 colour passport size photos</li><li>EP152 form (Employment certification)</li><li>Form 6 (Permit to re-enter Singapore)</li><li>Form of IC registration</li></ol><p><a href="https://eservices.ica.gov.sg/ibook/index.do" target="_blank" rel="noopener">https://eservices.ica.gov.sg/ibook/index.do</a></p><p>新加坡 PR 可以享受许多福利，包括不受签证限制在新加坡生活和工作、孩子可优先进入公立教育系统、强制参与储蓄养老金的中央公积金（CPF）计划等。</p><p>当然，别忘了做两件事：</p><ol><li>通知自己的雇主；你的雇主会向你收取一份 PR 文件副本并更新人力资源的记录，之后每月会按比例为你缴纳公积金。</li><li>通知你的银行，并更新银行账户的个人资料。</li><li>其它个人资料如租房，保险等</li></ol><p><a href="https://www.kuact.com/post/2017-09-03-%E9%A3%98%E8%BF%87%E6%96%B0%E5%8A%A0%E5%9D%A1%E7%9A%84%E6%97%A5%E5%AD%90-%E7%94%B3%E8%AF%B7pr%E4%B9%8B%E5%90%8E/" target="_blank" rel="noopener">飘过新加坡的日子 – 申请 PR 之后</a></p><p><a href="https://toutiaosg.com/%E6%96%B0%E5%8A%A0%E5%9D%A1SINGPASS%E6%B3%A8%E5%86%8C%E4%BD%BF%E7%94%A8%E5%85%A8%E6%94%BB%E7%95%A5" target="_blank" rel="noopener">新加坡 SINGPASS 注册使用全攻略</a></p><h3 id="PR-或者公民更换住址"><a href="#PR-或者公民更换住址" class="headerlink" title="PR 或者公民更换住址"></a>PR 或者公民更换住址</h3><p>Under the National Registration Act, you must report a change of address within 28 days of moving. Participating government agencies and statutory boards will then be informed of your new address through the One-Stop Change of Address Reporting Service (OSCARS). For more details, please click here.</p><p>根据新加坡国民登记法令（National Registration Act），搬离旧址者须在 28 天内，到移民与关卡局或警局办理更换身份证住址的手续，违例者可判坐牢长达五年，或罚款高达 5000 元，或两者兼施。</p><p><a href="https://www.shicheng.news/show/913226" target="_blank" rel="noopener">新加坡搬家记得一定要去更新地址</a></p><p><a href="https://www.ica.gov.sg/documents/ic/update_residential_address" target="_blank" rel="noopener">Change of Residential Address for Identity Card</a></p><h3 id="PR-每隔-5-年后续期"><a href="#PR-每隔-5-年后续期" class="headerlink" title="PR 每隔 5 年后续期"></a>PR 每隔 5 年后续期</h3><p>拿到新加坡 PR 满 5 年后，你需要更新你的多次入境许可证（re-entry permit）。</p><p>很多人担心自己无法更新 PR 身份。这就是 <strong> 新加坡永居“不永久”</strong> 的原因。之前，也出现过更新申请被新加坡移民局拒绝的案例。</p><p>尽管新加坡移民局并没有明确这一更新申请的审核标准，但根据经验总结，主要与以下几点有关：</p><ol><li>你是否在新加坡工作，并在新加坡领薪；</li><li>你每年缴纳的个人所得税金额；</li><li>你每年在新加坡居留的天数。</li></ol><p>因此，基本你每年在新的时间超过一半，按时纳税，并有来自新加坡的收入，更新 PR 都不成问题。</p><p>在更新 PR 身份时，你需要这些材料：</p><p>情况 1：你是公司员工 则需提交下列任何一种文件：</p><ul><li>雇主信，内容包括：受雇日期、职位和月薪；</li><li>中央公积金局（CPF）报表，显示过去 12 个月的公积金缴款；</li><li>过去一年的个人所得税评估通知书。</li></ul><p>情况 2：你是公司董事、独资企业股东、企业合伙人则需要提交下列任何一种文件：</p><ul><li>过去一年的个人所得税评估通知书；</li><li>新加坡会计与企业管理局（ACRA）网站最新的 Bizfile(商业注册证书)。</li></ul><p>材料准备好后，登录你的 SingPass 账户，选择电子再入境许可系统（e-REP），提交线上申请即可。</p><h3 id="放弃新加坡-PR-身份"><a href="#放弃新加坡-PR-身份" class="headerlink" title="放弃新加坡 PR 身份"></a>放弃新加坡 PR 身份</h3><p>在入境许可证有效期内，你可以以任何理由放弃新加坡 PR 身份。</p><p>你只需要呈交下列文件：</p><ul><li>护照</li><li>新加坡 PR 卡</li><li>新加坡 PR 证书</li><li>给新加坡移民与关卡局（ICA）的信：说明你希望取消新加坡永久居留权</li></ul><p>如果本人在新加坡，可以直接携带材料到移民局办理。如果本人在国外，可以到离你最近的新加坡大使馆办理，或将所需文件以快递方式寄给大使馆。</p><p>PR 身份取消后，你可以从公积金户头（CPF）取出所有余额。</p><h2 id="PR-申请公民"><a href="#PR-申请公民" class="headerlink" title="PR 申请公民"></a>PR 申请公民</h2><blockquote><p>等 PR 满两年后再申请</p></blockquote><p><a href="https://www.ica.gov.sg/application/singapore-citizenship/becoming-a-singapore-citizen" target="_blank" rel="noopener">Becoming a Singapore Citizen</a></p><p><a href="https://toutiaosg.com/%E5%90%90%E8%A1%80%E6%95%B4%E7%90%86%EF%BC%81%E5%A6%82%E4%BD%95%E5%9C%A8%E7%BD%91%E4%B8%8A%E7%94%B3%E8%AF%B7%E6%96%B0%E5%8A%A0%E5%9D%A1pr%E5%92%8C%E5%85%AC%E6%B0%91%E6%9C%80%E5%BC%BA%E6%94%BB%E7%95%A5/" target="_blank" rel="noopener">吐血整理！如何在网上申请新加坡 PR 和公民最强攻略！收藏~</a></p><h2 id="新加坡本地常用名词解释"><a href="#新加坡本地常用名词解释" class="headerlink" title="新加坡本地常用名词解释"></a>新加坡本地常用名词解释</h2><ul><li>MOM: Ministry of Manpower 新加坡人力部</li><li>IPA: In-Principle Approval 批准信</li><li>EP: Employment Pass 人才准证</li><li>DP: Dependant’s Pass 家属准证</li><li>PR: Singapore Permanent Resident 新加坡永久居民</li><li>SC: Singapore Citizen 新加坡公民</li><li>HDB: Housing &amp; Development 政府组屋</li><li>Condo: 私人公寓</li><li>Food Court: 食阁</li><li>CPF: 公积金</li><li>NUS: National University of Singapore 新加坡国立大学</li><li>NTU: Nanyang Technological University 新加坡南洋理工大学</li><li>NRIC: National Registration Identity Card 新加坡公民身份证</li><li>FIN: Foreign Identification Numbers 拥有长期工作准证的外国人身份证</li></ul><h2 id="新加坡-1-个月感想"><a href="#新加坡-1-个月感想" class="headerlink" title="新加坡 1 个月感想"></a>新加坡 1 个月感想</h2><blockquote><p>选择新加坡的理由：给自己多一种选择</p></blockquote><ol><li>原始坐标：上海，无留学经验也没有去过新加坡</li><li>猎头推荐新加坡的职位，想想自己那被遗忘的蹩脚英语抱着试一试的心态</li><li>一共 3 轮 Skype 远程视频面试，约 4 周时间到最后确认 offer</li><li>约 1 天时间思考，离职申请，签电子合同</li><li>检查护照有效期，下载学信网英文翻译认证，由 HR 帮助提交申请 EP，约 3 周内收到 IPA</li><li>在上海户口所在区公证处办理结婚证公证翻译，约 3 周时间完成，又慢又麻烦</li><li>完成 EP 后由 HR 帮助提交申请 DP，约 1 周内收到 IPA</li><li>购买机票，打印 IPA，带上护照，打包行李，兑换 4000 新币，确认人事档案存放地址，选择不缴纳每月养老保险和医疗保险约 1500 元人民币(可由父母代缴，中断非连续缴纳暂时不影响回国养老，以政策变化为准)</li><li>飞机上填写好新加坡入境卡，完成入境登记，无需录入指纹，开启华为天际通</li><li>抵达公司提前安排好的住址，熟悉新加坡环境</li><li>办理 EZ-Link 交通卡和 Singtel Prepaid 手机卡(如果没有强需求可以暂时不办理)</li><li>公司 HR 提交 EP 现场办理申请，收到邮件后预约 MOM 办理时间（我没有被要求体检，根据不同公司情况而定）</li><li>约 1 周后收到 EP 绿色实体卡，使用 SGWorkPass 扫描保存照片，注册 SingPass 后约 1 周左右收到密码信封</li><li>公司开具证明办理银行卡，新加坡本地我选择 UOB(保持 1000 新币存款)，另外强烈推荐再办理工商银行卡(持卡 0 门槛，转账回国 0 费用)</li><li>网上申请 Zero1 的无限流量手机卡，约 3 个工作日收到直接使用，弃用 Singtel Prepaid（浪费了 25 新币）</li><li>新加坡日常消费以现金为主，我本人习惯手机支付无奈降级至刷信用卡阶段(持有浦发 AE 白 / Visa/Master)，怀念下国内的支付宝和微信</li></ol><p>我刚来新加坡 1 个多月，不用担心语言不通，大部分人都会说华语。新加坡真的不算大，地铁和公交都很方便，空气质量很好至少我的鼻炎消失了，天气没有国内那么热，居然没有蚊子，没有蚊子，没有蚊子。在这段时间里我幸运了结识了交大和复旦的校友，跟随专业的中介实地考察了新加坡的租房和买房市场，走遍了几个重要的核心区域，顺便吃了几顿亲民的米其林一星。之后我应该还会继续更新自己在新加坡的经历，比如健身、快递、看病等日常生活，希望对大家有所帮助。</p><h3 id="新加坡-3-个月感想"><a href="#新加坡-3-个月感想" class="headerlink" title="新加坡 3 个月感想"></a>新加坡 3 个月感想</h3><blockquote><p>咋们就从最传统的衣食住行说起吧</p></blockquote><p><strong> 衣 </strong></p><p>因为新加坡全年都是夏季，平时的正常温度基本在 30° 上下，对于我来说已经把家里的夏装的家底全部带过来了，所以也没有什么特别需要单独购买，作为男生如果以后缺衣服的话在新加坡线下就是优衣库，线上还是优衣库。</p><p>女生的选择实在太多了，乌节路和 VivoCity 等都可以逛好久，这里就跳过吧</p><p>新加坡本地的 Outlet(奥特莱斯)是 IMM，如果你喜欢跑步运动，那么只卖 80 新币的 Adidas Ultraoost 和 Asics GEL-Kayano 会有一定吸引力</p><p>在新加坡网购，和国内激烈竞争的胜出者相比，还有很长一段路要走，当然也证明东南亚市场是一块巨大的蛋糕等待挖掘</p><p>新加坡室内空调冷气普遍开得比较足，建议怕冷的同学多备件长袖外套在公司，长时间逛商场时注意冷热交替避免生病</p><p>从中国快递至新加坡的方式已经快捷不少，淘宝直运和集运，ezShip 都是很方便的选择</p><p><strong> 食 </strong></p><p>新加坡最有特点的饮食文化莫过于食阁(Food Court)，其实有点类似于上海的大食代，但价格亲民而且还有米其林一星的神奇存在，平均一顿的价格区间在 3-7 新币，整体口味偏重。每个食阁上方都会标注 A/B/C 卫生评级，新加坡本地的习惯一般不在家做饭，大家都出去吃所以种类也还算多，不知道吃什么可以认准 Singapore Best Foods 红色标志，和国内相比关键是放心。</p><p>如果平时想吃顿大餐类似国内海底捞、小龙坎那种，平均每人大概 30-50 新币左右，评级更高的餐厅价格自然也水涨船高</p><p>自己在家做饭的成本其实和外面吃也差不了多少，如果居住的房子允许大炒和大煮当然可以选择自己动手丰衣足食</p><p>新加坡的菜市场比较少见可能是我没有刻意去寻找或者需求的缘故吧，买蔬菜和肉类基本都在 Sheng Siong(昇菘)，FairPrice(NTUC)，Cold Storage，喜欢日本食物还可以选择 DON DON DONKI，我个人很喜欢这只萌企鹅的魔性主题曲</p><p><a href="https://www.bilibili.com/video/av32078102" target="_blank" rel="noopener">https://www.bilibili.com/video/av32078102</a></p><p>新加坡的便利店清一色 7-Eleven，部分大一点的屈臣氏 (Watsons) 支持支付宝(Alipay)，上面提到的 Sheng Siong 已经全部支持 Alipay</p><p>外卖大家就不要指望 GrabFood 或 Foodpanda 有饿了么和美团外卖的速度了，老老实实去附近的食阁按时吃饭才是正道</p><p>我每个周末都会使用 <a href="http://refer.eatigo.com/eati17aqf-1v9" target="_blank" rel="noopener">eatigo</a> 开启 5 折美食之旅打打牙祭</p><p>图文介绍可以参考我同事更新的<a href="https://feiyang233.club/post/SG-food/" target="_blank" rel="noopener">那些年在新加坡吃过的店</a></p><p><strong> 住 </strong></p><p>(1) 租房</p><p>我在租房这个环节基本上算是跳过了，刚来时建议找好房源，这边的酒店居住成本很高的。因为目前是长租在公司提供的组屋 (HDB) 内，毕竟室友都是公司自己人很放心，合同限制不多每月会安排阿姨定期打扫和保养空调等，手机银行转账支付租金也方便。回想当时刚来的 1 个月每周都跟随专业的中介校友出去找房子都十分辛苦，更不要说自己联系中介一家一家看了，说多了都是泪。这边的房产中介需要考证，据说通过率只有 10-15%，每个中介都会展示唯一的证书编号，所以不用太担心被骗，不过每个中介的态度千差万别，找到靠谱的中介能够加快找房的速度。</p><blockquote><p>备注: 公司已经不再提供租房支持，可以联系 HR 询问中介联系方式提前沟通房源</p></blockquote><p>由于地理位置和房屋面积质量差异，下面的租房价格仅仅是一个参考区间，数字单位为新币 / 月<br>组屋(HBD)，普通房 600-800，主人房 1000-1200，整租 1000+<br>公寓(Condo)，普通房 800-1500，主人房 1200-2000，整租 1500+</p><p>房源信息可以来自于同事，也可以自己在线挑选，方法我都写在前面了，和同事咨询过新加坡租房的大致流程</p><ol><li>看准自己喜欢的房子</li><li>看清楚合同，看清楚合同，看清楚合同，签约</li><li>签 1 年一般押一付一，签 2 年押二付一</li><li>中介费是根据实际情况由房东或者租客来承担，一般根据合约长短支付 0.5 或 1 个月的房租作为中介费</li></ol><p>(2) 买房</p><p>虽然是否决定买房的话题为时尚早，但经历了魔都十几年房地产的上涨自然也不会错过对新加坡房地产的研究，如果你是冲着 30w 新币的组屋 (HDB) 那么找新加坡本地人结婚是最快的途径。新加坡在 2018 年 07 月 06 日 0 点开始调整了印花税，对于我们普通人来说 2-3 年内拿到永久居民 (PR) 已然不易。新加坡私人公寓 (Condo) 的价格和质量相对国内来说是有优势的，但是 1 室 80w，2 室 100w，3 室 120w 这样的价格加上印花税还是会让我们感到一丢丢肉疼，好在房地产市场涨幅长期平稳且退出机制清晰，租房市场也足够活跃，而且银行可以贷款 7 成 + 2% 左右的低利率还是足以让我们拥有奋力一搏的勇气，不用牺牲 6 个钱包。</p><blockquote><p>这里给未来的新加坡买房经历留个坑位吧</p></blockquote><p>HDB 政府租屋</p><ul><li>BTO 抽签期房</li><li>Resale 二手租屋</li></ul><p>Condo 公寓</p><ul><li>期房或新房</li><li>二手房</li></ul><blockquote><p>HDB 和新 Condo 购买流程待补充，我们具体看下购买二手公寓流程，主要分 4 个阶段</p></blockquote><p>以<a href="https://www.kanyangfang.com/projects/dchateau-shelford" target="_blank" rel="noopener">D’Chateau @ Shelford</a> 购买使用面积为 915 sqft<br>总价为 155 万新币的 3 房为真实案例，首套房首付金额大概在 33%-35%</p><p>特点</p><ol><li>永久地契</li><li>1 公里内双名校<br>南洋小学（Nanyang Primary School）<br>莱佛士女子小学（Raffles Girls’ Primary School）</li></ol><p>购房流程</p><ol><li>订金 1% 签下房源当天，$16500</li><li>执行购买权 4% =$66000</li><li>税金总金额：$133100，计算方法:（9%-$15400），14 天内缴纳，包含 4% 印花税（Buyer’s Stamp Duty）+ PR 首套为 5% 附加印花税（Additional Buyer‘s Stamp Duty），银行贷款 75%，审批约 3-7 天，利率 1.5%，月供 4300 新币（如果租 1 房目前成本不低于 2500 新币 / 月），律师楼办理手续，3000 左右新币，预约，1-3 小时流程</li><li>完成交易，支付 20% =$33 万，3 个月时间。其他费用：银行估价费 $600</li></ol><p><a href="https://www.yan.sg/rwirhwi/" target="_blank" rel="noopener">新加坡程序员亲历：如何在 1 个月内云淡风轻地买房卖房</a></p><p><a href="https://zhuanlan.zhihu.com/p/32493002" target="_blank" rel="noopener">新加坡买房小记</a></p><p><a href="https://mp.weixin.qq.com/s/04P6CamP1z2tRzCqb6ylOQ" target="_blank" rel="noopener">关于海外置业，我泼点冷水</a></p><p><strong> 行 </strong></p><p>现在无论在哪里手机的使用比重都是极高的，我自己来新加坡前把小米 6 替换为华为 P20 Pro，妻子还是用的小米 MIX2，在国内早已习惯电信乐享家 199 元全国无限流量，我们的老卡 1 个是移动，1 个是联通，来到新加坡之后选择了无合约限制价格为 9.9 新币无限流量的虚拟运营商 Zero1.sg，因为背后是 Singtel 所以质量有保障。在新加坡接收国内短信验证码之类不要钱，双卡双待都是没有问题的，不过我妻子还是很期待 iPhone 即将推出的双卡功能，毕竟她在美国时的 iPhone5s 也用了 4 年多，被我硬生生拖入 Android 阵营实属不易。 </p><p>新加坡公共交通发达，Google Map 在手说走就走。我的选择和国内类似，能坐地铁尽量就不会选择公交车，因为坐公交车有几点不爽，如果你不熟悉新加坡或者不会熟练使用 Google Map 建议不要轻易乘坐公交车。</p><blockquote><p>乘坐地铁切记不可吃喝、吸烟、携带榴莲、大声喧哗和带宠物，乘坐公交车的规定与地铁类似但有以下额外注意事项</p></blockquote><ol><li>公交车来之前一定要招手才会停</li><li>在到达下一站前一定要按 Stop 红色停车按钮，不然不会停</li><li>下车时还要再刷一次交通卡确认付款</li></ol><p>除了公交车和国内差异较大以外，平时过马路记得按一下身边的指示灯，你不按或者对面也没人按，那你就不用想着过去了</p><p>这边的公交卡称为 EZ-Link，想刷 NFC 不好意思没有小米和华为，请购买 NFC SIM card。虽然充值很方便支持国内双币信用卡，但我还是很想念上海二维码扫码进闸机。另外新加坡地铁站没有安检，没有安检，没有安检。</p><p>我丢过一次地铁卡，为了挽回里面 25 新币我第一次主动走进新加坡警察局开具丢失证明，他们做事确实负责而高效，不过我因为操作失误导致旧卡数据没有正常转移到新卡，超过 7 天申报时间我也没有办法无力回天，所以再一次怀念下国内的手机刷卡。</p><p>~~ 新加坡已经遍布 Mobike 和 ofo，摩拜的国内账户可以在这里直接使用，ofo 需要重新注册。~~ 单车市场基本倒闭</p><p>新加坡打车市场已经被 Grab 一统江湖，Uber 和滴滴出行都入股 Grab，另外 Grab 打车很安全而且支持支付宝(Alipay)，普通出租车都支持微信和支付宝。目前能看到的对手只有 Gojek，也许不久的将来也会合并。</p><p>关于机票从上海往返新加坡的航班很多，价格和飞行时间比较透明就不多说了，我这里还是推荐大家体验下新加坡航空 (Singapore Airlines) 的服务，今年航空公司评选又站回全球第一，即使乘坐经济舱也不要忘记品尝一下新加坡司令哈。</p><p>今年国庆节期间我和老婆买了新加坡至四川成都的 5 日往返机票，新加坡航空旗下的胜安航空(SilkAir)，令我感到惊喜的是 2 人机票往返价格总共才 1600 人民币，单人往返 800 人民币，可能是 bug 价格了。</p><p>新加坡和国内的走位不一样，行走避让和司机开车位置与国内正好相反。</p><p>新加坡拥车成本比较高，虽然公共交通发达，但是开车的梦想还是要有的，万一实现了呢？</p><blockquote><p>传统的四大金刚扯完了，我们再聊一些逆转未来的话题</p></blockquote><p><strong> 安全 </strong></p><p>新加坡的安全本质上是基于严格的法律加上遍布各地的摄像头，你如果想挑战下不如先了解下鞭刑的酸爽和罚款罚到你肉疼的数字。</p><p>吸烟，喝酒，乱扔垃圾在法律中都有明确要求，虽然不能百分百杜绝抽烟现象，但你走在马路上不会遇到随意吐痰也不需要提防狗屎。穿过十字路口车辆都会早早的自觉停下来等你先过去，新加坡随处可见的就是无障碍设施，地铁沿线基本都设置了棚顶，既可以防晒又可以躲雨，即便每天都能遇到短时暴雨由于出色的排水系统也从来不会看到有积水。</p><p>在国内随时会收到的垃圾短信和房产金融中介等骚扰电话，在新加坡基本是看不到的，不过 Email 和 WhatsApp 这种网络骚扰还是无法消灭的。这边的违法成本比较高只要被投诉就会收到法律的严格制裁，当然注意保护自己的隐私安全始终不能掉以轻心，毕竟再文明的社会偶尔也会遇上小人。</p><p>在新加坡你基本不用担心丢失物品，因为大概率都能找回来，包包也不用刻意放在前面，拉链忘记拉上也没关系，不用担心人口贩子和小孩走丢，更不用担心一个人走夜路会不会不安全，犯罪成本高促成的低犯罪率给你带来的不仅仅是安全感更是幸福感。</p><p>由于新加坡的地理位置极好，无论是过去还是未来基本是不会受到任何灾难气候影响，台风、海啸或者地震是不存在的</p><p>新加坡的人际关系相对简单，与人为善的过程中也不要忘记多留个心眼谨慎一些，在这边和他人发生误会大多数都会听到 Sorry 和 I am fine 而不是争吵，规规矩矩排队而很少有人随意插队，政府办事效率高以廉洁著称也是难能可贵，在新加坡未必有国内这么亲切有人情味，但你能感受到的是相对的公平和简单。</p><p><strong> 健康 </strong></p><p>我在上海的时候就饱受着变态反应性鼻炎的痛苦，每次体检医生都开玩笑要不住到外环去吧，没想到现在离家这么远。至少来新加坡后我的鼻子就彻底舒畅了，我原来对空气质量也不以为然，买个小米净化器放在家里，直到离开上海前看见基因检测报告提醒风险最高的是鼻咽癌，我才明白空气对于每个人的未来都是如此重要。</p><p>新加坡的温度常年保持在 30° 上下，不会像上海夏季烈日炎炎，但新加坡比较像“蓝天白云 晴空万里 突然暴风雨”，有云有风有遮雨棚，身体其实会觉得很舒服.</p><p>之前已经说过新加坡的饮食文化以食阁 (Food Court) 为主，这些小店很多都有几十年的历史，食物未必都符合你的胃口但至少足够安全，不用担心地沟油。合理的饮食搭配以及规律的生活节奏才是根本。</p><p>新加坡本地人都注重健身，如果不想花太多钱在健身房可以考虑在小区附近的体育馆免费跑步或者花费 1.3 新币游泳。私人公寓 (Condo) 一般自带小型游泳池和健身房，虽然小但有总比没有好。如果公司有补贴健身房的价格 (一般 150-200 新币每月) 其实也不算太贵，每月 99 新币可以选择像 Fitness First or Pure Fitness(Pure Yoga)等专业健身房。</p><p>关于看病，因为前段时间工作比较忙抵抗力突然下降导致出现额头皮肤红肿，在国内经历过不注意小病而酿成大病的惨痛教训，<a href="https://wsgzao.github.io/post/wisdom-tooth/">我是如何做到花 8000 元拔智齿的</a>，所以这次特地请 1 天病假去公司合作的 Raffles Medical 私人诊所看病，事后看诊断结果比较准确且看病过程十分高科技 + 高效率，病因是 <code>带状疱疹</code>，总共 99 新币，30 是问诊费其余都是买药钱。只不过第二天我发现未有起色且眼皮红肿都快睁不开了就先让昨天的医生开具的急症介绍信，然后直奔 Raffles Hospital，在了解基本无大碍和每位专科医生复查至少 300 新币起步的情况下果断申请放弃继续治疗赶紧溜回去休养生息，这一趟花了 199 新币，其中 130 为问诊费(节假日看病费用翻翻)。命固然重要，但人只要一生病真的可能失去一切甚至连累家人。</p><p>2019 年去了 2 次新加坡伊丽莎白医院 - Mount Elizabeth Hospital，还增加了人生中第一次坐救护车的经历，好软好舒服。首先是价格没有想象中那么贵，当然还是优先建议购买住院保险以防万一，其次是建议能选择私立医院就不要选择公立，看病的效率真让人着急。未来有机会再探索下新加坡鹰阁医院 - Gleneagles Hospital，2020 年春节期间去了 2 次鹰阁医院，如很多人所言名声在外但设施老化，如果选择生宝宝还是推荐伊丽莎白医院诺维娜分院 - Mount Elizabeth Hospital Novena</p><p>和同事回顾了他们看病的流程，作为外国人一般也是建议直接去附近的私人医院，价格其实差不多但不用排队。如果选择去政府医院比如 NUH 等可能存在排队现象，这个体验对于国内看病来说大家心里应该很明白有多痛苦，如果各位有足额的医疗保险在国内其实可以选择特需医疗(免排队 + 专家门诊)。关于新加坡医院的更多信息可以参考最上面的介绍。</p><p>印尼 “烧芭” 引发空气污染和马来西亚动不动就拿断水挑事也是新加坡需要持续努力解决的问题之一。</p><p>新加坡的蔬菜和水果算不上贵但也不会像国内一样便宜，除了猫山王榴莲和部分进口水果质量和价格有优势，也没有太多的种类可供选择，我自己会从网易考拉购买 Swisse 作为补充，话说新加坡的营养品真心贵，同样的 Swisse 一小瓶卖 56 新币，其它品牌价格也是高居不下。</p><p><strong> 娱乐消费 </strong></p><p>新加坡本身就很小，加上我和我妻子都倾向于工作，学习和健身。平时的娱乐活动也就停留在节假日出去寻找下亲民美食，慢慢游览新加坡仅有的几个景点，新加坡环球影城，S.E.A. 海洋馆，新加坡动物园，新加坡夜间动物园，滨海湾花园，金沙酒店附近的鱼尾狮和摩天轮，圣淘沙和赌场，其它像植物园，大学校园很多都是免费的，旅游一般 2 天可以快速结束，如果需要细细品味也就再多增加 1-2 天足够了。</p><p>新加坡娱乐设施真的不算很多，看电影还得去现场买票，网上购买需要多花钱。吃喝玩乐想看看附近的活动和评价都没有像美团点评类似的产品，毕竟需求不像国内这么大，但我觉得让国内的美团点评来进攻新加坡市场，相信分分钟钟可以拿下。</p><p>新加坡本地目前小额仍然以现金为主，商场一般支持刷卡，而主要的景点和购物中心区域全部覆盖支付宝(Alipay)</p><p><strong> 教育培训 </strong></p><p>虽然现在谈教育太早但是新加坡本地的教育资源始终都是偏向本国公民的，对我们来说永久居民 (PR) 只是万里长征的第一步，要不要买学区房，要不要做义工，也是留给自己的问题。感觉这又有上海户口，学区房，拼父母，何其相似？</p><p>新加坡和中国一样都很注重基础教育，对子女的教育支出都很高，新加坡第三方教育机构或者成人专业类培训机构的市场也很大。最近在微信朋友圈看到英国 BBC 邀请 3 名威尔士的优等生体验韩国鸡血教育的文章，除了深刻感受到教育的重要性，更加理解韩国快速崛起的因素，成熟而完整的教育产业链对孩子很重要，对国家来说更重要。</p><p><a href="https://zhuanlan.zhihu.com/p/46043323" target="_blank" rel="noopener">谈新加坡教育的分流制度</a></p><p><a href="https://mp.weixin.qq.com/s/GNvZcLg2U7baHfU2DMy_pg" target="_blank" rel="noopener">谈谈新加坡的教育和学区房</a></p><p><img src="https://raw.githubusercontent.com/wsgzao/storage-public/master/img/20200109110126.png" alt=""></p><blockquote><p>关于新加坡学区房</p></blockquote><p><strong> 首先 </strong>，和中国的学区房，在报读小学、中学都用得上的情况不同，新加坡的学区房，只在小一报名阶段有效，在其它年级直至中学阶段，“学区房”就再不管用了；政府在中一阶段，是全岛收生；至于其它年级的转学，则主要取决于学校有没有学额，住得再近也无济于事，所以这在很大程度上就减少了好多对 “学区房” 的刚需。</p><p><a href="https://endeavourpri.moe.edu.sg/primary-one-registration-exercise-2020/" target="_blank" rel="noopener">Primary One Registration Exercise 2020</a></p><p>For more information regarding 2020 Primary One Registration Exercise, parents can refer to <a href="https://www.moe.gov.sg/" target="_blank" rel="noopener">Ministry of Education website</a>.</p><p>Please refer below for the infographics of the different Primary One Registration phases.</p><p><img src="https://endeavourpri.moe.edu.sg/wp-content/uploads/2020/07/P1-Registration-Exercise-2020.png" alt=""></p><p><strong>Balloting</strong></p><p>Balloting will be conducted if the number of registrants exceeds the school vacancies, which can happen in any phase from 2A (1) to 2C Supplementary. Computerized balloting will be conducted centrally by MOE. All registrants who are required to ballot are assured of an equal chance for admission into the school. Priority admission to a P1 place in a school will be given to children in this order:</p><ol><li>Singapore Citizens (SC) living within 1km of the school.</li><li>SC living between 1km and 2km of the school.</li><li>SC living outside 2km of the school.</li><li>Permanent Residents (PRs) living within 1km of the school.</li><li>PRs living between 1km and 2km of the school.</li><li>PR living outside 2km of the school.</li></ol><p><a href="https://www.kanyangfang.com/articles/blog/xiang-jie-yi-gong-shen-qing-xin-jia-po-hao-xiao-x.post" target="_blank" rel="noopener">详解义工 - 申请新加坡好小学的主流方案</a></p><p><a href="http://www.wangbo.com.sg/index.php/news/845-2020-04-28" target="_blank" rel="noopener">2021 年新加坡政府小学报名启动了！</a></p><p><strong> 其次 </strong>，在新加坡报读小学，首要硬指标并非学区房（或者换句话说，户口），而是看 <strong> 你和小学的关联有多大 **</strong>。** 按优先等级从大到小排序，新加坡的小一招生，说来总共分三个阶段，其实细分了 7 档：</p><blockquote><p>小一报名的阶段</p></blockquote><p>1）Phase1: 已经有哥哥姐姐正就读于该学校的，弟弟妹妹秒进！</p><p>2）Phase 2A1: 父母是校友联盟里的成员，孩子也可以比较早报读小学</p><p>3）Phase 2A2: 父母或者哥哥姐姐是校友</p><p>4）Phase 2B: 父母是学校大咖或者行政人员或者跟学校相关的机构成员</p><p>2B 是开放给 <strong> 学校义工 </strong>，<strong> 社区义工 </strong>，某些 <strong> 教堂教友 </strong> 或者某些 <strong> 会馆会员 </strong> 的孩子报名的。</p><p>除了个别教师家庭，新移民子女通常都无法享受校友红利，所以 <strong> 除了选个好学区房，做义工也是申请热门学校的重要工作。</strong></p><p>5）Phase 2C: 只要是公民或者永久居民，距离优先</p><p>6）Phase 2C Supplementary: 只要是公民或者永久居民，距离优先</p><p>7）Phase 3: 所有人开放，包括外国人</p><p>这样数一数，学区房一直要到第 5 和第 6 个阶段，才能真正发挥作用，还只是针对公民和永久居民而言的。换句话说，如果是个外国人，学区房对他们说基本上分文不值。那你觉得学区房的吸引力，还会有在中国那么大吗？</p><blockquote><p>关于租学区房</p></blockquote><p>新加坡的学区房，并不需要一定是自有房，只要符合一定的条件，就算是租的房子，也可以堂而皇之去报读学校。</p><p>1）期房<br>新加坡的小学 2020 年 7 月份开始报名，明年 2021 年 1 月份入学。期房建成前，可以提前 2 年用期房的地址，并出具买卖合同买报名。比如孩子现在 5 岁，那就要根据楼盘的交楼时间选 2022 年 7 月前交楼的房子。</p><p>2）二手房<br>报名时需要二手房买卖合同，也是必须在 2020 年 7 月报名前完成以上手续，入住要求是在明年 2021 年 1 月前入住。</p><p>3）租房<br>如果用租房地址报名，需要在 2020 年 6 月 30 日之前变更好身份证地址，住满 2 年半，如果要搬家也不能超过 1 公里之内。</p><p><strong> 工作生活 </strong></p><p>我目前在一家新加坡互联网公司 Sea 上班，旗下知名度比较高的是 Garena 和 Shopee。工作制度是弹性的，没有严格的打卡要求，正常时间为 09:30-19:00，周围以中国同事居多，大部分是在这边读书毕业工作，学校几乎清一色新加坡国立大学 (NUS) 和新加坡南洋理工大学(NTU)，工作语言为英文，核心生产力工具包括 Google Suite，顶配 MacBook Pro，Herman Miller，Dell 2417H，还有无限制的饮料，水果和零食。原以为只能在国内的创业公司和少数尊重技术的优质公司才能看到的办公环境，可能在国外是很常见的事情吧。新加坡互联网公司在 IT 方面的人才非常短缺，也许是因为本地人大都投身于金融行业，所以很多技术人才也是会考虑从中国引进，甚至直接在国内开设分公司。</p><p>因为我以 EP 身份把我老婆也带了过来，目前还是 DP。对她来说在新加坡找一份金融行业的工作真的非常不容易，花了 2 个多月时间扫光了 LinkedIn 在新加坡几乎所有公开招聘，遗憾的是很少有金融行业愿意招聘非新加坡公民 (SZ) 和永久居民 (PR) 以外的人群，得到的回复大多数都是 Sorry，毕竟新加坡政府在很多地方都会优先照顾本国人的利益，这个道理放在中国也很好理解。不过目前经历了 6 轮面试最终拿到了一个还不错的 offer，后续 DP 也要转成 EP，这是一件值得庆幸的事情。</p><p>新加坡月薪中位数是 4500 新币左右，新加坡人力部公布了 2018 年全国的工资中位数 4437 新币 / 月，如果你对各行业数据感兴趣可以参考<a href="https://www.michaelpage.com.sg/salary-guide" target="_blank" rel="noopener">Singapore Salary Benchmark 2020 Michael Page</a></p><p>很多人咨询薪资范围这个不同公司不同行业职位都不一样，建议大家看看 mycareersfuture.sg，每一个申请 EP 的工作都会在上面公开若干天，这是政府要求，上面基本有职位的薪资范围，这是最准确的数据，也可以看看其他公司的报价，然后就知道你的 offer 是低于还是高于市场价了。注意这上面过往的职位是不会显示的，所以如果碰到了淡季，数据很少。</p><p>在没有明显压缩新加坡生活成本，按 1 人每月估算为 1w 人民币，如果是 2 个人差不多是 1.5w 人民币</p><p>HDB 合租主人房: 1100<br>水电网: 50<br>移动套餐: 9.9<br>饭费: 20x30<br>交通: 2x30<br>健身: 99<br>理发: 12<br>其他: 100</p><p>≈2030.9 新币≈10000 人民币，如果你是单人还可以选择普通房大概 800 每月。不过我相信新加坡贵的部分体现在后期的看病和生娃教育上</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzIwMTQxODUxNw==&amp;mid=2650896087&amp;idx=1&amp;sn=9eb1be6f3e8ff3a5acc908e2c983cb37&amp;chksm=8d1be4adba6c6dbbb26bb7a8f6e99cff210306f1f1f856297851bc10ed378f532081f08a298b&amp;mpshare=1&amp;scene=23&amp;srcid=0627SV9XjUJihYiNxW383bUB&amp;sharer_sharetime=1564742363597&amp;sharer_shareid=456ba82bbd1a1c9f32e5725824095308%23rd" target="_blank" rel="noopener">扒一扒新加坡的精英制度！月薪 14 万的人到底经历了什么？</a></p><p>中国 VS 新加坡，生娃养娃究竟要花多少钱？</p><p>中国：</p><ul><li>生娃：3000-1 万人民币</li><li>养娃：65 万元 - 130 万人民币</li><li>总计：约 65 万 - 131 万人民币</li></ul><p>新加坡：</p><ul><li>生娃：1003-18912 新币</li><li>养娃：至少 67 万新币</li><li>总计：约 69 万新币</li></ul><p>推荐下 Grammarly for Chrome，在写邮件和文档时可以快速发现并纠正语法错误，对提升英文书写能力非常有帮助。我自己也是第一次开始深度使用 MacBook，记录一些简单的入门过程在 Blog 中，也可以做下参考。</p><p><a href="https://wsgzao.github.io/post/macbook/">MacBook macOS 从小白到入门</a></p><p><strong> 养老政策 </strong></p><p>新加坡不养闲人，你在新加坡的食阁 (Food Court) 仔细观察过就会发现几乎所有打扫卫生的都是老年人，和中国相比新加坡的养老金 CPF 是交多少退多少，不会被平均，所以更多的本地人会提前了解基金股票保险和投资房地产等方式来为自己养老。新加坡、日本、韩国等国家的老龄化问题已经凸显，我们都可以看到未来国内严重的老龄化趋势，谁又能独善其身呢？</p><p>新加坡政府因为楼市过热而提高印花税的闪电行动，中国也吹响了全球征税的集结号，无论身在哪里我们始终躲不开政治不是吗？</p><h2 id="日用品推荐"><a href="#日用品推荐" class="headerlink" title="日用品推荐"></a>日用品推荐</h2><blockquote><p>回顾来新加坡前后的经历，我希望自己分享的一部分实用建议和商品可以帮助大家更好的适应新加坡生活。如果你不喜欢网易严选和网易考拉可以选择性跳过。</p></blockquote><p>我自己携带并且大家都能买到的产品分享：</p><ol><li>药品：我带的是泰诺和夫西地酸乳膏，这边初期看病成本还是比较高，建议最好带一些板蓝根、急用的抗生素、抗过敏药及自己习惯的常用药，如胃药、哮喘喷剂等等。</li><li>其他综合的日用品，我是分 3 批带过来的，这里按照重要性分成 2 部分来推荐，大部分来自网易严选和网易考拉工厂店，关于原因我也记录了自己的观点。</li></ol><p><a href="https://wsgzao.github.io/post/buy/">我的线上线下购物变迁史</a></p><h3 id="必备推荐"><a href="#必备推荐" class="headerlink" title="必备推荐"></a>必备推荐</h3><blockquote><p>我就只推荐适用于男同胞的产品了，虽然我妻子也是在严选和工厂店买，如果各位有需求我日后可以再补充，她的东西实在是多</p></blockquote><p>[手机 / 耳机 / 智能穿戴无推荐]<br>Follow Your Heart</p><p><a href="http://163.lu/I8OGX1" target="_blank" rel="noopener">28 寸 纯 PC“铝框”（非全铝）拉杆箱</a><br>新秀丽制造商，但是怎么看怎么觉得更像是日默瓦(RIMOWA)，虽然有小米 90 分旅行箱但 20 寸太小，为了追求更大容量就买了这款，使用感受非常可靠，五星推荐</p><p>[双肩包无推荐]<br>我自己背的是一加(OnePlus)1 代和 2 代，她带的是 Longchamp 和 Doughnut，都是多年的老包了</p><p><a href="http://wx.uniir.com/" target="_blank" rel="noopener">独美</a><br>眼镜我和妻子每人配了 2 副做主备, 我们买的都是来自京东众筹的独美，3.3g 镜架加镜片只要 398。小米有品太阳镜带了 1 副，不过来新加坡后我从来没佩戴过</p><p>[晴雨伞没有推荐]<br>新加坡经常短时暴雨，平日基本阳光明媚，建议携带一把晴雨伞，既能遮阳、又能挡雨。我自己带了 1 把天堂和 1 把小米晴雨两用，因为比较懒所以买的都是自动伞。只是可惜了 RealBrella 锐乐 不对称设计长柄伞留在家里吃灰，我好喜欢这款大红色啊。</p><p>[跑鞋无推荐]<br>自己带了 2 双旧鞋过来，严选上买过一双类似 Adidas UltraBoost 的鞋子还不错。我妻子带了 Asics GEL-Kayano 24，无论在网易考拉买还是在新加坡本地买 Asics 都很便宜，而且新加坡 NIKE REACT 跑鞋一般也只要 120 新币左右。</p><p><a href="http://163.lu/050tb0" target="_blank" rel="noopener">两带式男女款软木拖鞋 2.0</a><br><a href="http://163.lu/SpQlo1" target="_blank" rel="noopener">两带式男 / 女款拖鞋</a><br>Birkenstock 集团制造商，我特地在国内和新加坡的专卖店对比过，自己穿了 1 代非常舒服然后又买了 2 代，因为在新加坡基本是拖鞋 + 短裤的夏装，如果你的工作要求正装注意带好皮鞋和衣服套装</p><p><a href="http://163.lu/v4KrM2" target="_blank" rel="noopener">软弹速干男 / 女沐浴拖鞋</a><br>Crocs 制造商，浴室必备。本来想分享严选的人字拖，但不知道为什么严选把它下架了，反正我基本是放在室内穿，大家买自己觉得舒服的就好</p><p><a href="http://163.lu/CKQh21" target="_blank" rel="noopener">考拉工厂店 5 双 男士精梳棉防臭休闲袜</a><br>我在新加坡穿袜子的次数就和穿运动鞋的次数保持一致，除了健身和户外活动，几乎都是大拖鞋走起，上次登顶新加坡最高峰武吉知马山也是拖鞋，不过大家还是必要学我穿拖鞋爬山，以免自己给自己挖坑</p><p><a href="http://163.lu/uE5Uz3" target="_blank" rel="noopener">网易严选 男式丝滑莫代尔平角内裤</a><br><a href="http://163.lu/7ZOLU2" target="_blank" rel="noopener">考拉工厂店 男士莫代尔零束缚感内裤</a><br>我买过 CK 也买过网易严选和小米有品的纯棉内裤，但真正可以打动我的材质还是莫代尔，网易严选和网易考拉工厂店的两款我都买了，质感各有特色。严选上还有一款空气内裤，勇于尝鲜的同学要不试试？</p><p><a href="http://163.lu/aXBps0" target="_blank" rel="noopener">考拉工厂店 男式无缝插肩短袖 T 恤</a><br>我买了 3 件来自于严选和考拉工厂店的运动速干衣，但是从品质和舒适度上还是感觉不如自己再 Nike 实体店中购买的 Dri-FIT，考拉工厂店这款已经无限逼近了。小米有品也有很多运动衣，都是可以考虑的。我个人推荐备上 3 套运动衣，因为新加坡常年夏季，出汗是难免的，速干面料可以保持身体的舒适</p><p><a href="http://163.lu/Qxhpq2" target="_blank" rel="noopener">考拉工厂店 男式运动短裤</a><br>这款运动短裤我五星推荐，不仅做工精湛，口袋拉链等细节也非常到位，我自己直接买了 2 条，如果不是因为只有 2 种颜色，我还会继续买。另外还带了一条 Nike Dri-FIT 短裤，不过因为没有拉链所以来新加坡后基本没穿过，在上海的时候也仅仅是健身时穿的，现在因为设计问题算是彻底废了。</p><p><a href="http://163.lu/FPubq0" target="_blank" rel="noopener">考拉工厂店 男式针织轻薄运动裤</a><br>这款运动长裤我五星推荐，空气面料在夏天也依旧舒爽，内口袋拉链细节设计极赞，我索性买了 2 条一模一样的黑色款。新加坡平时上班我基本是穿这款长裤，原因和上面说过的新加坡室内空调温度较低有关，注意保暖。</p><p>[睡衣没有推荐]<br>我就直接把以前优衣库的全棉联名 T 恤全部带过来当睡衣穿了，有时候出门也可以穿哈</p><p>[外套没有推荐]<br>我自己带了 Under Armour 防风防雨衣，小米有品夜跑皮肤衣，小米有品防雨皮肤衣，除了 Under Armour 放在公司偶尔冷的时候会披一下，其它皮肤衣还没穿过。</p><p>[衬衫没有推荐]<br>我把原来公司定制的各种正装带过来了，可惜就入职时穿过一次，后来就是拖鞋加运动套装上班了</p><p><a href="http://163.lu/N7voR2" target="_blank" rel="noopener">成人款 高清时尚电镀泳镜</a><br><a href="http://163.lu/tDJJb2" target="_blank" rel="noopener">黑闪系列 硅胶防水泳帽 （男女通用）</a><br><a href="http://163.lu/Egc5c1" target="_blank" rel="noopener">男式基础泳裤</a><br>严选做了游泳装备也出乎我的意料，关键是和我之前买的 Speedo 相比那叫一个便宜啊，我本身是退休多年的游泳二级运动员，看似很简单的游泳装备严选的质量和价格都把控的不错，希望未来增加带度数的游泳镜。新加坡开放的普通游泳馆使用 EZ-link 刷卡，1.3 新币一次非常便宜，关键还多是训练使用的标准泳池人也少，定时清洁的规范让人放心。</p><p><a href="http://163.lu/rDAkF3" target="_blank" rel="noopener">全球通用转换插座</a><br>全球通用转换插座出国的人都应该明白是必备的，严选居然也做出来了，感觉又要干死一片坑爹厂商</p><p>[移动电源必须小米啊]<br>互联网上一直流传着这样的传说，小米什么产品都可以黑但是谁要是敢黑小米移动电源就被其他人反过来喷死。如果不是小米移动电源的出现干掉一众无良商家，现在市场上还不知道有多少人会受到低劣电池爆炸的影响，小米移动电源是真正用产品说话赢得用户口碑的最佳案例之一。我自己买的是紫米新款，我妻子买了一个超薄款就为了好看，哎</p><p><a href="http://163.lu/4ehYt4" target="_blank" rel="noopener">3 头浮动式电动剃须刀</a><br>科技类产品其实很想支持小米，可惜小米生态链不给力，就先用着严选高性价比的剃须刀好了</p><p><a href="http://163.lu/5cpvU0" target="_blank" rel="noopener">THREE SEVEN/777 进口指甲刀便携 4 件套 指甲剪小套装 三色可选</a><br>被淘宝坑过电动指甲刀和匠技指甲刀，也被严选坑过过于简约的指甲刀，没想到最后还是要选择韩国原装进口的 777 牌 4 件套，我以前不了解斜口指甲刀，后来才发现这货是剪脚指甲的神器啊，我以前剪脚指甲是有多痛苦哇</p><p><a href="http://163.lu/RNu3A1" target="_blank" rel="noopener">8 件装 折叠多功能衣架</a><br><a href="http://163.lu/dtCu31" target="_blank" rel="noopener">18 头多功能晾衣架</a><br>必备推荐，折叠携带很方便，18 头多功能晾衣架晾衣服的时候一个顶百，我都差点可以不用普通衣架了</p><p><a href="http://163.lu/pAmCc4" target="_blank" rel="noopener">旅行分装瓶套装</a><br>洗护用品我建议用分装瓶或者带最小包装的出国，因为这些日常用品本身价值不高但分量重，在当地超市购买就好了，除非你非常在意使用某些品牌</p><p><a href="http://163.wyh5.top/OsArG4" target="_blank" rel="noopener">考拉工厂店 智能清洁电动牙刷</a><br>我给父母买的也是同款，建议再带上 2 个以上刷头。如果你之前从来没有使用过电动牙刷，非常建议你尝试，清洁牙齿更加彻底和方便，爱上之后就无法回到过去手动刷牙啦</p><p><a href="http://163.lu/H03jR2" target="_blank" rel="noopener">电动式硅胶洁面仪</a><br>我还记得我给妻子送的第一个礼物就是 FOREO LUNA MINI2 Plus，这个也是我在网易考拉上买的第一个商品，当时这款网红洁面仪被招商银行垄断，没办法直接购买，逼着自己了解到网易考拉在国内海淘市场的领先地位，也算是缘分吧。现在严选自己也推出类似洁面仪才十分之一的价格，买个给自己吧</p><p><a href="http://163.lu/ZKkRz3" target="_blank" rel="noopener">韩国制造 硅胶洁面刷</a><br><a href="http://163.lu/RJS3r0" target="_blank" rel="noopener">韩国制造 硅胶沐浴按摩手套</a><br><a href="http://163.lu/Rv9KI2" target="_blank" rel="noopener">韩国制造 多功能硅胶清洁刷</a><br>严选从韩国引进来相当专业的硅胶产品制造商，其中这 3 件小东西在洗脸，沐浴，洗碗上极大的提升了我的幸福感，强烈推荐人手一件</p><p><a href="http://163.lu/womXA3" target="_blank" rel="noopener">皇室御用超柔毛巾</a><br>内野制造商，这是网易严选当年备受争议的产品之一，我不知道内野是什么，但我只知道这款毛巾确实舒服</p><p>[床单 / 床笠 / 被套 / 毯子]<br>我从家里带了 2 套旧的，然后又从考拉工厂店买了外国人比较喜欢的床笠，因为晚上睡觉都是关闭空调，没有被子就一层薄薄的毯子，一般租房子房东都会提供床板和床上用品，如果你不习惯或者运气不好，在新加坡本地宜家采购也很方便的</p><p><a href="http://163.lu/VY4v73" target="_blank" rel="noopener">考拉工厂店 100% 桑蚕丝双面美肤枕套</a><br>我和妻子一人一个，带过去非常方便，水洗之后也没有出现质量问题，面料实在丝滑</p><p><a href="http://163.lu/pBhg61" target="_blank" rel="noopener">AQR 创口贴</a><br>在新加坡常年夏装，像脚和皮肤很容易受伤，带上一盒以备不时之需</p><h3 id="可选推荐"><a href="#可选推荐" class="headerlink" title="可选推荐"></a>可选推荐</h3><blockquote><p>分享自己购买过的东西真的好累，没想到不知不觉买了这么多，但是能够对自己派上用场没有浪费也值了</p></blockquote><p><a href="http://163.lu/23D8k4" target="_blank" rel="noopener">泰国制造 天然乳胶枕 护颈优眠 升级抗菌</a><br>我买过记忆枕，空气枕，乳胶枕还有各种酒店的枕头体验。小米 8H 的乳胶枕和网易严选的相比我更推荐严选的升级款，这也属于严选的爆款商品了</p><p><a href="http://163.lu/6iWZ74" target="_blank" rel="noopener">日式多功能颈枕 舒滑款</a><br>第一次看到 MUJI 的微粒子 U 型枕就被深深吸引，现在小米和网易严选都有同样类型的，我自己购买的是光滑面料，毕竟新加坡非常热，原来在国内我还买过一个经典款</p><p><a href="http://163.lu/9iYPC2" target="_blank" rel="noopener">舒眠真丝眼罩</a><br>折叠床是带不过去了，很早之前买过零听眼罩，用过真丝眼罩后才明白丝的舒服，就和上面买真丝枕套的理由一样。如果你对声音也很敏感，除了戴耳机以外，再购置几副耳塞也是不错的选择</p><p>[鼻毛修剪器]<br>~~ 没有看到小米和严选有~~ 现在严选和小米素士都做了，看了张大妈的评测最后淘宝购入松下 ER-BN50，虽然不知道和国产的飞科相比有多大优势，至少用下来还行吧</p><p>[洗护 / 牙膏 / 洗面奶 / 防晒霜]<br>我推荐带上便携装，其实选择什么不重要，重要的是理解背后的成分，我唯一推荐的就是自己在上海和新加坡都长期使用的<a href="http://163.lu/lWFct2" target="_blank" rel="noopener"> 熊野油脂 无硅弱酸性马油洗发水</a></p><p><a href="http://163.lu/M8IW72" target="_blank" rel="noopener">Swisse 男士复合维生素 120 片 / 瓶</a><br>加上我在上海之前吃的半瓶，一共带了 2.5 瓶过去，现在回头看这个决定是非常明智的，因为新加坡本地蔬菜和水果不算便宜，关键是营养品价格奇高，一小瓶都要五六十新币。营养品不能代替药物，更不能代替你规律的饮食作息和身体锻炼，请记住这只是用来辅助身体营养平衡。我妻子还会购买 Swisse 的女士复合维生素片 + 葡萄籽和 Unichi 玫瑰果 + 葡萄籽</p><p><a href="http://163.lu/PsXds0" target="_blank" rel="noopener">考拉工厂店 便携式手持蒸汽挂烫机</a><br>我妻子要买的，方便小巧，出席正式场合会排上用场</p><p><a href="http://163.lu/WXcRz2" target="_blank" rel="noopener">考拉工厂店 强力除螨吸尘器</a><br>我没同意我妻子买养生壶和破壁料理机，原本这么大个头的除螨仪其实也是拒绝的，但是在阅读过网易浪潮工作室的一篇《中国人为什么爱晒被子》后我认为在美国或者韩国流行的洗衣烘干一体机可能不适合现在的我们，但是我不希望自己身边的人因为痘痘或者皮肤细菌感染而受到伤害，既然网易工厂店降低了除螨仪的购买门槛，为什么不尝试改变下自己的习惯呢？</p><p><a href="http://163.lu/oCJS84" target="_blank" rel="noopener">春风 TryFun 超润滑避孕套</a><br>好孩子就不要点击了，尤其是不要淘气切换到春风 TryFun 系列</p><h2 id="工作招聘"><a href="#工作招聘" class="headerlink" title="工作招聘"></a>工作招聘</h2><p><img src="https://raw.githubusercontent.com/wsgzao/storage-public/master/img/20191226105334.png" alt=""></p><p><a href="https://www.liepin.com/company/7952664/" target="_blank" rel="noopener">中金所技术公司招聘</a></p><p><a href="https://docs.qq.com/doc/B80RhZ2ZATLC0DsTVf3kFjA01XR7Mg1x8BG42bVOrs1E5zYc01HWAZ0vDTku39xOdU3cS99t2" target="_blank" rel="noopener">Sea Job Openings</a></p><p>这是我第一次创建微信个人公众号，不会向大家推送文章，只是作为信息分享的渠道。我和上家公司以及现在公司的人力关系都还不错，在征得允许的前提下给大家分享上海和新加坡这两家公司目前的内部招聘动态，上海的职位真的的是进去的多出来的少，如果你希望相对稳定那这是很不错的机会。新加坡这边我会跟随公司内部招聘邮件每半个月左右更新，工作语言以英文为主，周围的中国同事还比较多，不用太担心在新加坡的语言关。这两家公司的介绍都可以在互联网上轻松获取，如果你相信自己的能力可以直接投递简历至文章内的联系方式。努力奋斗未必都能达到预想的结果，但至少你做出了自己的选择。</p><p><a href="https://osjobs.net/interview/posts/%E8%B0%B7%E6%AD%8Chr%E7%9A%84%E6%96%B0%E5%8A%A0%E5%9D%A1%E5%8D%81%E5%B9%B4/" target="_blank" rel="noopener">谷歌 HR 的新加坡十年</a></p><blockquote><p>如果收到新加坡 offer 但不确定薪资是否合理，可以通过新加坡政府网站 mycareersfuture 的公开数据作为参考</p></blockquote><p><a href="https://www.mycareersfuture.sg/" target="_blank" rel="noopener">https://www.mycareersfuture.sg/</a></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><blockquote><p>如果你无法访问原文可以查看其他国内镜像如知乎，如果你只想了解我前往新加坡的求职过程可以看微信公众号的提炼内容</p></blockquote><p>从国内跳槽至新加坡工作的经验分享<br><a href="https://wsgzao.github.io/post/singapore">https://wsgzao.github.io/post/singapore</a></p><p><a href="https://zhuanlan.zhihu.com/p/44280335" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/44280335</a></p><p>从国内跳槽至新加坡的最初半年，我都经历了什么？</p><p><a href="https://mp.weixin.qq.com/s/gDntToVrvFoQbyfrNf7XqA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/gDntToVrvFoQbyfrNf7XqA</a></p><p>从小到大我都没有离开过父母的保护，感谢你们的理解和支持，也同样感谢老婆的付出和双方家庭的包容。</p><p>引用领结婚证那天分享在朋友圈的一句话作为结语: I never grew up, but I never stop growing.</p>]]></content>
    
    <summary type="html">
    
      从国内跳槽至新加坡工作的经验分享
    
    </summary>
    
      <category term="生活 | Life" scheme="https://wsgzao.github.io/categories/%E7%94%9F%E6%B4%BB-Life/"/>
    
    
  </entry>
  
  <entry>
    <title>使用 GitHub 和 Hexo 搭建免费静态 Blog</title>
    <link href="https://wsgzao.github.io/post/hexo/"/>
    <id>https://wsgzao.github.io/post/hexo/</id>
    <published>2020-09-06T09:40:07.000Z</published>
    <updated>2020-10-23T09:09:45.768Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.v2ex.co/5bb7J7NT.png" alt=""></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>习惯自己写 Blog 的朋友一定不会陌生 Wordpress，或许也曾在新浪博客和 QQ 空间留过脚印，但静心认真思考一下，似乎我们又总是向往更加简单自由的写作方式。GitHub 给我们提供了一个无限的空间，我们需要珍惜使用，而 Hexo 的出现从某种意义上来说代替了 Jekyll，让我们可以更专注于写作本身。本文主要介绍自己的实践心得并不断完善内容，衍生知识和原理推荐大家认真阅读官网的手册，其它推荐参考内容链接在文中也会标注出来。</p><blockquote><p><a href="http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html" target="_blank" rel="noopener">阮一峰 - 喜欢写 Blog 的人，会经历三个阶段</a></p></blockquote><p>第一阶段，刚接触 Blog，觉得很新鲜，试着选择一个免费空间来写。<br>第二阶段，发现免费空间限制太多，就自己购买域名和空间，搭建独立博客。<br>第三阶段，觉得独立博客的管理太麻烦，最好在保留控制权的前提下，让别人来管，自己只负责写文章。</p><h2 id="更新历史"><a href="#更新历史" class="headerlink" title="更新历史"></a>更新历史</h2><p>2020 年 09 月 06 日 - 更新 macOS 下部署 Hexo 5.0 步骤，重构文章内容<br>2015 年 11 月 18 日 - 推荐 iissnan 的主题，完善细节内容<br>2015 年 09 月 03 日 - 完善 Windows 10 安装 Hexo 中的细节<br>2015 年 03 月 22 日 - 更新 Windows 下 Hexo 3.0 安装和升级，感谢<a href="http://akarin.xyz" target="_blank" rel="noopener">@机智的阿卡林酱</a><br>2015 年 03 月 10 日 - 增加 Hexo 3.0 降级 2.8<br>2014 年 12 月 19 日 - 完善内容<br>2014 年 12 月 09 日 - 更新 Hexo 配置修改部分<br>2014 年 06 月 19 日 - 更新全部基础架构，待完善配置修改部分<br>2014 年 06 月 17 日 - 更新部分 Hexo 建站过程，待完善<br>2014 年 05 月 29 日 - 撰写初稿</p><p>阅读原文 - <a href="https://wsgzao.github.io/post/hexo/">https://wsgzao.github.io/post/hexo/</a></p><hr><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p><strong> 注意 </strong> 本文主要针对 <code>Windows</code> 平台和 <code>Hexo 5.x</code></p><h3 id="了解-Hexo"><a href="#了解-Hexo" class="headerlink" title="了解 Hexo"></a>了解 Hexo</h3><blockquote><p>A fast, simple &amp; powerful blog framework</p></blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<br><a href="http://hexo.io/" target="_blank" rel="noopener">hexo.io</a></p><h3 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h3><p><a href="https://windows.github.com/" target="_blank" rel="noopener">GitHub Windows</a></p><p>简单可依赖，安装完成后依据提示操作即可，So Easy</p><h3 id="安装-Node-JS"><a href="#安装-Node-JS" class="headerlink" title="安装 Node.JS"></a>安装 Node.JS</h3><p><a href="http://nodejs.org/" target="_blank" rel="noopener">Node.JS</a></p><p><strong> 注意 </strong> 安装完成后添加 Path 环境变量，使 <code>npm</code> 命令生效。新版已经会自动配置 Path</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;C:\Program Files\nodejs\node_modules\npm</span><br></pre></td></tr></table></figure><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><p>配置好 <code>GitHub</code> 家目录后，双击桌面上的 <code>Git Shell</code>，输入 <code>npm</code> 命令即可安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">npm install hexo --save</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果命令无法运行，可以尝试更换 taobao 的 npm 源</span></span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line"><span class="comment"># macOS 首次安装 hexo-cli 会出现权限报错</span></span><br><span class="line">npm install hexo-cli -g</span><br><span class="line"></span><br><span class="line">npm WARN checkPermissions Missing write access to /usr/<span class="built_in">local</span>/lib/node_modules</span><br><span class="line">npm ERR! code EACCES</span><br><span class="line">npm ERR! syscall access</span><br><span class="line">npm ERR! path /usr/<span class="built_in">local</span>/lib/node_modules</span><br><span class="line">npm ERR! errno -13</span><br><span class="line">npm ERR! Error: EACCES: permission denied, access <span class="string">'/usr/local/lib/node_modules'</span></span><br><span class="line">npm ERR!  [Error: EACCES: permission denied, access <span class="string">'/usr/local/lib/node_modules'</span>] &#123;</span><br><span class="line">npm ERR!   errno: -13,</span><br><span class="line">npm ERR!   code: <span class="string">'EACCES'</span>,</span><br><span class="line">npm ERR!   syscall: <span class="string">'access'</span>,</span><br><span class="line">npm ERR!   path: <span class="string">'/usr/local/lib/node_modules'</span></span><br><span class="line">npm ERR! &#125;</span><br><span class="line">npm ERR!</span><br><span class="line">npm ERR! The operation was rejected by your operating system.</span><br><span class="line">npm ERR! It is likely you <span class="keyword">do</span> not have the permissions to access this file as the current user</span><br><span class="line">npm ERR!</span><br><span class="line">npm ERR! If you believe this might be a permissions issue, please double-check the</span><br><span class="line">npm ERR! permissions of the file and its containing directories, or try running</span><br><span class="line">npm ERR! the <span class="built_in">command</span> again as root/Administrator.</span><br><span class="line"></span><br><span class="line">npm ERR! A complete <span class="built_in">log</span> of this run can be found <span class="keyword">in</span>:</span><br><span class="line">npm ERR!     /Users/wangao/.npm/_logs/2020-09-06T08_50_44_338Z-debug.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用以下命令修改权限解决</span></span><br><span class="line">sudo chown -R `whoami` ~/.npm</span><br><span class="line">sudo chown -R `whoami` /usr/<span class="built_in">local</span>/lib/node_modules</span><br></pre></td></tr></table></figure><h2 id="Hexo-初始化配置"><a href="#Hexo-初始化配置" class="headerlink" title="Hexo 初始化配置"></a>Hexo 初始化配置</h2><h3 id="Hexo-官方步骤"><a href="#Hexo-官方步骤" class="headerlink" title="Hexo 官方步骤"></a>Hexo 官方步骤</h3><blockquote><p>简单几步就可以在本地执行，还有一些插件需要和第三方主题搭配使用</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><h3 id="创建-Hexo-文件夹"><a href="#创建-Hexo-文件夹" class="headerlink" title="创建 Hexo 文件夹"></a>创建 Hexo 文件夹</h3><p>安装完成后，根据自己喜好建立目录（如 <code>E:\kuaipan\GitHub\hexo</code>），进入 <code>Git Shell</code> 切换到该路径下 <code>E:\kuaipan\GitHub\hexo</code> 执行以下指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</span></span><br><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">$ npm install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建完成后，指定文件夹的目录如下</span></span><br><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── scripts</span><br><span class="line">├── <span class="built_in">source</span></span><br><span class="line">|      ├── _drafts</span><br><span class="line">|      └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><h3 id="安装-Hexo-插件"><a href="#安装-Hexo-插件" class="headerlink" title="安装 Hexo 插件"></a>安装 Hexo 插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-archive --save</span><br><span class="line">npm install hexo-generator-category --save</span><br><span class="line">npm install hexo-generator-tag --save</span><br><span class="line">npm install hexo-server --save</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-deployer-heroku --save</span><br><span class="line">npm install hexo-deployer-rsync --save</span><br><span class="line">npm install hexo-deployer-openshift --save</span><br><span class="line">npm install hexo-renderer-marked@0.2 --save</span><br><span class="line">npm install hexo-renderer-stylus@0.2 --save</span><br><span class="line">npm install hexo-generator-feed@1 --save</span><br><span class="line">npm install hexo-generator-sitemap@1 --save</span><br></pre></td></tr></table></figure><h3 id="本地查看效果"><a href="#本地查看效果" class="headerlink" title="本地查看效果"></a>本地查看效果</h3><p>继续执行以下命令，成功后可登录 <code>localhost:4000</code> 查看效果<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure></p><h3 id="Hexo-简写命令"><a href="#Hexo-简写命令" class="headerlink" title="Hexo 简写命令"></a>Hexo 简写命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo n <span class="comment"># 生成文章，或者 source\_posts 手动编辑 </span></span><br><span class="line">hexo s <span class="comment"># 本地发布预览效果</span></span><br><span class="line">hexo g <span class="comment"># 生成 public 静态文件</span></span><br><span class="line"> 最后我选择手动同步更新至 GitHub</span><br></pre></td></tr></table></figure><h2 id="部署静态网页到-GitHub"><a href="#部署静态网页到-GitHub" class="headerlink" title="部署静态网页到 GitHub"></a>部署静态网页到 GitHub</h2><h3 id="注册设置-GitHub"><a href="#注册设置-GitHub" class="headerlink" title="注册设置 GitHub"></a>注册设置 GitHub</h3><ol><li>登录<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>，注册自定义用户名如 <code>wsgzao</code></li><li>在主页右下角创建 <code>New repository</code>，name 必须和用户名一致如 <code>wsgzao.github.io</code></li><li>首次创建耐心等待 10 分钟左右审核，之后即可访问静态主页如<a href="https://wsgzao.github.io">https://wsgzao.github.io</a></li></ol><h3 id="同步内容至-GitHub"><a href="#同步内容至-GitHub" class="headerlink" title="同步内容至 GitHub"></a>同步内容至 GitHub</h3><ol><li>下载<a href="https://windows.github.com/" target="_blank" rel="noopener">GitHub Windows</a></li><li>设置 <code>Local path</code> 如 <code>E:\ 快盘 \ GitHub\</code></li><li>运行 <code>Git Shell</code> 切换到如 <code>E:\ 快盘 \ GitHub\hexo</code> 路径下</li><li>执行 <code>hexo g</code> 命令生成 <code>public</code> 文件夹</li><li>把生成的内容全部拷贝到 <code>Local path</code> 或其子目录</li><li>运行 <code>GitHub</code> 确认修改信息后执行右上角的 <code>Sync</code> 同步</li><li>最后访问主页观察效果</li></ol><p><a href="https://pages.github.com/" target="_blank" rel="noopener">https://pages.github.com/</a></p><h2 id="域名和-DNS"><a href="#域名和-DNS" class="headerlink" title="域名和 DNS"></a>域名和 DNS</h2><h3 id="域名推荐"><a href="#域名推荐" class="headerlink" title="域名推荐"></a>域名推荐</h3><blockquote><p>GoDaddy makes registering Domain Names fast, simple, and affordable.</p></blockquote><p>【推荐理由】两个字“靠谱”，支持支付宝，附优惠码链接</p><p><a href="http://www.godaddy.com/" target="_blank" rel="noopener">http://www.godaddy.com/</a><br><a href="http://www.gdcodecoupon.com/" target="_blank" rel="noopener">http://www.gdcodecoupon.com/</a></p><h3 id="DNS-推荐"><a href="#DNS-推荐" class="headerlink" title="DNS 推荐"></a>DNS 推荐</h3><blockquote><p>致力于为您提供最稳定、最安全的域名解析服务</p></blockquote><p>【推荐理由】依然是两个字“靠谱”，感谢他们一直以来对于公益的坚持</p><p><a href="https://www.dnspod.cn/" target="_blank" rel="noopener">https://www.dnspod.cn/</a></p><h3 id="设置-CNAME"><a href="#设置-CNAME" class="headerlink" title="设置 CNAME"></a>设置 CNAME</h3><ol><li>在 Github 的网站目录下创建 <code>CNAME</code> 文件</li><li>填写自己的域名如 <code>hellodog.com</code>，保存结束</li><li>登录 DNSPod，先添加域名，然后添加记录，设置如下</li></ol><table><thead><tr><th>主机记录</th><th>记录类型</th><th>线路类型</th><th>记录值</th><th>MX 优先级</th><th>TTL</th></tr></thead><tbody><tr><td>@</td><td>CNAME</td><td>默认</td><td>wsgzao.github.io.</td><td>-</td><td>10</td></tr><tr><td>www</td><td>CNAME</td><td>默认</td><td>wsgzao.github.io.</td><td>-</td><td>10</td></tr></tbody></table><h2 id="Hexo-配置修改"><a href="#Hexo-配置修改" class="headerlink" title="Hexo 配置修改"></a>Hexo 配置修改</h2><blockquote><p>告诉自己为什么要选择 Hexo</p></blockquote><h3 id="知识储备"><a href="#知识储备" class="headerlink" title="知识储备"></a>知识储备</h3><ol><li>勤学勤练 Markdown</li></ol><blockquote><p>本地 + 云端备份数据是一种习惯</p></blockquote><p>Markdown 学习路径 - <a href="https://wsgzao.github.io/post/markdown/">https://wsgzao.github.io/post/markdown/</a></p><ol start="2"><li>使用性感的文本编辑器</li></ol><blockquote><p>工欲善其事必先利其器</p></blockquote><ul><li>Notepad2</li><li>Visual Studio Code</li></ul><h3 id="Hexo-主题"><a href="#Hexo-主题" class="headerlink" title="Hexo 主题"></a>Hexo 主题</h3><blockquote><p>选择主题建议遵循 <code>KISS</code> 原则</p></blockquote><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo Themes</a></p><p><a href="https://github.com/next-theme/hexo-theme-next" target="_blank" rel="noopener">hexo-theme-next</a></p><p><a href="https://github.com/fluid-dev/hexo-theme-fluid" target="_blank" rel="noopener">hexo-theme-fluid</a></p><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ol><li>修改配置文件时注意 <code>YAML</code> 语法，参数 <code>冒号:</code> 后一定要留 <code>空格</code></li><li>中文乱码请修改文件编码格式为 <code>UTF-8</code></li><li><a href="https://hexo.io/zh-cn/docs/migration.html" target="_blank" rel="noopener">如何迁移至 Hexo</a></li></ol><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo 官方中文文档</a></p>]]></content>
    
    <summary type="html">
    
      持续更新Hexo的摸索过程，记录生活的点滴
    
    </summary>
    
      <category term="Hexo" scheme="https://wsgzao.github.io/categories/Hexo/"/>
    
    
  </entry>
  
  <entry>
    <title>Markdown 学习路径</title>
    <link href="https://wsgzao.github.io/post/markdown/"/>
    <id>https://wsgzao.github.io/post/markdown/</id>
    <published>2020-09-05T02:36:01.000Z</published>
    <updated>2020-09-22T03:00:04.665Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.v2ex.co/3CAMX9Z2.png" alt=""></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Markdown 是一种轻量级的标记语言，流行程度已经得到了 GitHub 和 Stack Overflow 的广泛支持，作为普通人我们也可以轻松上手，结合 Hexo 我们可以十分优雅的分享知识。</p><p>对比 2014 年我写 Markdown 推广文章的时候，目前国内主流的站点基本都开始支持 Markdown 语法，从一开始的简书和 SegmentFault 到后起之秀的知乎和掘金等平台都在鼓励大家积极学习和使用 Markdown，我相信掌握 Markdown 书写习惯一定会对大家有所帮助。</p><blockquote><p>简单易读专注内容，我选 Markdown</p></blockquote><hr><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><p>2020 年 09 月 05 日 - 更新内容<br>2014 年 12 月 10 日 - 撰写初稿</p><p>阅读原文 - <a href="https://wsgzao.github.io/post/markdown/">https://wsgzao.github.io/post/markdown/</a></p><hr><h2 id="学习路径"><a href="#学习路径" class="headerlink" title="学习路径"></a>学习路径</h2><blockquote><p>学 + 不断练习使用就会了</p></blockquote><p><a href="https://sspai.com/post/25137" target="_blank" rel="noopener">认识与入门 Markdown</a></p><p><a href="https://www.jianshu.com/p/q81RER" target="_blank" rel="noopener">献给写作者的 Markdown 新手指南</a></p><p><a href="https://segmentfault.com/markdown" target="_blank" rel="noopener">Markdown 编辑器语法指南</a></p><p><a href="https://learnxinyminutes.com/docs/zh-cn/markdown-cn/" target="_blank" rel="noopener">X 分钟速成 Y</a></p><h2 id="Markdown-在线编辑器"><a href="#Markdown-在线编辑器" class="headerlink" title="Markdown 在线编辑器"></a>Markdown 在线编辑器</h2><p><a href="https://stackedit.io/app#" target="_blank" rel="noopener">StackEdit</a></p><p><a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="noopener">Cmd Markdown 编辑阅读器</a></p><p><a href="https://www.mdnice.com/" target="_blank" rel="noopener">Markdown Nice</a></p><p><a href="https://preview.mdnice.com/article/user/solve/" target="_blank" rel="noopener">如何有效的解决 mdnice 相关问题？</a></p>]]></content>
    
    <summary type="html">
    
      在实践中轻轻松松学习Markdown
    
    </summary>
    
      <category term="Hexo" scheme="https://wsgzao.github.io/categories/Hexo/"/>
    
    
  </entry>
  
  <entry>
    <title>一亩三分地题库 + 新手上路答案</title>
    <link href="https://wsgzao.github.io/post/1point3acres/"/>
    <id>https://wsgzao.github.io/post/1point3acres/</id>
    <published>2020-08-21T08:40:53.000Z</published>
    <updated>2020-08-23T09:24:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>注册一亩三分地之后需要答题完成新手认证，虽然题目不难但想一次通过还是需要花一点时间，我在网上搜索到了相关答案，整理转载下留给需要的同志们参考，一亩三分地题库 + 新手上路答案</p><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><p>2020 年 08 月 21 日 - 初稿</p><p>阅读原文 - <a href="https://wsgzao.github.io/post/1point3acres/">https://wsgzao.github.io/post/1point3acres/</a></p><h2 id="答题类型"><a href="#答题类型" class="headerlink" title="答题类型"></a>答题类型</h2><ol><li>一亩三分地 新手上路 网站规则 - 满分 5 大米(适用于所有用户)</li><li>一亩三分地 考试中心 满分 95 大米(只适用于 2019 年之后注册的新人)</li><li>一亩三分地 每日答题 题库</li></ol><h2 id="网站规则-满分-5-大米"><a href="#网站规则-满分-5-大米" class="headerlink" title="网站规则 - 满分 5 大米"></a>网站规则 - 满分 5 大米</h2><ol><li><p>一亩三分地发帖可以选择内容用 hide 进行隐藏。隐藏方式：[hide=200]隐藏的内容 [/hide] 下面哪个选项 hi‍‌‌‌‌‌‌‌‍‍‍‌‌‌‍‌‌‌‌‌de 正确。 (1.0 分)<br><strong>A. 两人第一次华山论剑，争的是荣名与 [hide=188]《九阴真经》[/hide]；</strong><br>B. 第二次在桃花岛过招，是为了郭靖与 [hide=188]欧阳克 [\hide]争婚。<br>C. 第三次海上相斗，生死只隔一线，但 (hide=188) 洪七公 (\ hide) 手下尚自容让；<br>D. 现下第四次恶战，[hide188]才是各出全力 [/hide]，再无半点留情。<br>E. 洪七公伸指疾点欧阳锋背心 [hide=188]“凤尾穴”(/hide)，要迫他松手。</p></li><li><p>为什么一亩三分地除了租房广告找室友、学有飞友工友、本地版聚等少数版块之外，绝大多数板块都不允许拉群？ (1.0 分)<br>A. 地里信息是公开的，全部回复每个人都可以看到。而群里的信息，作为新入群的同学是无法看到历史消息的，并且无法查找<br>B. 公开自己的微信，将来可能会被人人肉或者骚扰<br>C. 地里的信息永远存在，有些群很可能不活跃甚至不存在了，里面的讨论也就消失了<br><strong>D. 以上全都理解并接受 </strong></p></li><li><p>在下面哪些板块里留微信号等各种联系方式，事后可以要求版主删除？ (1.0 分)<br>A. 如果发在求职类板块里，可以删除，我的隐私你得尊重啊<br>B. 如果发在留学类板块里，可以删除，毕竟我年少不懂事嘛<br>C. 如果发在非正事、无聊帖子里，可以删除，毕竟没啥营养啊<br><strong>D. 绝大多数板块禁止留微信、拉群，如果你非要发出来，那就永远不删。另外，私下联系建议发站内信。</strong></p></li><li><p>为什么我们不鼓励用谐音或者各种拐弯抹角的说法来指代公司或者学校名称？比如：“湾区某元音开头和结尾公司” (1.0 分)<br>A. 也许有什么顾虑吧<br>B. 这样不好玩<br><strong>C. 写成这样子，别人看不懂，也搜不到。如果别人也这样写，你也看不懂、搜不到。信息没法分享和交流。</strong><br>D. 不知道</p></li><li><p>下面哪个说法是错误的？ (1.0 分)<br>A. 连续超过 14 天不登录，每天扣一个大米，直到大米数 = 100<br><strong>B. 抖包袱版看帖，不会消耗积分 </strong><br>C. 可以消耗积分更改用户名（网站右上角设置 -&gt;个人资料 -&gt;更改用户名）<br>D. 看到干货帖子和回复，给作者加分，不会消耗我的积分<br>E. 每日签到、每日答题都可以拿到积分奖励<br>F. 手机 app 里也可以每日签到，好方便！<br>G. 给地里官方 app 五星好评，可以拿加分奖励: <a href="http://www.1point3acres.com/bbs/thread\-446981\-1\-1.html" target="_blank" rel="noopener">www.1point3acres.com/bbs/thread\-446981\-1\-1.html</a><br>H. 在手工加分的帖子里，多次回复骗取积分，会被系统检测到，积分扣除 + 额外扣分！<br>I. 网站上方导航栏 -&gt; 道具中心，可以兑换匿名卡，把自己的帖子匿名。</p></li></ol><h2 id="网站规则-满分-95-大米"><a href="#网站规则-满分-95-大米" class="headerlink" title="网站规则 - 满分 95 大米"></a>网站规则 - 满分 95 大米</h2><ol><li><p>一亩三分地里有哪些方面的信息？ (5.0 分)<br><strong>A. 美国大学各专业录取信息<br>B. 美国和中国公司面试题目<br>C. 买房买车租‍‌‌‌‌‌‌‌‍‍‍‌‌‌‍‌‌‌‌‌房等生活信息<br>D. 移民签证 H1B 等信息<br>E. 公开课、刷题、做项目<br>F. 八卦我司版：美国公司评价（各公司员工发帖）<br>G. 抖包袱版：各公司工资 offer 的详细数目<br>H. 缘来如此版可以发帖征友<br>I. 职场达人：中美职场和职业发展话题<br>J. TOEFL/GRE 考试信息 </strong></p></li><li><p>一亩三分地有积分限制，请戳这里阅读《攒积分和消耗积分完全指南》然后回答：下面哪些说法正确？ (10.0 分)<br><strong>A. 认真做考卷，很容易拿到满分<br>B. 每日签到（网站右上方），奖励 1 颗大米<br>C. 每日答题（网站右上方），答对了奖励 1 颗大米，答错了消耗 1 颗<br>D. 设置头像，奖励一颗大米（只能获得一次）<br>E. 验证邮箱，奖励一颗大米（只能获得一次）<br>F. 管理员每日选择 2-3 个干货帖子全站置顶，大家会奖励给你大米<br>G. 分享面经、录取信息、工资数目等干货，或者积极参与讨论<br>H. 积极参与论坛各种活动，比如给地里官方 app 五星好评<br>I. 《攒积分和消耗积分完全指南》里有更多获取积分方法的说明<br>J. 积分变更记录在网站右上角设置 -&gt;积分里能找到（2019 年 3 月 2 日之前的部分记录不显示，之后的全显示）</strong></p></li><li><p>一亩三分地发帖可以选择内容进行隐藏。举个例子：<br>黄蓉哭了一会，抽抽噎噎的道：“我听爹爹说过，洪老前辈有一套武功，当真是天下无双、古今独步，甚至全真教的王重阳也忌惮三分，叫做…… 叫做…… 咦，我怎么想不起来啦，明明刚才我还记得的，我想求他教你，这套拳法叫做…… 叫做……”其实她哪里知道，全是信口胡吹。洪七公在树顶上听她苦苦思索，实在忍不住了，喝道：“叫做‘[hide=200]降龙十八掌 [/hide]’！”说着一跃而下。上述段落里，“降龙十八掌”五个字被隐藏，只有积分&gt;=200 分的用户才能看到。<br>隐藏方式：[hide=200]隐藏的内容 [/hide] 注意不要添加多余的空格！第二个 hide 前面的斜线别弄反方向！下面隐藏的内容哪个被 188 分正确隐藏？真相只有一个！ (10.0 分)<br>A. 柯南的名字是 [hide=188]工藤新一 [\hide]<br>B. 柯南的名字是 [hide]工藤新一 [/hide=188]<br><strong>C. 柯南的名字是 [hide=188]工藤新一 [/hide]</strong><br>D. 柯南的名字是 [hide=188]工藤新一 [\ hide]<br>E. 柯南的名字是 [hide=188]工藤新一{\hide}<br>F. 柯南的名字是 (hide=188) 工藤新一(\hide)</p></li><li><p>在论坛发 slack 群、qq 群、微信群等任何站外讨论方式，会如何？ (10.0 分)<br>A. 如果发在本地版聚、租房找室友、飞友学友工友版块，是允许的<br>B. 如果发在求职、面经、申请类板块里，都会被删帖扣分<br>C. 举报这些群，可能得到加分奖励<br><strong>D. 以上都正确 </strong></p></li><li><p>下面哪种情况，管理员会按照你的要求，进行删帖？ (10.0 分)<br>A. 问了问题，得到了答案，然后我过河拆桥，删帖让其他人看不到<br>B. 尽管地里不允许，但是我到处留微信号，然后说隐私暴露要求删帖<br>C. 发帖赚到了积分，看到了有权限设置的内容，然后反悔<br><strong>D. 这些情况全都不删帖！</strong></p></li><li><p>你的一亩三分地账号很宝贵，在别的网站，考完托福你就离开了，申请完了你也不会再去。但是在一亩三分地，拿到录取以后，你找实习要回来，找全职工作要回来，申请 OPT 要回来，等 H1b 签证和绿卡要回来，甚至工作几年后要跳槽你也要回来看求职信息 - 随着地里的壮大，你会经常回来。<br>下面哪些方法可以保护你的账号？ (10.0 分)<br><strong>A. 给账号设置复杂密码，并且只在一亩三分地使用该密码。<br>B. 把地里的邮件放入白名单以免被判定为垃圾邮件而导致收不到密码重设等重要信息（地里从来不发广告）。<br>C. 绑定微信。如果账号有异常，会被系统要求扫码登录，而且扫码登录比输入密码方便。<br>D. 管理好用来注册账号的电子邮箱，如果连邮箱都没了，那就惨了。。。</strong><br>E. 别那么多有的没的，我爱咋地就咋地。</p></li><li><p>下面哪些发帖行为，值得鼓励和倡导？ (10.0 分)<br>A. 随便发就是了，反正有版主和管理员给调整<br><strong>B. 读一下各个版块的置顶信息，了解网站规则。<br>C. 发帖之前，先浏览有哪些版块，帖子要发在对应的板块里。</strong><br>D. 帖子设置回复可见，大家必须回复才能看到，然后一堆人发“顶”<br><strong>E. 帖子标题最好能用一句话概括主要内容，方便大家阅读<br>F. 地里很多帖子有分类设置，方便大家查找，发帖确保分类信息设置合理 </strong><br>G. 很多帖子有权限设置，我积分不够，到处发“看不到啊”、“积分不够啊”，水掉论坛</p></li><li><p>新人积分不够。下面哪些做法正确？ (5.0 分)<br><strong>A. 分享干货、签到答题、参加活动等，争取早日攒够积分。</strong><br>B. 到处发帖抱怨积分不够、看不到，没准会有帮助呢。<br>C. 想各种办法绕开积分限制，比如要求楼主私下把信息发给我<br>D. 注册个小号，相互加分（嘿嘿，地里有后台系统检测哦）</p></li><li><p>下面哪些方式，可以获得积分奖励？ (5.0 分)<br><strong>A. 分享干货，无论是录取信息、面经题目、工资数据，还是各种生活经验。</strong><br>B. 在帖子里给别人加分，告诉对方给我加回来。<br><strong>C. 认真参与网站里的讨论，贡献我的看法和信息 </strong><br>D. 没有分享干货，但是可以缠着别人要积分<br><strong>E. 干货帖子被全站置顶或者公众号推出，至少拿 100 分，很多帖子拿到 200+</strong><br>F. 我有信息可以分享，但是大家来给我加分吧，谁加了分我私下里发给你</p></li><li><p>一亩三分地里可以购买 VIP 通行证，位于网站上方导航栏 -&gt; VIP。关于 VIP，下面哪些说法正确？ (10.0 分)<br><strong>A. VIP 可以瞬间解锁地里有权限的帖子，获得阅读权限<br>B. VIP 下载附件不扣积分，不受权限限制<br>C. VIP 用户可以自由搜索，不扣积分 </strong><br>D. VIP 是“免责金牌”，在地里不受规则约束，可以为所欲为<br><strong>E. VIP 获得的只是阅读帖子权限，网站有的功能仍需积分（可以攒大米或者购买蓝莓）<br>F. VIP 收入用来支付一亩三分地运营和发展的必要花费；我的打赏能支持一亩三分地做的更好 </strong></p></li><li><p>下面哪种行为，在地里会被扣光积分，甚至封号？ (10.0 分)<br><strong>A. 戾气十足、人身攻击<br>B. 种种手段恶意刷分<br>C. 软硬广告或导流吸粉<br>D. 造谣或者发钓鱼贴<br>E. 多人共享账号<br>F. 违反版规，胡乱跨版发帖，到处留邮箱或微信号<br>G. 购买了 VIP 通行证，作为付费用户，违反网站规则。</strong></p></li></ol><h2 id="每日答题题库"><a href="#每日答题题库" class="headerlink" title="每日答题题库"></a>每日答题题库</h2><p>【题目】 公司之间级别对应，如下哪个是错误的？<br>Google T5 = Facebook E5/6<br>Uber Sr II = Lyft T6<br>Amazon L7 = Facebook E6<br>✓ Facebook L6 = Facebook E6</p><p>【题目】一亩三分地发帖可以选择内容用 hide 进行隐藏。隐藏方式：[hide=200]隐藏的内容 [/hide] 下面哪个选项 hide 正确。<br>✓ A. 两人第一次华山论剑，争的是荣名与 [hide=188]《九阴真经》[/hide]；<br>B. 第二次在桃花岛过招，是为了郭靖与 [hide=188]欧阳克 [\hide]争婚。<br>C. 第三次海上相斗，生死只隔一线，但 (hide=188) 洪七公 (\ hide) 手下尚自容让；<br>D. 现下第四次恶战，[hide188]才是各出全力 [/hide]，再无半点留情。<br>E. 洪七公伸指疾点欧阳锋背心 [hide=188]“凤尾穴”(/hide)，要迫他松手。</p><p>【题目】为什么一亩三分地除了租房广告找室友、学有飞友工友、本地版聚等少数版块之外，绝大多数板块都不允许拉群？<br>A. 地里信息是公开的，全部回复每个人都可以看到。而群里的信息，作为新入群的同学是无法看到历史消息的，并且无法查找<br>B. 公开自己的微信，将来可能会被人人肉或者骚扰<br>C. 地里的信息永远存在，有些群很可能不活跃甚至不存在了，里面的讨论也就消失了<br>✓ D. 以上全都理解并接受</p><p>【题目】在下面哪些板块里留微信号等各种联系方式，事后可以要求版主删除？<br>A. 如果发在求职类板块里，可以删除，我的隐私你得尊重啊<br>B. 如果发在留学类板块里，可以删除，毕竟我年少不懂事嘛<br>C. 如果发在非正事、无聊帖子里，可以删除，毕竟没啥营养啊<br>✓ D. 绝大多数板块禁止留微信、拉群，如果你非要发出来，那就永远不删。另外，私下联系建议发站内信。</p><p>【题目】为什么我们不鼓励用谐音或者各种拐弯抹角的说法来指代公司或者学校名称？ 比如：“湾区某元音开头和结尾公司”，你能猜到是哪家吗？<br>A. 也许有什么顾虑吧<br>B. 这样不好玩<br>✓ C. 写成这样子，别人看不懂，也搜不到。如果别人也这样写，你也看不懂、搜不到。信息没法分享和交流。<br>D. 不知道</p><p>【题目】下面哪个说法是错误的？<br>A. 连续超过 14 天不登录，每天扣一个大米，直到大米数 = 100<br>✓ B. 抖包袱版看帖，不会消耗积分<br>C. 可以消耗积分更改用户名（网站右上角设置 -&gt;个人资料 -&gt;更改用户名）<br>D. 看到干货帖子和回复，给作者加分，不会消耗我的积分 E. 每日签到、每日答题都可以拿到积分奖励<br>F. 手机 app 里也可以每日签到，好方便！<br>G. 给地里官方 app 五星好评，可以拿加分奖励: <a href="http://www.1point3acres.com/bbs/thread\-446981\-1\-1.html" target="_blank" rel="noopener">www.1point3acres.com/bbs/thread\-446981\-1\-1.html</a> H. 在手工加分的帖子里，多次回复骗取积分，会被系统检测到，积分扣除 + 额外扣分！<br>I. 网站上方导航栏 -&gt; 道具中心，可以兑换匿名卡，把自己的帖子匿名。</p><p>【题目】 下面哪个情况，不会消耗你的积分？<br>超过 14 天不登录<br>使用论坛搜索<br>下载附件<br>✓ 看到干货帖子和精华回复，给作者加分！</p><p>【题目】 下面哪个州，没有 income tax?<br>✓ Nevada<br>New York<br>Nebraska<br>Massachusetts</p><p>【题目】 下面哪个州，有 state income tax<br>Tennessee<br>Alaska<br>Washington<br>✓ Mississippi</p><p>【题目】 求内推如何作死？<br>一下子叫好多人给内推同一家公司<br>别人回复慢了就抱怨<br>简历上撒谎<br>✓ 这些都会作死</p><p>【题目】 下面哪种方法，可以妥妥拿到积分？<br>上传头像<br>每日签到（需绑定微信）<br>分享干货<br>✓ 这些全都可以</p><p>【题目】 回答别人的私信提问还需要消耗我 5 大米怎么办？<br>✓ 直接在版面回答，这样大家都能看见</p><p>【题目】 下面哪种行为，在地里会被扣光积分，甚至封号？<br>✓ 这些全都会</p><p>【题目】一亩三分地发帖可以用 hide 语法隐藏内容。下面哪个写法正确？<br>✓ 柯南的名字是 [hide=200]工藤新一 [/hide]<br>柯南的名字是 [hide=200]工藤新一 [\hide]<br>柯南的名字是 [hide=200]工藤新一 [hide]<br>柯南的名字是 [hide=200]工藤新一 [/hide=200]</p><p>【题目】 在 Linkedin 上求内推如何作死<br>看也不看对方情况，直接扔简历要求内推，国人必须帮助国人啊<br>写模板内容要求内推，不论男女都叫学姐<br>也不自我介绍，就要求对方介绍公司情况<br>✓ 这些都会作死</p><p>【题目】一亩三分地鼓励如何发面经？<br>遇到有人留邮箱，私下发面经的，点举报<br>积分隐藏 [hide==188]内容 [/hide]<br>✓ 以上都正确</p><p>【题目】 下面哪个大学在华盛顿州？<br>Washington University<br>✓ University of Washington<br>George Washington University<br>Washington College</p><p>【题目】下面哪个大学不在 Virginia/DC 附近<br>✓ Washington and Jefferson College<br>Trinity Washington University<br>George Washington University<br>Washington and Lee University</p><p>【题目】 下面哪个州，对公司友好，所以吸引了美国很多公司注册？<br>加利福尼亚<br>✓ 特拉华<br>佛罗里达<br>纽约</p><p>【题目】 下面哪个州，有 state income tax<br>South Dakota<br>Wyoming<br>✓ North Dakota<br>Tennessee</p><p>【题目】 下面哪个州，没有 state income tax<br>New York<br>New Jersey<br>✓ New Hampshire<br>New Mexico</p><p>【题目】 下面哪个州，没有 state income tax?<br>✓ Florida<br>Georgia<br>Hawaii<br>Idahoda</p><p>【题目】 下面哪个州，没有 state income tax?<br>Alabama<br>✓ Alaska<br>Arizona<br>Arkansas</p><p>【题目】下面哪个州冬天最暖和？<br>Minnesota<br>✓ Oklahoma<br>Michigan<br>Massachusetts</p><p>【题目】下面哪个大学实际上不存在？<br>University of California, San Francisco<br>University of Massachusetts, Dartmouth<br>✓ University of Michigan, Twin City<br>University of Nevada, Las Vegas</p><p>【题目】下面哪所大学所在城市不是波士顿？<br>✓ Boston College<br>Berklee College Of Music<br>Northeastern University<br>Boston University</p><p>【题目】下面哪个说法错误？<br>伊利诺伊大学在芝加哥有校区<br>✓ 芝加哥是美国著名的雨城<br>美国西北大学在芝加哥有校区<br>芝加哥 skydeck 上可以看到四个州</p><p>【题目】 Which company is the largest single✓site employer in the US?<br>Walmart<br>Ford<br>Costco<br>✓ Disney World</p><p>【题目】 下面哪种方法，可以妥妥拿到积分？<br>分享干货<br>上传头像<br>每日签到（需绑定微信）<br>✓ 这些全都可以</p><p>【题目】 下面哪家公司的总部不在西雅图<br>亚马逊<br>阿拉斯加航空公司<br>星巴克<br>✓ 波音</p><p>【题目】 给论坛 ios 或者安卓手机应用留评价如何获取 50 大米？<br>留 5 星评价<br>截屏作为证据<br>上传到第一个大区的”官方开发版“<br>✓ 以上步骤都需要</p><p>【题目】 地里发帖可以隐藏内容。假如要设置 200 积分以上才可以看到，下面哪个语法正确？<br>[hide]想要隐藏的内容 [/hide]<br>[hide=200 ]想要隐藏的内容 [/hide]<br>✓ [hide=200]想要隐藏的内容 [/hide]<br>[hide=200]想要隐藏的内容 [hide]</p><p>【题目】 地里面经数目最多的是哪家公司？<br>Facebook<br>Google<br>✓ Amazon<br>Uber</p><p>【题目】 Negotiate 工资的时候，哪种做法有利于得到更大的包裹？<br>拿地里抖包袱版的工资数字要对方 match<br>直接告诉对方自己目前薪酬，让对方看着良心办<br>开一个天价，谈不拢就散伙<br>✓ 精读地里谈工资宝典，知己知彼，百战不殆</p><p>【题目】 which state is University of Miami located?<br>California<br>Nevada<br>✓ Florida<br>Ohio</p><p>【题目】 下面哪个城市没有 SUNY（纽约州立大学）校区？<br>Albany<br>Buffalo<br>✓ Fulton<br>Stony Brook</p><p>【题目】 下面哪个州里有 Disney World？<br>✓ Florida<br>New York<br>North Carolina<br>Texas</p><p>【题目】 下面哪所大学所在城市不是波士顿？<br>✓ MIT<br>Boston University<br>Northeastern University<br>Emerson College</p><p>【题目】 关于旧金山市中心描述，下面哪个不正确？<br>走路得看着路，很多流浪汉，地上屎尿一不小心会踩上<br>车里一定不要放东西，但即使不放，也可能被砸车玻璃<br>Uber/Airbnb/Pinterest/Twitter 等著名科技公司都在 SOMA 区<br>✓ 旧金山创业公司很多，被称为“硅谷”</p><p>【题目】 一亩三分地是哪年创立的？<br>✓ 2009<br>2011<br>2013<br>2015</p><p>【题目】 下面哪个州在美国西海岸<br>VirginiaNorth<br>DakotaMaine<br>✓ Washington</p><p>【题目】 which state is University of Miami located?<br>Ohio<br>✓ Florida<br>Nevada<br>California</p><p>【题目】 加州大学有多个分校，下面哪个成立时间最短？<br>UC Davis<br>✓ UC Merced<br>UC Riverside<br>UC Santa Cruz</p><p>【题目】 下面哪个专业，不是 STEM，OPT 没法延期？<br>会计学以前不是，现在很多学校 stem 获批<br>数据科学<br>EECS<br>✓ 教育学</p><p>【题目】 哪种选校策略最合理？<br>按照排名高低选，谁高谁就好<br>交给中介选，反正不想操心<br>所有学校都申，蒙中哪个算哪个<br>✓ 根据自己下一步职业和学业目标，参考地里数据和成功率，认真斟酌</p><p>【题目】 一亩三分地是谁创立的？<br>✓ Warald<br>俞敏洪<br>李大辉<br>徐小平</p><p>【题目】 下面几个州，哪个离美国首都最远？<br>Maryland<br>Delaware<br>✓ North Carolina<br>Virginia</p><p>【题目】 地里数据科学类职位面经放在在什么版最合理？<br>数据科学版<br>美国面经版数据科学分类<br>✓ 数科面经版<br>找工求职版</p><p>【题目】 下面哪个公司总部在圣地亚哥？<br>✓ Qualcomm<br>AMD<br>Nvidia<br>Netflix</p><p>【题目】 下面哪种情况，管理员会按照你的要求，进行删帖？<br>问了问题，得到了答案，然后我过河拆桥，删帖让其他人看不到<br>发帖赚到了积分，看到了有权限设置的内容，然后反悔<br>尽管地里不允许，但是我到处留微信号，然后说隐私暴露要求删帖<br>✓ 这些情况全都不删帖！</p><p>【题目】 Miami University 在哪个城市<br>Miami, Florida<br>Las Vegas, Nevada<br>✓ Oxford, Ohio<br>Los Angeles, California</p><p>【题目】 想找室友或者当房东，帖子发在哪里？<br>✓ 租房广告 | 找室友版<br>房地产版<br>生活版<br>面经版</p><p>【题目】 在论坛发 slack 群，qq 群，微信群，任何站外讨论方式，会如何？<br>如果发在求职面经大区，申请大区，都会被删帖扣分<br>举报这些群，可能得到加分奖励<br>✓ 以上都正确<br>如果发在版聚，或者本地版块，是允许的</p><p>【题目】 下面哪类版块，可以拉群，而且不会被警告扣分？<br>录取结果汇报<br>求职、面经<br>内推<br>✓ 学友工友、找室友或者版聚本地</p><p>【题目】下面哪个说法错误？<br>雪城大学尽管在纽约州，但是离纽约城很远！<br>✓ 中国驻纽约领事馆位于法拉盛中国城，周围全是好吃的！<br>哥伦比亚大学离纽约中央公园很近<br>纽约州立大学石溪分校学费很便宜</p><p>【题目】 下面哪个学术会议不是机器学习领域的？<br>CVPR<br>ICML<br>SIGKDD<br>✓ ICSE</p><p>【题目】 下面哪个童话故事不是安徒生写的<br>✓ 尼尔斯骑鹅旅行记<br>冰雪女王<br>卖火柴的小女孩<br>国王的新装</p><p>【题目】 下面哪个作家是英国人？<br>✓Charles Dickens<br>Ernest Hemingway<br>Victor Hugo<br>Alexander Pushkin</p><p>【题目】 income tax on wages<br>✓North Dakota<br>South Dakota<br>Wyoming<br>Teness…</p><p>【题目】 下面哪个 machine learning 的模型不是 supervised<br>Logistic regression<br>✓Clustering<br>SVM<br>Decision Tree</p><p>【题目】 Apollo 11 是哪一年登月的？<br>1969</p><p>【题目】 下面哪个公司的 streaming service 不是会员 subscription 付费模式运营的？<br>✓tubi</p><p>【题目】 著名篮球运动员姚明效力的 NBA 球队是休斯敦火箭队。取名 “ 火箭队” 是因为休斯敦是美国著名的?<br>钢城<br>汽车城<br>✓ 宇航工业城<br>电影城</p><p>【题目】 音乐家贝多芬出生于哪国？<br>✓ 德国<br>法国<br>意大利<br>英国</p><p>【题目】 下面哪个 Ivy League，离东海岸最远？<br>Brown<br>Dartmouth<br>Princeton<br>✓ Cornell</p><p>【题目】 美国哪个州没有夏令时？<br>南达科他州<br>爱荷华州<br>✓亚利桑那州<br>阿肯色州</p><p>【题目】 下面哪部作品是喜剧？<br>麦克白<br>李尔王<br>✓仲夏夜之梦<br>哈姆雷特</p><p>【题目】 下面哪个公司总部不在湾区？<br>google<br>✓snapchat<br>facebook<br>Apple</p><p>【题目】 下面哪所纽约高校坐落于中央公园附近？<br>Fordham University<br>New York University<br>New York Institute of Technology<br>✓Columbia University</p><p><a href="https://chrome.google.com/webstore/detail/%E4%B8%80%E4%BA%A9%E4%B8%89%E5%88%86%E5%9C%B0%E6%AF%8F%E6%97%A5%E7%AD%94%E9%A2%98%E5%8A%A9%E6%89%8B/dggkjnoiinakdepkighcnnpjcjldplob/related?hl=zh-CN" target="_blank" rel="noopener">一亩三分地每日答题助手</a></p>]]></content>
    
    <summary type="html">
    
      一亩三分地题库+新手上路答案
    
    </summary>
    
      <category term="生活 | Life" scheme="https://wsgzao.github.io/categories/%E7%94%9F%E6%B4%BB-Life/"/>
    
    
  </entry>
  
  <entry>
    <title>MacBook macOS 从小白到入门</title>
    <link href="https://wsgzao.github.io/post/macbook/"/>
    <id>https://wsgzao.github.io/post/macbook/</id>
    <published>2020-08-18T08:59:49.000Z</published>
    <updated>2020-10-23T07:59:15.654Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><img src="https://i.v2ex.co/y2JB0IAD.png" alt=""></p><p>这里做下 MacBook macOS 从小白到入门的持续更新记录</p><blockquote><p>MacBook macOS 从小白到入门</p></blockquote><h2 id="更新历史"><a href="#更新历史" class="headerlink" title="更新历史"></a>更新历史</h2><p>2020 年 08 月 18 日 - 增加 uTools/macOS 小助手 / 腾讯柠檬清理 / 超级右键 iRightMouse/QQ 影音 / Apifox<br>2020 年 03 月 10 日 - 增加 eZip/PicGo/GifCapture/iShot<br>2019 年 11 月 21 日 - 增加 macOS 生产力工具链推荐<br>2019 年 03 月 16 日 - 更新 macOS vim 语法高亮的设置方法<br>2019 年 02 月 28 日 - 更新 macOS 开启关闭 SIP<br>2019 年 01 月 24 日 - 增加开启 HiDPI 和解决黑屏问题<br>2018 年 10 月 19 日 - 更新升级 macOS Mojave 后的各种小问题解决方法<br>2018 年 07 月 25 日 - 补充细节<br>2018 年 07 月 05 日 - 初稿</p><p>阅读原文 - <a href="https://wsgzao.github.io/post/macbook/">https://wsgzao.github.io/post/macbook/</a></p><p><strong> 扩展阅读 </strong></p><p>Awesome Mac - <a href="http://wangchujiang.com/awesome-mac/index.zh.html" target="_blank" rel="noopener">http://wangchujiang.com/awesome-mac/index.zh.html</a><br>BestApp - <a href="https://github.com/hzlzh/Best-App" target="_blank" rel="noopener">https://github.com/hzlzh/Best-App</a><br><a href="https://github.com/Louiszhai/tool" target="_blank" rel="noopener">开发效率提升：Mac 生产力工具链推荐</a></p><hr><h2 id="MacBook-Pro-Essentials"><a href="#MacBook-Pro-Essentials" class="headerlink" title="MacBook Pro Essentials"></a>MacBook Pro Essentials</h2><blockquote><p>苹果官方编写的 macOS 使用手册，首次打开 Books 时就会出现，非常推荐大家阅读</p></blockquote><p><a href="https://support.apple.com/en-sg/guide/macbook-pro/welcome/mac" target="_blank" rel="noopener">MacBook Pro Essentials</a></p><p><a href="https://support.apple.com/zh-cn/guide/macbook-pro/" target="_blank" rel="noopener">macOS 使用手册</a></p><h2 id="System-Preferences"><a href="#System-Preferences" class="headerlink" title="System Preferences"></a>System Preferences</h2><blockquote><p>在任何的操作系统中，首先你需要做一件事就是更新系统，点击窗口左上角的  &gt; 关于本机 &gt; 软件更新 。此外，如果这是一部新的电脑，你还需要到系统设置进行一些适当调整。如何调整，取决于个人喜好。</p></blockquote><h3 id="触控板"><a href="#触控板" class="headerlink" title="触控板"></a>触控板</h3><p>系统设置 &gt; 触控板</p><p>光标与点击</p><ul><li>轻拍来点按</li><li>辅助点按</li><li>查找</li><li>三指拖移</li></ul><p>滚动缩放</p><ul><li>默认全选</li></ul><p>更多手势</p><ul><li>默认全选</li></ul><h3 id="Dock"><a href="#Dock" class="headerlink" title="Dock"></a>Dock</h3><p>置于屏幕上的位置：左边<br>设置 Dock 图标更小（大小随个人喜好）</p><ul><li>自动显示和隐藏 Dock</li></ul><h3 id="Finder"><a href="#Finder" class="headerlink" title="Finder"></a>Finder</h3><p>Finder &gt; 显示</p><ul><li>显示标签页栏</li><li>显示路径栏</li><li>显示状态栏</li><li>自定工具栏 &gt; 去除所有按钮，仅剩搜索栏</li></ul><p>Finder &gt; 偏好设置</p><p>通用</p><ul><li>开启新 Finder 窗口时打开：HOME「用户名」目录</li></ul><p>边栏</p><ul><li>添加 HOME「用户名」目录 和 创建代码文件目录</li><li>将 共享的(shared) 和 标记(tags) 目录去掉</li></ul><h3 id="菜单栏"><a href="#菜单栏" class="headerlink" title="菜单栏"></a>菜单栏</h3><ul><li>去掉蓝牙等无需经常使用的图标</li><li>将电池显示设置为百分比</li></ul><h3 id="Spotlight"><a href="#Spotlight" class="headerlink" title="Spotlight"></a>Spotlight</h3><ul><li>去掉字体和书签与历史记录等不需要的内容</li><li>设置合适的快捷键</li></ul><h3 id="互联网帐户"><a href="#互联网帐户" class="headerlink" title="互联网帐户"></a>互联网帐户</h3><ul><li>添加 iCloud 用户，同步日历，联系人和 Find my mac 等等</li></ul><h3 id="English"><a href="#English" class="headerlink" title="English"></a>English</h3><p>Trackpad</p><ul><li>Tap to click</li></ul><p>Accessibility -&gt; Mouse &amp; Trackpad -&gt; Trackpad Options</p><ul><li>Enable dragging | three finger drag</li></ul><p>Language &amp; Region</p><ul><li>Time format | 24-Hour Time</li><li>click add button | Chinese, Simplified</li></ul><p>Language &amp; Region -&gt; Keyboard Preferences -&gt; Shortcuts -&gt; Input Sources</p><ul><li>Select the previous input source</li></ul><p>Display -&gt; Arrangement</p><ul><li>Drag the graphics and just make what you want</li><li>if the display rotates 90 degrees then change Rotation to 90° or 270° and click confirm button to save</li></ul><p>Extensions -&gt; Touch Bar</p><ul><li>Customise </li></ul><p>Sound -&gt; Output</p><ul><li>Show volume in menu bar</li></ul><h2 id="Mac-键盘快捷键"><a href="#Mac-键盘快捷键" class="headerlink" title="Mac 键盘快捷键"></a>Mac 键盘快捷键</h2><p><img src="https://raw.githubusercontent.com/wsgzao/storage-public/master/img/20191122174620.png" alt=""></p><table><thead><tr><th style="text-align:center">Symbol</th><th style="text-align:center">Key</th></tr></thead><tbody><tr><td style="text-align:center">&#8984;</td><td style="text-align:center">Command Key</td></tr><tr><td style="text-align:center">&#8963;</td><td style="text-align:center">Control Key</td></tr><tr><td style="text-align:center">&#8997;</td><td style="text-align:center">Option Key</td></tr><tr><td style="text-align:center">&#8679;</td><td style="text-align:center">Shift Key</td></tr></tbody></table><blockquote><p>我自己常用的快捷键</p></blockquote><table><thead><tr><th>快捷键</th><th>描述</th></tr></thead><tbody><tr><td>Command(⌘)-C</td><td>复制</td></tr><tr><td>Command(⌘)-V</td><td>粘贴</td></tr><tr><td>Command(⌘)-Z</td><td>撤销</td></tr><tr><td>Command(⌘)-Option-V</td><td>剪切粘贴</td></tr><tr><td>Command(⌘)-A</td><td>全选</td></tr><tr><td>Command(⌘)-F</td><td>查找</td></tr><tr><td>Command(⌘)-S</td><td>保存</td></tr><tr><td>Command(⌘)-W</td><td>关闭当前窗口</td></tr><tr><td>Command(⌘)- 空格键</td><td>聚焦</td></tr><tr><td>Command(⌘)- 方向左键</td><td>后退</td></tr><tr><td>Command(⌘)- 方向右键</td><td>前进</td></tr><tr><td>Control-A</td><td>移至行或段落的开头</td></tr><tr><td>Control-E</td><td>移至行或段落的末尾</td></tr><tr><td>Control - 空格键</td><td>切换输入法（需要手动设置）</td></tr><tr><td>Control-Command-Q</td><td>系统自带锁屏快捷键</td></tr><tr><td>Option-Command-C</td><td>复制文件路径，当然也可以直接拖拽到命令行</td></tr></tbody></table><p><a href="https://support.apple.com/zh-cn/HT201236" target="_blank" rel="noopener">https://support.apple.com/zh-cn/HT201236</a></p><h2 id="Mac-Soft"><a href="#Mac-Soft" class="headerlink" title="Mac Soft"></a>Mac Soft</h2><p>Homebrew - Mac 下必备的包管理工具<br><a href="https://brew.sh/" target="_blank" rel="noopener">https://brew.sh/</a></p><p>Alfred - Mac 下被无数人安利的效率工具，虽然我觉得 Spotlight 暂时够用了<br><a href="https://www.alfredapp.com/" target="_blank" rel="noopener">https://www.alfredapp.com/</a></p><p>uTools - 国人开发基于插件式的轻量级工具集软件<br><a href="https://u.tools/" target="_blank" rel="noopener">https://u.tools/</a></p><p>macOS 小助手(mac 常用命令集合)<br><a href="https://macwk.com/soft/macos-assistant-macwk" target="_blank" rel="noopener">https://macwk.com/soft/macos-assistant-macwk</a></p><p>腾讯柠檬清理 - 腾讯官方出品的 macOS 清理工具，代替旧版 Mac 管家<br><a href="https://lemon.qq.com/" target="_blank" rel="noopener">https://lemon.qq.com/</a></p><p>Mounty for NTFS - 免费的 NTFS 支持软件<br><a href="http://enjoygineering.com/mounty/" target="_blank" rel="noopener">http://enjoygineering.com/mounty/</a><br><a href="https://www.seagate.com/sg/en/support/software/paragon/#downloads" target="_blank" rel="noopener">Seagate</a></p><p>Sougou Input - 陪伴大家多年的搜狗输入法<br><a href="https://pinyin.sogou.com/mac/" target="_blank" rel="noopener">https://pinyin.sogou.com/mac/</a></p><p>Visual Studio Code - 代替 JetBrains 重型武器<br><a href="https://code.visualstudio.com/" target="_blank" rel="noopener">https://code.visualstudio.com/</a></p><p>Youdao Dict - 网易开发的老牌翻译工具<br><a href="http://cidian.youdao.com/index-mac.html" target="_blank" rel="noopener">http://cidian.youdao.com/index-mac.html</a></p><p>Adobe Reader - Adobe 官方免费的 PDF 阅读工具<br><a href="https://get.adobe.com/reader/" target="_blank" rel="noopener">https://get.adobe.com/reader/</a></p><p>Clearview - 支持 PDF, EPUB, CHM, MOBI 的免费阅读器<br><a href="https://itunes.apple.com/app/clearview/id557090104?mt=12&amp;ls=1" target="_blank" rel="noopener">https://itunes.apple.com/app/clearview/id557090104?mt=12&amp;ls=1</a></p><p>Evernote - 轻量级的在线笔记类应用内<br><a href="https://evernote.com/" target="_blank" rel="noopener">https://evernote.com/</a></p><p>Dropbox - 最佳的实时同步工具之一<br><a href="https://www.dropbox.com/" target="_blank" rel="noopener">https://www.dropbox.com/</a></p><p>eZip - 国人编写的转为 macOS 而设计的压缩软件，代替 Keka<br><a href="https://ezip.awehunt.com/" target="_blank" rel="noopener">https://ezip.awehunt.com/</a></p><p>Mac 迅雷 - 支持协议多广告也多，FOLX、Free Download Manager、qBittorrent 都可以作为备选方案<br><a href="http://mac.xunlei.com/" target="_blank" rel="noopener">http://mac.xunlei.com/</a></p><p>百度网盘 - 国内的网盘共享基本只剩下百度一家独大了，有时候迅雷离线无法下载可以尝试<br><a href="https://pan.baidu.com/" target="_blank" rel="noopener">https://pan.baidu.com/</a></p><p>IINA - 国人编写的开源视频播放器，备选重新复活的射手影音<br><a href="https://iina.io/" target="_blank" rel="noopener">https://iina.io/</a></p><p>QQ 影音 - 腾讯内部公认的 5 星产品复活，此前停更的射手影音也复活了，虽然我认为已经有 IINA 这样更好的开源播放器<br><a href="https://player.qq.com/" target="_blank" rel="noopener">https://player.qq.com/</a></p><p>PicGo - 国人开发的开源图片上传工具，我 Blog 中使用的图片就是基于 GitHub 的图床<br><a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">https://github.com/Molunerfinn/PicGo</a></p><p>GifCapture - 开源的 GIF 录制工具<br><a href="https://github.com/onmyway133/GifCapture" target="_blank" rel="noopener">https://github.com/onmyway133/GifCapture</a></p><p>iShot - 或许是最好的截图软件，超越了 Snipaste 和 Xnip<br><a href="https://apps.apple.com/cn/app/ishot-%E6%88%AA%E5%9B%BE-%E9%95%BF%E6%88%AA%E5%9B%BE-%E6%A0%87%E6%B3%A8%E5%B7%A5%E5%85%B7/id1485844094?mt=12" target="_blank" rel="noopener">https://apps.apple.com/cn/app/ishot-%E6%88%AA%E5%9B%BE-%E9%95%BF%E6%88%AA%E5%9B%BE-%E6%A0%87%E6%B3%A8%E5%B7%A5%E5%85%B7/id1485844094?mt=12</a></p><p>超级右键 iRightMouse - 通过增加右键功能极大地方便 UI 界面下的各种操作<br><a href="https://apps.apple.com/cn/app/irightmouse-%E8%B6%85%E7%BA%A7%E5%8F%B3%E9%94%AE/id1497428978?mt=12" target="_blank" rel="noopener">https://apps.apple.com/cn/app/irightmouse-%E8%B6%85%E7%BA%A7%E5%8F%B3%E9%94%AE/id1497428978?mt=12</a></p><p>FileZilla - 免费开源的 FTP/SFTP 应用<br><a href="https://filezilla-project.org/download.php?type=client" target="_blank" rel="noopener">https://filezilla-project.org/download.php?type=client</a></p><p>Clipy - 记录多条粘贴板小工具<br><a href="https://github.com/Clipy/Clipy" target="_blank" rel="noopener">https://github.com/Clipy/Clipy</a></p><p>rectangle - 代替 Spectacle 快速调整程序窗口位置的效率工具<br><a href="https://github.com/rxhanson/Rectangle" target="_blank" rel="noopener">https://github.com/rxhanson/Rectangle</a></p><p>gfxCardStatus - 用于调整集成显卡和独立显卡，省电减少发热<br><a href="https://gfx.io/" target="_blank" rel="noopener">https://gfx.io/</a></p><p>Fliqlo - 极简的时钟屏保<br><a href="https://fliqlo.com/" target="_blank" rel="noopener">https://fliqlo.com/</a></p><p>Sourcetree - 图形化 Git 管理工具<br><a href="https://www.sourcetreeapp.com/" target="_blank" rel="noopener">https://www.sourcetreeapp.com/</a></p><p>Microsoft Remote Desktop - Mac 下的微软 RDP 远程桌面登录工具<br><a href="https://itunes.apple.com/us/app/microsoft-remote-desktop-10/id1295203466?mt=12" target="_blank" rel="noopener">https://itunes.apple.com/us/app/microsoft-remote-desktop-10/id1295203466?mt=12</a></p><p>PostMan - 免费强大的 HTTP 调试工具<br><a href="https://www.getpostman.com/" target="_blank" rel="noopener">https://www.getpostman.com/</a></p><p>Apifox = Postman + Swagger + Mock 可能是比 Postman 更好用的接口管理平台<br><a href="https://www.apifox.cn/" target="_blank" rel="noopener">https://www.apifox.cn/</a></p><p>网易 MuMu - Android 模拟器<br><a href="https://mumu.163.com/" target="_blank" rel="noopener">https://mumu.163.com/</a></p><p>VirtualBox - 免费的虚拟机工具，付费类的产品包括 VMware Fusion 和 Parallels<br><a href="http://www.oracle.com/technetwork/server-storage/virtualbox/downloads/index.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/server-storage/virtualbox/downloads/index.html</a></p><p>VMware OS Optimization Tool - VMware 开发的 Windows 虚拟机优化工具<br><a href="https://labs.vmware.com/flings/vmware-os-optimization-tool" target="_blank" rel="noopener">https://labs.vmware.com/flings/vmware-os-optimization-tool</a></p><p>Docker Desktop - 如果说之前人人都要懂一点 VM 虚拟机，那么现在就是人人都应该了解一点 Docker 容器<br><a href="https://www.docker.com/products/docker-desktop" target="_blank" rel="noopener">https://www.docker.com/products/docker-desktop</a></p><blockquote><p>付费应用</p></blockquote><p>One Switch - 非常强大的一键切换工具，之前很多人推荐用于 1 秒连接蓝牙耳机，相信大家已经比较熟悉了<br><a href="https://fireball.studio/oneswitch/" target="_blank" rel="noopener">https://fireball.studio/oneswitch/</a></p><h3 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h3><p><a href="https://docs.brew.sh/Installation" target="_blank" rel="noopener">https://docs.brew.sh/Installation</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># install xcode command line tools</span></span><br><span class="line">xcode-select --install</span><br><span class="line"></span><br><span class="line"><span class="comment"># install homebrew</span></span><br><span class="line">/usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># install packages</span></span><br><span class="line">brew tap dteoh/sqa</span><br><span class="line">brew install zsh</span><br><span class="line">brew install wget</span><br><span class="line">brew install git</span><br><span class="line"><span class="comment"># default install is python3 now, if you need python2 just run `brew install python2`</span></span><br><span class="line">brew install python</span><br></pre></td></tr></table></figure><h3 id="iTerm2-zsh-Oh-My-Zsh"><a href="#iTerm2-zsh-Oh-My-Zsh" class="headerlink" title="iTerm2 + zsh + Oh My Zsh"></a>iTerm2 + zsh + Oh My Zsh</h3><p>iTerm2<br><a href="https://www.iterm2.com/" target="_blank" rel="noopener">https://www.iterm2.com/</a></p><p>Oh My Zsh<br><a href="http://ohmyz.sh/" target="_blank" rel="noopener">http://ohmyz.sh/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># install latest zsh zsh-syntax-highlighting</span></span><br><span class="line">brew install zsh zsh-syntax-highlighting zsh-autosuggestions</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改默认 shell，在 /etc/shells 文件中加入如下一行</span></span><br><span class="line">vi /etc/shells</span><br><span class="line"></span><br><span class="line">/usr/<span class="built_in">local</span>/bin/zsh</span><br><span class="line"><span class="comment"># 然后运行命令切换 shell</span></span><br><span class="line">chsh -s /usr/<span class="built_in">local</span>/bin/zsh</span><br><span class="line"></span><br><span class="line"><span class="comment"># install oh-my-zsh</span></span><br><span class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改主题为 agnoster，增加一行 zsh-syntax-highlighting</span></span><br><span class="line">vi ~/.zshrc</span><br><span class="line"></span><br><span class="line">ZSH_THEME=<span class="string">"agnoster"</span></span><br><span class="line"></span><br><span class="line">plugins=(</span><br><span class="line">  git</span><br><span class="line">  autojump</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /usr/<span class="built_in">local</span>/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</span><br><span class="line"><span class="built_in">source</span> /usr/<span class="built_in">local</span>/share/zsh-autosuggestions/zsh-autosuggestions.zsh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决 Too many files open error</span></span><br><span class="line"><span class="built_in">ulimit</span> -n 10000</span><br><span class="line"><span class="built_in">ulimit</span> -u 2048</span><br><span class="line"><span class="comment"># 禁用 brew install 前自动检查更新</span></span><br><span class="line"><span class="built_in">export</span> HOMEBREW_NO_AUTO_UPDATE=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选增加 visual studio code 命令行 code 支持 zsh(新版本 vscode 已经自带支持)</span></span><br><span class="line"><span class="keyword">function</span> code &#123;</span><br><span class="line">    <span class="keyword">if</span> [[ <span class="variable">$#</span> = 0 ]]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        open -a <span class="string">"Visual Studio Code"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">local</span> argPath=<span class="string">"<span class="variable">$1</span>"</span></span><br><span class="line">        [[ <span class="variable">$1</span> = /* ]] &amp;&amp; argPath=<span class="string">"<span class="variable">$1</span>"</span> || argPath=<span class="string">"<span class="variable">$PWD</span>/<span class="variable">$&#123;1#./&#125;</span>"</span></span><br><span class="line">        open -a <span class="string">"Visual Studio Code"</span> <span class="string">"<span class="variable">$argPath</span>"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 刷新环境变量</span></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 powerline 字体</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/powerline/fonts.git</span><br><span class="line"><span class="built_in">cd</span> fonts</span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure><blockquote><p>配置 iTerm2 主题，主题可以从 iterm2colorschemes 下载</p></blockquote><p><a href="https://iterm2colorschemes.com/" target="_blank" rel="noopener">https://iterm2colorschemes.com/</a></p><ol><li>Download iTerm2 color you like</li><li>Open iTerm2 that we already downloaded at the first section</li><li>Go to iTerm2 &gt; Preferences &gt; Profiles &gt; Colors Tab</li><li>Click Color Presets at the bottom right</li><li>Click Import</li><li>Select the *.itermcolors file</li><li>Select the * from Load Presets</li></ol><p>在 Keys -&gt; Hotkey 中设置 <code>command + i</code> 快速显示和隐藏 iTerm<br>在 Profiles -&gt; Default -&gt; Colors -&gt; Load Presets 导入主题，作为默认颜色，我的主题是 <code>3024 Night</code><br>在 Profiles -&gt; Text -&gt; Change Font 调整字体 / 大小 / 颜色等，我的字体是 <code>18pt Ubuntu Mono derivative Powerline</code></p><p>如果 VScode 打开终端 iterm2 乱码可以打开设置搜索 font 修改为以下参数即可解决<br>Editor: Font Family<br>Meslo LG M for Powerline,Menlo, Monaco, ‘Courier New’, monospace</p><p>macOS 使用笔记：终端配置 - <a href="http://lizhiqiang.me/mac_terminal/" target="_blank" rel="noopener">http://lizhiqiang.me/mac_terminal/</a><br>打造 Mac 下高颜值好用的终端环境 - <a href="https://blog.biezhi.me/2018/11/build-a-beautiful-mac-terminal-environment.html" target="_blank" rel="noopener">https://blog.biezhi.me/2018/11/build-a-beautiful-mac-terminal-environment.html</a></p><blockquote><p>macOS vim 语法高亮的设置方法</p></blockquote><p>打开 terminal 复制 /usr/share/vim/vimrc 到家目录下并重命名为 “.vimrc”, 然后编辑该文件，增加以下几行：</p><p>VimConfig - <a href="https://vimconfig.com/" target="_blank" rel="noopener">https://vimconfig.com/</a><br>My .vimrc - <a href="https://chrisyeh96.github.io/2017/12/18/vimrc.html" target="_blank" rel="noopener">https://chrisyeh96.github.io/2017/12/18/vimrc.html</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/share/vim/vimrc ~/.vimrc</span><br><span class="line"><span class="built_in">set</span> ai                  <span class="string">"auto indenting</span></span><br><span class="line"><span class="string">set ruler"</span> show the cursor position</span><br><span class="line"><span class="built_in">set</span> hlsearch            <span class="string">"highlight the last searched term</span></span><br><span class="line"><span class="string">set history=1000"</span> keep 1000 lines of <span class="built_in">history</span></span><br><span class="line">syntax on               <span class="string">"syntax highlighting</span></span><br><span class="line"><span class="string">filetype plugin on"</span> use the file <span class="built_in">type</span> plugins</span><br></pre></td></tr></table></figure><h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><h3 id="iTerm2-常见问题"><a href="#iTerm2-常见问题" class="headerlink" title="iTerm2 常见问题"></a>iTerm2 常见问题</h3><ol><li>iTerm2 默认使用 dash 改用 zsh 解决方法：<code>chsh -s /bin/zsh</code></li><li>iTerm2 zsh 切换回原来的 dash：<code>chsh -s /bin/bash</code></li><li>卸载 <code>oh my zsh</code>，在命令行输入：<code>uninstall_oh_my_zsh</code></li><li>路径前缀的 XX@XX 太长，缩短问题：</li></ol><p>编辑 <code>~/.oh-my-zsh/themes/agnoster.zsh-theme</code> 主体文件，将里面的 <code>build_prompt</code> 下的 <code>prompt_context</code> 字段在前面加 <code>#</code> 注释掉即可</p><h3 id="Macbook-Pro-16-寸唤醒颜色失真问题"><a href="#Macbook-Pro-16-寸唤醒颜色失真问题" class="headerlink" title="Macbook Pro 16 寸唤醒颜色失真问题"></a>Macbook Pro 16 寸唤醒颜色失真问题</h3><p><a href="https://discussionschinese.apple.com/thread/250939091" target="_blank" rel="noopener">https://discussionschinese.apple.com/thread/250939091</a></p><ol><li>官网购买的 16 寸开启原彩显示，自动亮度，夜览，屏幕保护程序后，笔记本睡眠唤醒屏幕颜色完全失真。</li><li>将官网的退回后，第三方店铺购买故障依旧。</li></ol><p>这篇文章中提到的问题我个人认为是软件和硬度温度升高综合引起的，我也确实遇到了，不能算是硬件故障选择去苹果店维修或者更换也无法彻底解决<br>我自己的做法是选择调整 Displays 设置，如果想复现问题关闭再打开 True Tone 就可以看到效果，应该还是软件问题</p><ul><li>关闭 Automatically adjust brightness</li><li>打开 True Tone</li></ul><h3 id="升级-macOS-Mojave-新版卡顿黑屏和字体发虚解决方案"><a href="#升级-macOS-Mojave-新版卡顿黑屏和字体发虚解决方案" class="headerlink" title="升级 macOS Mojave 新版卡顿黑屏和字体发虚解决方案"></a>升级 macOS Mojave 新版卡顿黑屏和字体发虚解决方案</h3><blockquote><p>输入文字卡顿</p></blockquote><p>如果你的 Mac 已经更新至 macOS Mojave，在输入文字时经常卡顿，频繁出现小风车，那很有可能是搜狗输入法造成的，只需将它升级至最新的 4.8.0 版本，即可完美解决。</p><blockquote><p>字体发虚</p></blockquote><p>升级 macOS Mojave 新系统后，苹果默认关闭了子像素抗锯齿，导致字体变细锯齿增多。<br>解决字体渲染过细，打开终端，输入：</p><pre><code>defaults write -g CGFontRenderingFontSmoothingDisabled -bool NO</code></pre><p>重启应用比如 VS Code 后即可看到效果</p><blockquote><p>开启 HiDPI</p></blockquote><p>如果外接显示器字体模糊，可以使用 Scale Resolutions<br>Display Override PropertyList File Parser and Generator with HiDPI support</p><p><a href="https://comsysto.github.io/Display-Override-PropertyList-File-Parser-and-Generator-with-HiDPI-Support-For-Scaled-Resolutions/" target="_blank" rel="noopener">https://comsysto.github.io/Display-Override-PropertyList-File-Parser-and-Generator-with-HiDPI-Support-For-Scaled-Resolutions/</a></p><p>Enable HiDPI on OS X - <a href="https://github.com/syscl/Enable-HiDPI-OSX" target="_blank" rel="noopener">https://github.com/syscl/Enable-HiDPI-OSX</a></p><blockquote><p>解决唤醒时黑屏只看见鼠标的问题</p></blockquote><p>先关机，然后开机快速同时点击 Command + S 按键进入 single-user 单用户模式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/sbin/fsck -fy</span><br><span class="line">/sbin/mount -uw /</span><br><span class="line">rm -f /Library/Preferences/com.apple.loginwindow.plist</span><br><span class="line">rm -f /var/db/.AppleUpgrade</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><h3 id="解决-Command-Q-经常误按"><a href="#解决-Command-Q-经常误按" class="headerlink" title="解决 Command+Q 经常误按"></a>解决 Command+Q 经常误按</h3><p>Slow Quit Apps</p><p>A macOS app that adds a global delay of 1 second to the Cmd-Q shortcut. In other words, you have to hold down Cmd-Q for 1 second before an application will quit.</p><p>When the delay is active, an overlay is drawn at the center of the screen.</p><p><a href="https://github.com/dteoh/SlowQuitApps" target="_blank" rel="noopener">https://github.com/dteoh/SlowQuitApps</a></p><p>brew cask install slowquitapps</p><p>运行程序按照提示授权后重启应用并设置开机自启动即可享受 1s 延迟关闭提醒，如果觉得时间不够长可以自己设定</p><h3 id="提示应用程序被破坏无法打开"><a href="#提示应用程序被破坏无法打开" class="headerlink" title="提示应用程序被破坏无法打开"></a>提示应用程序被破坏无法打开</h3><blockquote><p>SOLVED: “Application” is damaged and can’t be opened in macOS Sierra</p></blockquote><pre><code>sudo spctl --master-disable</code></pre><p>输入密码重新打开 System Preferences &gt; Security &amp; Privacy &gt; General 即可看到之前隐藏的“Anywhere”<br><a href="https://www.santoshsrinivas.com/disable-gatekeeper-in-macos-sierra/" target="_blank" rel="noopener">https://www.santoshsrinivas.com/disable-gatekeeper-in-macos-sierra/</a></p><blockquote><p>macOS High Seirra 提示 “已损坏，打不开，您应该将它移至垃圾篓”</p></blockquote><p>这是因为在系统偏好设置的 “安全性与隐私” 里面的 “允许从以下位置下载的应用” 没有选中“任何来源”，解决方法如下：</p><ol><li>打开终端，然后输入以下命令：sudo spctl –master-disable</li><li>然后回车，输入系统密码并回车（这里输入密码不会显示，输完密码直接回车即可），如果没有提示即操作成功。</li><li>打开系统偏好设置的 “安全性与隐私”，查看“允许从以下位置下载的应用” 是否选中的是“任何来源”，如果选中说明操作成功。这时再打开软件安装就没有已损坏的提示的了。</li></ol><h3 id="macOS-开启关闭-SIP"><a href="#macOS-开启关闭-SIP" class="headerlink" title="macOS 开启关闭 SIP"></a>macOS 开启关闭 SIP</h3><p>S1. 查看 SIP 状态<br>在终端中输入 csrutil status，就可以看到是 enabled 还是 disabled。</p><p>S2. 关闭 SIP</p><ol><li>重启 MAC，按住 cmd+R 直到屏幕上出现苹果的标志和进度条，进入 Recovery 模式；</li><li>在屏幕最上方的工具栏找到实用工具（左数第 3 个），打开终端，输入：csrutil disable；</li><li>关掉终端，重启 mac；</li><li>重启以后可以在终端中查看状态确认。</li></ol><p>S3. 开启 SIP<br>与关闭的步骤类似，只是在 S2 中输入 csrutil enable 即可。</p><h3 id="更改-Apple-ID-国家或地区"><a href="#更改-Apple-ID-国家或地区" class="headerlink" title="更改 Apple ID 国家或地区"></a>更改 Apple ID 国家或地区</h3><blockquote><p>区域在国内即使身在国外也看不到你需要的很多东东，建议修改</p></blockquote><p><a href="https://support.apple.com/zh-cn/ht201389" target="_blank" rel="noopener">https://support.apple.com/zh-cn/ht201389</a></p><h3 id="USB-Type-C-耳机"><a href="#USB-Type-C-耳机" class="headerlink" title="USB Type-C 耳机"></a>USB Type-C 耳机</h3><ol><li>插入耳机至任意 USB Type-C 接口</li><li>System Preferences -&gt; Sound -&gt; Output -&gt; 选择识别到的耳机设备即可</li></ol><h3 id="Macbook-外置键盘如何更改设置"><a href="#Macbook-外置键盘如何更改设置" class="headerlink" title="Macbook 外置键盘如何更改设置"></a>Macbook 外置键盘如何更改设置</h3><p>option 改成 command（win 版键盘下的四个方块图标按键）<br>command 改成 option</p><p><a href="https://jingyan.baidu.com/article/363872ec2185346e4aa16f61.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/363872ec2185346e4aa16f61.html</a></p><h3 id="配置从命令提示行启动-vscode"><a href="#配置从命令提示行启动-vscode" class="headerlink" title="配置从命令提示行启动 vscode"></a>配置从命令提示行启动 vscode</h3><p>安装 Visual Studio Code，打开命令面板（按 F1 或 command + shift + p）输入 Shell 命令找到 Shell 命令: 在 PATH 中安装 “code” 命令。命令执行完成之后，重启终端工具使新的 $PATH 可用。现在，您可以简单地在终端中任意文件夹下输入‘code .’来编辑该文件夹下的文件了。</p><h3 id="Git-Ignore"><a href="#Git-Ignore" class="headerlink" title="Git Ignore"></a>Git Ignore</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个新文件 ~/.gitignore ，并将以下内容添加进去，这样全部 git 仓库将会忽略以下内容所提及的文件。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Folder view configuration files</span></span><br><span class="line">.DS_Store</span><br><span class="line">Desktop.ini</span><br><span class="line"></span><br><span class="line"><span class="comment"># Thumbnail cache files</span></span><br><span class="line">._*</span><br><span class="line">Thumbs.db</span><br><span class="line"></span><br><span class="line"><span class="comment"># Files that might appear on external disks</span></span><br><span class="line">.Spotlight-V100</span><br><span class="line">.Trashes</span><br><span class="line"></span><br><span class="line"><span class="comment"># Compiled Python files</span></span><br><span class="line">*.pyc</span><br><span class="line"></span><br><span class="line"><span class="comment"># Compiled C++ files</span></span><br><span class="line">*.out</span><br><span class="line"></span><br><span class="line"><span class="comment"># Application specific files</span></span><br><span class="line">venv</span><br><span class="line">node_modules</span><br><span class="line">.sass-cache</span><br><span class="line"></span><br><span class="line"><span class="comment"># Temp File</span></span><br><span class="line">*.swp</span><br><span class="line">*.swa</span><br><span class="line">*.swo</span><br><span class="line"></span><br><span class="line"><span class="comment"># github merge file</span></span><br><span class="line">*.orig</span><br><span class="line"></span><br><span class="line"><span class="comment">#vscode </span></span><br><span class="line">.vscode</span><br></pre></td></tr></table></figure><h3 id="禁止-DS-store-生成"><a href="#禁止-DS-store-生成" class="headerlink" title="禁止. DS_store 生成"></a>禁止. DS_store 生成</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 禁止 .DS_store 生成，打开“终端”，复制黏贴下面的命令，回车执行，重启 Mac 即可生效。</span></span><br><span class="line">defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool TRUE</span><br><span class="line"><span class="comment"># 恢复 .DS_store 生成</span></span><br><span class="line">defaults delete com.apple.desktopservices DSDontWriteNetworkStores</span><br><span class="line"><span class="comment"># 刪除已存在的. DS_Store</span></span><br><span class="line">sudo find . -name <span class="string">".DS_Store"</span> -depth -<span class="built_in">exec</span> rm &#123;&#125; \;</span><br></pre></td></tr></table></figure><h3 id="ssh-相关"><a href="#ssh-相关" class="headerlink" title="ssh 相关"></a>ssh 相关</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -bash: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8): No such file or directory</span></span><br><span class="line"><span class="comment"># 禁止 OpenSSH 客户端从 OS X/Linux/Unix 桌面发送 LC_* 变量</span></span><br><span class="line">vi /etc/ssh/ssh_config</span><br><span class="line"><span class="comment">#SendEnv LANG LC_*</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># port forwarding</span></span><br><span class="line">ssh -p 22202 wangao@127.0.0.1</span><br><span class="line">ssh -p 22202 wangao@127.0.0.1 -X</span><br><span class="line">scp -P 22202 -r sysctl.sh sysctl.d/ wangao@127.0.0.1:/tmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># ssh tunnel for one-time</span></span><br><span class="line">ssh -t -A wangao@xx.xx.xx.xx ssh wangao@10.65.32.60</span><br><span class="line"></span><br><span class="line"><span class="comment"># config ssh tunnel to make easy connect everyday</span></span><br><span class="line">vim ~/.ssh/config</span><br><span class="line"></span><br><span class="line">StrictHostKeyChecking no</span><br><span class="line">CheckHostIP no</span><br><span class="line"></span><br><span class="line">Host 10.71.12.*</span><br><span class="line">  HostName %h</span><br><span class="line">  ProxyCommand ssh bastion_GOP_SG_NC_MAIN -W %h:%p</span><br><span class="line"></span><br><span class="line">Host 10.71.13.*</span><br><span class="line">  HostName %h</span><br><span class="line">  ProxyCommand ssh bastion_GOP_SG_NC_MAIN -W %h:%p</span><br><span class="line"></span><br><span class="line">Host 10.71.14.*</span><br><span class="line">  HostName %h</span><br><span class="line">  ProxyCommand ssh bastion_GOP_SG_NC_MAIN -W %h:%p</span><br><span class="line"></span><br><span class="line">Host 10.71.15.*</span><br><span class="line">  HostName %h</span><br><span class="line">  ProxyCommand ssh bastion_GOP_SG_NC_MAIN -W %h:%p</span><br><span class="line"></span><br><span class="line">Host bastion_GOP_SG_NC_MAIN</span><br><span class="line">  HostName 8.8.8.8</span><br><span class="line">  port 22</span><br><span class="line">  User wangao</span><br></pre></td></tr></table></figure><hr><p>题图 - 苹果 2015 新春广告<a href="http://www.apple.com/cn/start-something-new/#film-holiday" target="_blank" rel="noopener">《老唱片》</a></p>]]></content>
    
    <summary type="html">
    
      MacBook macOS 从小白到入门
    
    </summary>
    
      <category term="学习 | Study" scheme="https://wsgzao.github.io/categories/%E5%AD%A6%E4%B9%A0-Study/"/>
    
    
  </entry>
  
  <entry>
    <title>Docker 容器时间如何与宿主机同步问题解决方案小结</title>
    <link href="https://wsgzao.github.io/post/docker-localtime/"/>
    <id>https://wsgzao.github.io/post/docker-localtime/</id>
    <published>2020-08-13T06:59:49.000Z</published>
    <updated>2020-08-17T02:09:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>如果在启动 Docker 容器的过程中没有单独配置 localtime，很可能造成 Docker 容器时间与主机时间不一致的情况，比如 UTC 和 CST 相差 8 小时，换句话来说就是容器时间与北京时间相差 8 个小时。</p><h2 id="更新历史"><a href="#更新历史" class="headerlink" title="更新历史"></a>更新历史</h2><p>2020 年 08 月 13 日 - 初稿</p><p>阅读原文 - <a href="https://wsgzao.github.io/post/docker-localtime/">https://wsgzao.github.io/post/docker-localtime/</a></p><hr><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>问题：容器时间与北京时间相差 8 个小时</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看主机时间 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># date</span></span><br><span class="line">2020 年 07 月 27 日 星期三 22:42:44 CST</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看容器时间 </span></span><br><span class="line"><span class="comment"># docker exec -it &lt;containerid&gt; /bin/sh</span></span><br><span class="line">root@b43340ecf5ef:/<span class="comment"># date</span></span><br><span class="line">Wed Jul 27 14:43:31 UTC 2020</span><br></pre></td></tr></table></figure><p>原因：宿主机设置了时区，而 Docker 容器并没有设置，导致两者相差 8 小时</p><p>可以发现，他们相隔了 8 小时</p><p>CST 应该是指（China Shanghai Time，东八区时间）<br>UTC 应该是指（Coordinated Universal Time，标准时间）<br>所以，这 2 个时间实际上应该相差 8 个小时</p><p>所以，必须统一两者的时区</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="docker-run-添加时间参数"><a href="#docker-run-添加时间参数" class="headerlink" title="docker run 添加时间参数"></a>docker run 添加时间参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-v /etc/localtime:/etc/localtime</span><br><span class="line"></span><br><span class="line"># 实例 1</span><br><span class="line">docker run -p 3306:3306 --name mysql -v /etc/localtime:/etc/localtime</span><br><span class="line"></span><br><span class="line"># 实例 2</span><br><span class="line">docker run \</span><br><span class="line">    --detach \</span><br><span class="line">    --restart always \</span><br><span class="line">    --name &apos;scribe&apos; \</span><br><span class="line">    --publish 11315:11315 \</span><br><span class="line">    --mount type=bind,source=/data/gop/,destination=/data/gop/,consistency=consistent \</span><br><span class="line">    -v /etc/localtime:/etc/localtime \</span><br><span class="line">    wsgzao/facebook-scribe</span><br></pre></td></tr></table></figure><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line"><span class="comment"># 添加时区环境变量，亚洲，上海 </span></span><br><span class="line">ENV TimeZone=Asia/Shanghai</span><br><span class="line"><span class="comment"># 使用软连接，并且将时区配置覆盖 / etc/timezone</span></span><br><span class="line">RUN ln -snf /usr/share/zoneinfo/<span class="variable">$TimeZone</span> /etc/localtime &amp;&amp; <span class="built_in">echo</span> <span class="variable">$TimeZone</span> &gt; /etc/timezone</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 2</span></span><br><span class="line"><span class="comment"># CentOS</span></span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">"Asia/shanghai"</span> &gt; /etc/timezone</span><br><span class="line"><span class="comment"># Ubuntu</span></span><br><span class="line">RUN cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure><h3 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一种方式 (推荐)：</span></span><br><span class="line"><span class="attr">environment:</span></span><br><span class="line"><span class="attr">  TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 第二种方式：</span></span><br><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="string">SET_CONTAINER_TIMEZONE=true</span></span><br><span class="line">  <span class="string">CONTAINER_TIMEZONE=Asia/Shanghai</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三种方式：</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">/etc/timezone:/etc/timezone</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">/etc/localtime:/etc/localtime</span></span><br></pre></td></tr></table></figure><h3 id="宿主机直接执行命令给某个容器同步时间"><a href="#宿主机直接执行命令给某个容器同步时间" class="headerlink" title="宿主机直接执行命令给某个容器同步时间"></a>宿主机直接执行命令给某个容器同步时间</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法 1：直接在宿主机操作 </span></span><br><span class="line">docker cp /etc/localtime 【容器 ID 或者 NAME】:/etc/localtime</span><br><span class="line">docker cp -L /usr/share/zoneinfo/Asia/Shanghai 【容器 ID 或者 NAME】:/etc/localtime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 2：登录容器同步时区 timezone</span></span><br><span class="line">ln -sf /usr/share/zoneinfo/Asia/Singapore /etc/localtime</span><br></pre></td></tr></table></figure><p>在完成后，再通过 date 命令进行查看当前时间<br>但是，在容器中运行的程序的时间不一定能更新过来，比如在容器运行的 mysql 服务，在更新时间后，通过 sql 查看 mysql 的时间</p><pre><code>select now() from dual;</code></pre><p>可以发现，时间并没有更改过来<br>这时候必须要重启 mysql 服务或者重启 docker 容器，mysql 才能读取到更改过后的时间</p>]]></content>
    
    <summary type="html">
    
      Docker容器时间如何与宿主机同步问题解决方案小结
    
    </summary>
    
      <category term="学习 | Study" scheme="https://wsgzao.github.io/categories/%E5%AD%A6%E4%B9%A0-Study/"/>
    
    
  </entry>
  
  <entry>
    <title>Redis(Codis) 分布式集群部署实践</title>
    <link href="https://wsgzao.github.io/post/codis/"/>
    <id>https://wsgzao.github.io/post/codis/</id>
    <published>2020-07-13T06:59:49.000Z</published>
    <updated>2020-07-14T03:50:23.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/wsgzao/storage-public/master/img/20190724154111.png" alt=""></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Codis 3.x 稳定版本已经很久没更新了，虽然有缺点也称不上完美但确实可以有效解决横向扩展问题。Redis 5.0 因为所谓的 <code>政治正确</code> 把 master-slave 名字修改为 master-replica 上了开源社区热议排行榜，客户端 SDK 的 API 完全兼容 redis-cluster 在 <code>Redis 6.0</code> 官方推出 <code>redis-cluster-proxy</code> 集群代理方案前成本很高，目前也需要等待社区验证新方案的稳定性，所以大家在选择 Redis 集群方案的时候除了自研和 <code>Codis</code> 或者 <code>Pika</code> 以外依然没有太多的选择余地。我们使用 Codis 的原因也很简单，Redis 主从模式内存从 128GB 一路增加到 1TB 后硬件终于受不鸟了，要么像数据库借鉴 “拆” 的奥义做到庖丁解牛一般，不然摆在眼前的路基本只剩下相对成熟可靠的 Codis。本文分享了 Redis 高可用技术解决方案选型的参考文章和 Codis 集群搭建的过程，希望对大家有帮助。</p><blockquote><p>Redis(Codis)分布式集群部署实践</p></blockquote><h2 id="更新历史"><a href="#更新历史" class="headerlink" title="更新历史"></a>更新历史</h2><p>2020 年 07 月 13 日 - 增加 Codis HA 搭建方案，codis-dashboard 迁移和 codis-server 扩容心得<br>2020 年 06 月 21 日 - 增加 Codis 手动编译安装<br>2019 年 07 月 23 日 - 初稿</p><p>阅读原文 - <a href="https://wsgzao.github.io/post/codis/">https://wsgzao.github.io/post/codis/</a></p><p><strong> 扩展阅读 </strong></p><p><a href="https://redis.io/" target="_blank" rel="noopener">Redis</a><br><a href="https://github.com/CodisLabs/codis" target="_blank" rel="noopener">Codis</a><br><a href="https://github.com/Qihoo360/pika" target="_blank" rel="noopener">Pika</a></p><hr><h2 id="Codis-简介"><a href="#Codis-简介" class="headerlink" title="Codis 简介"></a>Codis 简介</h2><p>Codis 是一个分布式 Redis 解决方案, 对于上层的应用来说, 连接到 Codis Proxy 和连接原生的 Redis Server 没有显著区别 (<a href="https://github.com/CodisLabs/codis/blob/release3.2/doc/unsupported_cmds.md" target="_blank" rel="noopener">不支持的命令列表</a>), 上层应用可以像使用单机的 Redis 一样使用, Codis 底层会处理请求的转发, 不停机的数据迁移等工作, 所有后边的一切事情, 对于前面的客户端来说是透明的, 可以简单的认为后边连接的是一个内存无限大的 Redis 服务。</p><blockquote><p>Compared with Twemproxy and Redis Cluster</p></blockquote><table><thead><tr><th></th><th>Codis</th><th>Twemproxy</th><th>Redis Cluster</th></tr></thead><tbody><tr><td>resharding without restarting cluster</td><td>Yes</td><td>No</td><td>Yes</td></tr><tr><td>pipeline</td><td>Yes</td><td>Yes</td><td>No</td></tr><tr><td>hash tags for multi-key operations</td><td>Yes</td><td>Yes</td><td>Yes</td></tr><tr><td>multi-key operations while resharding</td><td>Yes</td><td>-</td><td>No(<a href="http://redis.io/topics/cluster-spec#multiple-keys-operations" target="_blank" rel="noopener">details</a>)</td></tr><tr><td>Redis clients supporting</td><td>Any clients</td><td>Any clients</td><td>Clients have to support cluster protocol</td></tr></tbody></table><p>“Resharding” means migrating the data in one slot from one redis server to another, usually happens while increasing/decreasing the number of redis servers.</p><blockquote><p>为什么要选择 Codis</p></blockquote><p>Redis 获得动态扩容 / 缩容的能力，增减 redis 实例对 client 完全透明、不需要重启服务，不需要业务方担心 Redis 内存爆掉的问题. 也不用担心申请太大, 造成浪费. 业务方也不需要自己维护 Redis.</p><p>Codis 支持水平扩容 / 缩容，扩容可以直接界面的 “Auto Rebalance” 按钮，缩容只需要将要下线的实例拥有的 slot 迁移到其它实例，然后在界面上删除下线的 group 即可。</p><p><a href="https://github.com/CodisLabs/codis/blob/release3.2/doc/tutorial_zh.md" target="_blank" rel="noopener">Codis 使用文档</a><br><a href="https://github.com/CodisLabs/codis/blob/release3.2/doc/FAQ_zh.md" target="_blank" rel="noopener">Codis FAQ</a><br><a href="https://github.com/CodisLabs/codis/blob/release3.2/doc/unsupported_cmds.md" target="_blank" rel="noopener">Codis 不支持的命令列表</a><br><a href="https://github.com/CodisLabs/codis/blob/release3.2/doc/redis_change_zh.md" target="_blank" rel="noopener">redis 修改部分（增加若干指令）</a><br><a href="https://github.com/CodisLabs/codis/blob/release3.2/doc/benchmark.md" target="_blank" rel="noopener">Performance (Benchmark)</a></p><h2 id="Codis-架构"><a href="#Codis-架构" class="headerlink" title="Codis 架构"></a>Codis 架构</h2><p><img src="https://raw.githubusercontent.com/wsgzao/storage-public/master/img/20190724162130.png" alt=""></p><p>集群配置前需要了解架构，集群分片主要分三种：</p><ol><li>客户端分片：这个需要自己开发，对客户端要求严格，集群很难扩容</li><li>代理端分片：如 codis，对客户端几乎无要求，集群容易扩容</li><li>服务端分片：如 redis 集群，需要智能客户端支持集群协议的，集群容易扩容</li></ol><p>Codis 3.x 由以下组件组成：</p><ul><li><p><strong>Codis Server</strong>：基于 redis-3.2.8 分支开发。增加了额外的数据结构，以支持 slot 有关的操作以及数据迁移指令。具体的修改可以参考文档 <a href="https://github.com/CodisLabs/codis/blob/release3.2/doc/redis_change_zh.md" target="_blank" rel="noopener">redis 的修改</a>。</p></li><li><p><strong>Codis Proxy</strong>：客户端连接的 Redis 代理服务, 实现了 Redis 协议。 除部分命令不支持以外(<a href="https://github.com/CodisLabs/codis/blob/release3.2/doc/unsupported_cmds.md" target="_blank" rel="noopener">不支持的命令列表</a>)，表现的和原生的 Redis 没有区别（就像 Twemproxy）。</p><ul><li>对于同一个业务集群而言，可以同时部署多个 codis-proxy 实例；</li><li>不同 codis-proxy 之间由 codis-dashboard 保证状态同步。</li></ul></li><li><p><strong>Codis Dashboard</strong>：集群管理工具，支持 codis-proxy、codis-server 的添加、删除，以及据迁移等操作。在集群状态发生改变时，codis-dashboard 维护集群下所有 codis-proxy 的状态的一致性。</p><ul><li>对于同一个业务集群而言，同一个时刻 codis-dashboard 只能有 0 个或者 1 个；</li><li>所有对集群的修改都必须通过 codis-dashboard 完成。</li></ul></li><li><p><strong>Codis Admin</strong>：集群管理的命令行工具。</p><ul><li>可用于控制 codis-proxy、codis-dashboard 状态以及访问外部存储。</li></ul></li><li><p><strong>Codis FE</strong>：集群管理界面。</p><ul><li>多个集群实例共享可以共享同一个前端展示页面；</li><li>通过配置文件管理后端 codis-dashboard 列表，配置文件可自动更新。</li></ul></li><li><p><strong>Storage</strong>：为集群状态提供外部存储。</p><ul><li>提供 Namespace 概念，不同集群的会按照不同 product name 进行组织；</li><li>目前仅提供了 Zookeeper、Etcd、Fs 三种实现，但是提供了抽象的 interface 可自行扩展。</li></ul></li></ul><h2 id="Codis-部署"><a href="#Codis-部署" class="headerlink" title="Codis 部署"></a>Codis 部署</h2><p>Codis 官方的 GitHub 教程已经写的比较详细了，这里重点分享 Ansible 自动化部署方案</p><ol><li>基于官方的简化版 ansible 一键部署 codis</li><li>基于组件的模块化 ansible 部署 codis</li></ol><p><a href="https://www.cnblogs.com/zhoujinyi/p/9249873.html" target="_blank" rel="noopener">Redis Codis 部署安装</a></p><p><a href="https://www.cnblogs.com/zhoujinyi/p/9950105.html" target="_blank" rel="noopener">使用 codis-admin 搭建 codis 集群</a></p><p><a href="https://www.mgchen.com/0/0/s_/Codis.html" target="_blank" rel="noopener">Codis 3.x 集群搭建与使用</a></p><h2 id="Codis-手动编译安装"><a href="#Codis-手动编译安装" class="headerlink" title="Codis 手动编译安装"></a>Codis 手动编译安装</h2><h3 id="安装-Go-运行环境"><a href="#安装-Go-运行环境" class="headerlink" title="安装 Go 运行环境"></a>安装 Go 运行环境</h3><p><a href="https://golang.org/doc/install" target="_blank" rel="noopener">Getting Started</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># install package</span></span><br><span class="line">yum install -y net-tools vim telnet wget git gcc autoconf automake m4 </span><br><span class="line"></span><br><span class="line"><span class="comment"># download</span></span><br><span class="line">wget https://dl.google.com/go/go1.13.12.linux-amd64.tar.gz</span><br><span class="line"><span class="comment">#tar -C /usr/local -xzf go$VERSION.$OS-$ARCH.tar.gz</span></span><br><span class="line">tar -C /usr/<span class="built_in">local</span> -xzf go1.13.12.linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># config env</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/go/bin</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># test</span></span><br><span class="line">go version</span><br><span class="line">go version go1.13.12 linux/amd64</span><br></pre></td></tr></table></figure><h3 id="编译-Codis"><a href="#编译-Codis" class="headerlink" title="编译 Codis"></a>编译 Codis</h3><blockquote><p>以 Codis 为例，官方步骤可能有坑</p></blockquote><p><a href="https://github.com/CodisLabs/codis/blob/release3.2/doc/tutorial_zh.md" target="_blank" rel="noopener">Codis 使用文档</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置编译环境，在 / etc/profile 文件中输入下面三行</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/go/bin</span><br><span class="line"><span class="built_in">export</span> GOPATH=/usr/<span class="built_in">local</span>/codis/gopath</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$GOPATH</span>/bin</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载 Codis 源码</span></span><br><span class="line">mkdir -p <span class="variable">$GOPATH</span>/src/github.com/CodisLabs</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$_</span> &amp;&amp; git <span class="built_in">clone</span> https://github.com/CodisLabs/codis.git -b release3.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译 redis 依赖，以免报 jemalloc 版本等错误(Codis 官方遗漏的步骤)</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$GOPATH</span>/src/github.com/CodisLabs/codis/extern/redis-3.2.11/deps</span><br><span class="line">make hiredis jemalloc linenoise lua geohash-int</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译 Codis 源代码，直接通过 make 编译，可以看到如下输出：</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$GOPATH</span>/src/github.com/CodisLabs/codis</span><br><span class="line">make</span><br><span class="line">===============================================================================</span><br><span class="line">go build -i -o bin/codis-dashboard ./cmd/dashboard</span><br><span class="line">go build -i -tags <span class="string">"cgo_jemalloc"</span> -o bin/codis-proxy ./cmd/proxy</span><br><span class="line">go build -i -o bin/codis-admin ./cmd/admin</span><br><span class="line">go build -i -o bin/codis-ha ./cmd/ha</span><br><span class="line">go build -i -o bin/codis-fe ./cmd/fe</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看编译后的版本</span></span><br><span class="line">cat bin/version</span><br><span class="line">version = 2018-11-04 16:22:35 +0800 @de1ad026e329561c22e2a3035fbfe89dc7fef764 @3.2.2-12-gde1ad02</span><br><span class="line">compile = 2020-06-17 06:39:48 -0400 by go version go1.13.12 linux/amd64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝 codis bin</span></span><br><span class="line">mkdir -p /opt/codis/&#123;config,bin&#125;</span><br><span class="line">cp -r <span class="variable">$GOPATH</span>/src/github.com/CodisLabs/codis/bin /opt/codis</span><br><span class="line">cp -r <span class="variable">$GOPATH</span>/src/github.com/CodisLabs/codis/config /opt/codis</span><br></pre></td></tr></table></figure><h3 id="Codis-手动安装"><a href="#Codis-手动安装" class="headerlink" title="Codis 手动安装"></a>Codis 手动安装</h3><p>dashboard.toml</p><ol><li>调整为 zookeeper，强依赖</li><li>保持多个 instance 的 product_name 唯一性</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/codis/config</span><br><span class="line"><span class="comment"># dashboard.toml</span></span><br><span class="line">vim dashboard.toml</span><br><span class="line"><span class="comment">#coordinator_name = "filesystem"</span></span><br><span class="line"><span class="comment">#coordinator_addr = "/tmp/codis"</span></span><br><span class="line">coordinator_name = <span class="string">"zookeeper"</span></span><br><span class="line">coordinator_addr = <span class="string">"127.0.0.1:2181"</span></span><br><span class="line">product_name = <span class="string">"codis-demo"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">##################################################</span></span><br><span class="line"><span class="comment">#                                                #</span></span><br><span class="line"><span class="comment">#                  Codis-Dashboard               #</span></span><br><span class="line"><span class="comment">#                                                #</span></span><br><span class="line"><span class="comment">##################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set Coordinator, only accept "zookeeper" &amp; "etcd" &amp; "filesystem".</span></span><br><span class="line"><span class="comment"># for zookeeper/etcd, coorinator_auth accept "user:password"</span></span><br><span class="line"><span class="comment"># Quick Start</span></span><br><span class="line"><span class="comment">#coordinator_name = "filesystem"</span></span><br><span class="line"><span class="comment">#coordinator_addr = "/tmp/codis"</span></span><br><span class="line">coordinator_name = <span class="string">"zookeeper"</span></span><br><span class="line">coordinator_addr = <span class="string">"127.0.0.1:2181"</span></span><br><span class="line"><span class="comment">#coordinator_auth = ""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set Codis Product Name/Auth.</span></span><br><span class="line">product_name = <span class="string">"codis-demo"</span></span><br><span class="line">product_auth = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set bind address for admin(rpc), tcp only.</span></span><br><span class="line">admin_addr = <span class="string">"0.0.0.0:18080"</span></span><br></pre></td></tr></table></figure><p>proxy.toml</p><ol><li>调整为 zookeeper，强依赖</li><li>保持多个 instance 的 product_name 唯一性</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">product_name = <span class="string">"codis-demo"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##################################################</span></span><br><span class="line"><span class="comment">#                                                #</span></span><br><span class="line"><span class="comment">#                  Codis-Proxy                   #</span></span><br><span class="line"><span class="comment">#                                                #</span></span><br><span class="line"><span class="comment">##################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set Codis Product Name/Auth.</span></span><br><span class="line">product_name = <span class="string">"codis-demo"</span></span><br><span class="line">product_auth = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set auth for client session</span></span><br><span class="line"><span class="comment">#   1. product_auth is used for auth validation among codis-dashboard,</span></span><br><span class="line"><span class="comment">#      codis-proxy and codis-server.</span></span><br><span class="line"><span class="comment">#   2. session_auth is different from product_auth, it requires clients</span></span><br><span class="line"><span class="comment">#      to issue AUTH &lt;PASSWORD&gt; before processing any other commands.</span></span><br><span class="line">session_auth = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set bind address for admin(rpc), tcp only.</span></span><br><span class="line">admin_addr = <span class="string">"0.0.0.0:11080"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set bind address for proxy, proto_type can be "tcp", "tcp4", "tcp6", "unix" or "unixpacket".</span></span><br><span class="line">proto_type = <span class="string">"tcp4"</span></span><br><span class="line">proxy_addr = <span class="string">"0.0.0.0:19000"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set jodis address &amp; session timeout</span></span><br><span class="line"><span class="comment">#   1. jodis_name is short for jodis_coordinator_name, only accept "zookeeper" &amp; "etcd".</span></span><br><span class="line"><span class="comment">#   2. jodis_addr is short for jodis_coordinator_addr</span></span><br><span class="line"><span class="comment">#   3. jodis_auth is short for jodis_coordinator_auth, for zookeeper/etcd, "user:password" is accepted.</span></span><br><span class="line"><span class="comment">#   4. proxy will be registered as node:</span></span><br><span class="line"><span class="comment">#        if jodis_compatible = true (not suggested):</span></span><br><span class="line"><span class="comment">#          /zk/codis/db_&#123;PRODUCT_NAME&#125;/proxy-&#123;HASHID&#125; (compatible with Codis2.0)</span></span><br><span class="line"><span class="comment">#        or else</span></span><br><span class="line"><span class="comment">#          /jodis/&#123;PRODUCT_NAME&#125;/proxy-&#123;HASHID&#125;</span></span><br><span class="line">jodis_name = <span class="string">""</span></span><br><span class="line">jodis_addr = <span class="string">""</span></span><br><span class="line">jodis_auth = <span class="string">""</span></span><br><span class="line">jodis_timeout = <span class="string">"20s"</span></span><br><span class="line">jodis_compatible = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set datacenter of proxy.</span></span><br><span class="line">proxy_datacenter = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set max number of alive sessions.</span></span><br><span class="line">proxy_max_clients = 1000</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set max offheap memory size. (0 to disable)</span></span><br><span class="line">proxy_max_offheap_size = <span class="string">"1024mb"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set heap placeholder to reduce GC frequency.</span></span><br><span class="line">proxy_heap_placeholder = <span class="string">"256mb"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Proxy will ping backend redis (and clear 'MASTERDOWN' state) in a predefined interval. (0 to disable)</span></span><br><span class="line">backend_ping_period = <span class="string">"5s"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set backend recv buffer size &amp; timeout.</span></span><br><span class="line">backend_recv_bufsize = <span class="string">"128kb"</span></span><br><span class="line">backend_recv_timeout = <span class="string">"30s"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set backend send buffer &amp; timeout.</span></span><br><span class="line">backend_send_bufsize = <span class="string">"128kb"</span></span><br><span class="line">backend_send_timeout = <span class="string">"30s"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set backend pipeline buffer size.</span></span><br><span class="line">backend_max_pipeline = 20480</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set backend never read replica groups, default is false</span></span><br><span class="line">backend_primary_only = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set backend parallel connections per server</span></span><br><span class="line">backend_primary_parallel = 1</span><br><span class="line">backend_replica_parallel = 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set backend tcp keepalive period. (0 to disable)</span></span><br><span class="line">backend_keepalive_period = <span class="string">"75s"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set number of databases of backend.</span></span><br><span class="line">backend_number_databases = 16</span><br><span class="line"></span><br><span class="line"><span class="comment"># If there is no request from client for a long time, the connection will be closed. (0 to disable)</span></span><br><span class="line"><span class="comment"># Set session recv buffer size &amp; timeout.</span></span><br><span class="line">session_recv_bufsize = <span class="string">"128kb"</span></span><br><span class="line">session_recv_timeout = <span class="string">"30m"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set session send buffer size &amp; timeout.</span></span><br><span class="line">session_send_bufsize = <span class="string">"64kb"</span></span><br><span class="line">session_send_timeout = <span class="string">"30s"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Make sure this is higher than the max number of requests for each pipeline request, or your client may be blocked.</span></span><br><span class="line"><span class="comment"># Set session pipeline buffer size.</span></span><br><span class="line">session_max_pipeline = 10000</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set session tcp keepalive period. (0 to disable)</span></span><br><span class="line">session_keepalive_period = <span class="string">"75s"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set session to be sensitive to failures. Default is false, instead of closing socket, proxy will send an error response to client.</span></span><br><span class="line">session_break_on_failure = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set metrics server (such as http://localhost:28000), proxy will report json formatted metrics to specified server in a predefined period.</span></span><br><span class="line">metrics_report_server = <span class="string">""</span></span><br><span class="line">metrics_report_period = <span class="string">"1s"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set influxdb server (such as http://localhost:8086), proxy will report metrics to influxdb.</span></span><br><span class="line">metrics_report_influxdb_server = <span class="string">""</span></span><br><span class="line">metrics_report_influxdb_period = <span class="string">"1s"</span></span><br><span class="line">metrics_report_influxdb_username = <span class="string">""</span></span><br><span class="line">metrics_report_influxdb_password = <span class="string">""</span></span><br><span class="line">metrics_report_influxdb_database = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set statsd server (such as localhost:8125), proxy will report metrics to statsd.</span></span><br><span class="line">metrics_report_statsd_server = <span class="string">""</span></span><br><span class="line">metrics_report_statsd_period = <span class="string">"1s"</span></span><br><span class="line">metrics_report_statsd_prefix = <span class="string">""</span></span><br></pre></td></tr></table></figure><p>redis.conf</p><ol><li>每台机器创建两个 redis 实例，对应端口 6379 和 6380</li><li>按需求修改 redis.conf 配置文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建 codis data 目录</span></span><br><span class="line">mkdir -p /opt/codis/data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 6379 的配置文件：</span></span><br><span class="line">cp redis.conf redis-6379.conf</span><br><span class="line">vim redis-6379.conf</span><br><span class="line"><span class="comment"># 修改如下内容</span></span><br><span class="line">protected-mode no</span><br><span class="line">port 6379</span><br><span class="line">pidfile <span class="string">"/opt/codis/data/redis_6379.pid"</span></span><br><span class="line">logfile <span class="string">"/opt/codis/data/redis_6379.log"</span></span><br><span class="line">dbfilename <span class="string">"dump_6379.rdb"</span></span><br><span class="line">dir <span class="string">"/opt/codis/data"</span></span><br><span class="line"><span class="comment"># 创建 6380 的配置文件</span></span><br><span class="line">cp redis-6379.conf redis-6380.conf </span><br><span class="line">sed -i <span class="string">'s/6379/6380/g'</span> redis-6380.conf</span><br></pre></td></tr></table></figure><p>sentinel.conf</p><ol><li>如果只是 test 可以不配置</li><li>线上环境做 HA 建议分布在 3 台不同节点</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim sentinel.conf</span><br><span class="line"></span><br><span class="line">dir <span class="string">"/opt/codis/data"</span></span><br><span class="line">daemonize yes</span><br><span class="line">loglevel notice</span><br><span class="line">logfile <span class="string">"/opt/codis/data/setinel.log"</span></span><br></pre></td></tr></table></figure><p>Codis 启停脚本</p><ol><li>测试环境可以使用 nohup 在后台运行</li><li>线上环境建议使用 <code>Supervisord</code> 或者 <code>Monit</code> 来管理</li><li>注意这里最后一个 fe 参数是你要访问的前端地址，但是因为 zookeeper 已经占用了 8080 端口，所以你可以改成别的端口。而且为了你在任何地址都可以访问，你可以设置监听 ip 为 0.0.0.0，因为 FE 是不用密码的，所以端口最好设置一个不常见的，避免被不怀好意的人看到前端页面之后对你的 codis 集群做出不好的事情，或者通过防火墙和 SSO 限制访问</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建 codis log 目录</span></span><br><span class="line">mkdir -p /opt/codis/data</span><br><span class="line"><span class="built_in">cd</span> /opt/codis</span><br><span class="line"></span><br><span class="line"><span class="comment"># start_dashboard.sh</span></span><br><span class="line">nohup ./bin/codis-dashboard --ncpu=1 --config=config/dashboard.toml --<span class="built_in">log</span>=<span class="built_in">log</span>/dashboard.log --<span class="built_in">log</span>-level=WARN &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># start_proxy.sh</span></span><br><span class="line">nohup ./bin/codis-proxy --ncpu=1 --config=config/proxy.toml --<span class="built_in">log</span>=<span class="built_in">log</span>/proxy.log --<span class="built_in">log</span>-level=WARN &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># start_server.sh</span></span><br><span class="line">./bin/codis-server config/redis-6379.conf</span><br><span class="line">./bin/codis-server config/redis-6380.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># start_fe.sh (可选，如果 8080 被占用需要修改端口)</span></span><br><span class="line">nohup ./bin/codis-fe --ncpu=1 --<span class="built_in">log</span>=<span class="built_in">log</span>/fe.log --<span class="built_in">log</span>-level=WARN --zookeeper=127.0.0.1:2181 --listen=0.0.0.0:8081 &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># start_sentinel.sh (可选)</span></span><br><span class="line">./bin/codis-server config/sentinel.conf --sentinel</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录 codis-fe</span></span><br><span class="line">http://192.168.184.131:8081/<span class="comment">#codis-demo</span></span><br><span class="line"><span class="comment"># 添加 codis-proxy</span></span><br><span class="line">New Proxy: 192.168.184.131:11080</span><br><span class="line"><span class="comment"># 添加 codis-server，注意先添加 group，再添加 server 分配到相应 group。Data Center 可以留空</span></span><br><span class="line">New Group: 1</span><br><span class="line">Add Server:</span><br><span class="line">192.168.184.131:6379 to 1</span><br><span class="line">192.168.184.131:6380 to 1</span><br><span class="line"><span class="comment"># 点击扳手图标会自动设置 SLAVEOF，当然线上环境的配置就会复杂些</span></span><br><span class="line">Auto-Rebalance: Rebalance All Slots</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 好的，基本上到这，一个 Codis Demo 搭建过程基本就算完成了。如果你还需要主从，也可以通过增加三个节点然后通过 FE 操作，它自动就可以帮助你做好主从同步。线上环境需要考虑 HA 是否采用 Sentinel 以及还是主从切换。</span></span><br></pre></td></tr></table></figure><h3 id="codis-命令行"><a href="#codis-命令行" class="headerlink" title="codis 命令行"></a>codis 命令行</h3><blockquote><p>具体用法在上面的步骤中已经列出，使用命令行可以方便自动化运维管理</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># check codis/bin</span></span><br><span class="line"><span class="built_in">cd</span> /data/codis/bin</span><br><span class="line">assets</span><br><span class="line">codis-admin</span><br><span class="line">codis-dashboard</span><br><span class="line">codis-fe</span><br><span class="line">codis-ha</span><br><span class="line">codis-proxy</span><br><span class="line">codis-server</span><br><span class="line">redis-benchmark</span><br><span class="line">redis-cli</span><br><span class="line">redis-sentinel</span><br><span class="line">version</span><br><span class="line"></span><br><span class="line"><span class="comment"># codis-dashboard</span></span><br><span class="line">./codis-dashboard -h</span><br><span class="line">Usage:</span><br><span class="line">codis-dashboard [--ncpu=N] [--config=CONF] [--<span class="built_in">log</span>=FILE] [--<span class="built_in">log</span>-level=LEVEL] [--host-admin=ADDR] [--pidfile=FILE] [--zookeeper=ADDR|--etcd=ADDR|--filesystem=ROOT] [--product_name=NAME] [--product_auth=AUTH] [--remove-lock]</span><br><span class="line">codis-dashboard  --default-config</span><br><span class="line">codis-dashboard  --version</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">--ncpu=N                    <span class="built_in">set</span> runtime.GOMAXPROCS to N, default is runtime.NumCPU().</span><br><span class="line">-c CONF, --config=CONF      run with the specific configuration.</span><br><span class="line">-l FILE, --<span class="built_in">log</span>=FILE         <span class="built_in">set</span> path/name of daliy rotated <span class="built_in">log</span> file.</span><br><span class="line">--<span class="built_in">log</span>-level=LEVEL           <span class="built_in">set</span> the <span class="built_in">log</span>-level, should be INFO,WARN,DEBUG or ERROR, default is INFO.</span><br><span class="line"></span><br><span class="line"><span class="comment"># codis-fe</span></span><br><span class="line">./codis-fe -h</span><br><span class="line">Usage:</span><br><span class="line">codis-fe [--ncpu=N] [--<span class="built_in">log</span>=FILE] [--<span class="built_in">log</span>-level=LEVEL] [--assets-dir=PATH] [--pidfile=FILE] (--dashboard-list=FILE|--zookeeper=ADDR [--zookeeper-auth=USR:PWD]|--etcd=ADDR [--etcd-auth=USR:PWD]|--filesystem=ROOT) --listen=ADDR</span><br><span class="line">codis-fe  --version</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">--ncpu=N                        <span class="built_in">set</span> runtime.GOMAXPROCS to N, default is runtime.NumCPU().</span><br><span class="line">-d FILE, --dashboard-list=FILE  <span class="built_in">set</span> list of dashboard, can be generated by codis-admin.</span><br><span class="line">-l FILE, --<span class="built_in">log</span>=FILE             <span class="built_in">set</span> path/name of daliy rotated <span class="built_in">log</span> file.</span><br><span class="line">--<span class="built_in">log</span>-level=LEVEL               <span class="built_in">set</span> the <span class="built_in">log</span>-level, should be INFO,WARN,DEBUG or ERROR, default is INFO.</span><br><span class="line">--listen=ADDR                   <span class="built_in">set</span> the listen address.</span><br><span class="line"></span><br><span class="line"><span class="comment"># codis-proxy</span></span><br><span class="line">./codis-proxy -h</span><br><span class="line">Usage:</span><br><span class="line">codis-proxy [--ncpu=N [--max-ncpu=MAX]] [--config=CONF] [--<span class="built_in">log</span>=FILE] [--<span class="built_in">log</span>-level=LEVEL] [--host-admin=ADDR] [--host-proxy=ADDR] [--dashboard=ADDR|--zookeeper=ADDR [--zookeeper-auth=USR:PWD]|--etcd=ADDR [--etcd-auth=USR:PWD]|--filesystem=ROOT|--fillslots=FILE] [--<span class="built_in">ulimit</span>=NLIMIT] [--pidfile=FILE] [--product_name=NAME] [--product_auth=AUTH] [--session_auth=AUTH]</span><br><span class="line">codis-proxy  --default-config</span><br><span class="line">codis-proxy  --version</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">--ncpu=N                    <span class="built_in">set</span> runtime.GOMAXPROCS to N, default is runtime.NumCPU().</span><br><span class="line">-c CONF, --config=CONF      run with the specific configuration.</span><br><span class="line">-l FILE, --<span class="built_in">log</span>=FILE         <span class="built_in">set</span> path/name of daliy rotated <span class="built_in">log</span> file.</span><br><span class="line">--<span class="built_in">log</span>-level=LEVEL           <span class="built_in">set</span> the <span class="built_in">log</span>-level, should be INFO,WARN,DEBUG or ERROR, default is INFO.</span><br><span class="line">--<span class="built_in">ulimit</span>=NLIMIT             run <span class="string">'ulimit -n'</span> to check the maximum number of open file descriptors.</span><br><span class="line"></span><br><span class="line"><span class="comment"># codis-admin</span></span><br><span class="line">./codis-admin -h</span><br><span class="line">Usage:</span><br><span class="line">codis-admin [-v] --proxy=ADDR [--auth=AUTH] [config|model|stats|slots]</span><br><span class="line">codis-admin [-v] --proxy=ADDR [--auth=AUTH]  --start</span><br><span class="line">codis-admin [-v] --proxy=ADDR [--auth=AUTH]  --shutdown</span><br><span class="line">codis-admin [-v] --proxy=ADDR [--auth=AUTH]  --<span class="built_in">log</span>-level=LEVEL</span><br><span class="line">codis-admin [-v] --proxy=ADDR [--auth=AUTH]  --fillslots=FILE [--locked]</span><br><span class="line">codis-admin [-v] --proxy=ADDR [--auth=AUTH]  --reset-stats</span><br><span class="line">codis-admin [-v] --proxy=ADDR [--auth=AUTH]  --forcegc</span><br><span class="line">codis-admin [-v] --dashboard=ADDR           [config|model|stats|slots|group|proxy]</span><br><span class="line">codis-admin [-v] --dashboard=ADDR            --shutdown</span><br><span class="line">codis-admin [-v] --dashboard=ADDR            --reload</span><br><span class="line">codis-admin [-v] --dashboard=ADDR            --<span class="built_in">log</span>-level=LEVEL</span><br><span class="line">codis-admin [-v] --dashboard=ADDR            --slots-assign   --beg=ID --end=ID (--gid=ID|--offline) [--confirm]</span><br><span class="line">codis-admin [-v] --dashboard=ADDR            --slots-status</span><br><span class="line">codis-admin [-v] --dashboard=ADDR            --list-proxy</span><br><span class="line">codis-admin [-v] --dashboard=ADDR            --create-proxy   --addr=ADDR</span><br><span class="line">codis-admin [-v] --dashboard=ADDR            --online-proxy   --addr=ADDR</span><br><span class="line">codis-admin [-v] --dashboard=ADDR            --remove-proxy  (--addr=ADDR|--token=TOKEN|--pid=ID)       [--force]</span><br><span class="line">codis-admin [-v] --dashboard=ADDR            --reinit-proxy  (--addr=ADDR|--token=TOKEN|--pid=ID|--all) [--force]</span><br><span class="line">codis-admin [-v] --dashboard=ADDR            --proxy-status</span><br><span class="line">codis-admin [-v] --dashboard=ADDR            --list-group</span><br><span class="line">codis-admin [-v] --dashboard=ADDR            --create-group   --gid=ID</span><br><span class="line">codis-admin [-v] --dashboard=ADDR            --remove-group   --gid=ID</span><br><span class="line">codis-admin [-v] --dashboard=ADDR            --resync-group  [--gid=ID | --all]</span><br><span class="line">codis-admin [-v] --dashboard=ADDR            --group-add      --gid=ID --addr=ADDR [--datacenter=DATACENTER]</span><br><span class="line">codis-admin [-v] --dashboard=ADDR            --group-del      --gid=ID --addr=ADDR</span><br><span class="line">codis-admin [-v] --dashboard=ADDR            --group-status</span><br><span class="line">codis-admin [-v] --dashboard=ADDR            --replica-groups --gid=ID --addr=ADDR (--<span class="built_in">enable</span>|--<span class="built_in">disable</span>)</span><br><span class="line">codis-admin [-v] --dashboard=ADDR            --promote-server --gid=ID --addr=ADDR</span><br><span class="line">codis-admin [-v] --dashboard=ADDR            --sync-action    --create --addr=ADDR</span><br><span class="line">codis-admin [-v] --dashboard=ADDR            --sync-action    --remove --addr=ADDR</span><br><span class="line">codis-admin [-v] --dashboard=ADDR            --slot-action    --create --sid=ID --gid=ID</span><br><span class="line">codis-admin [-v] --dashboard=ADDR            --slot-action    --remove --sid=ID</span><br><span class="line">codis-admin [-v] --dashboard=ADDR            --slot-action    --create-some  --gid-from=ID --gid-to=ID --num-slots=N</span><br><span class="line">codis-admin [-v] --dashboard=ADDR            --slot-action    --create-range --beg=ID --end=ID --gid=ID</span><br><span class="line">codis-admin [-v] --dashboard=ADDR            --slot-action    --interval=VALUE</span><br><span class="line">codis-admin [-v] --dashboard=ADDR            --slot-action    --disabled=VALUE</span><br><span class="line">codis-admin [-v] --dashboard=ADDR            --rebalance     [--confirm]</span><br><span class="line">codis-admin [-v] --dashboard=ADDR            --sentinel-add   --addr=ADDR</span><br><span class="line">codis-admin [-v] --dashboard=ADDR            --sentinel-del   --addr=ADDR [--force]</span><br><span class="line">codis-admin [-v] --dashboard=ADDR            --sentinel-resync</span><br><span class="line">codis-admin [-v] --remove-lock               --product=NAME (--zookeeper=ADDR [--zookeeper-auth=USR:PWD]|--etcd=ADDR [--etcd-auth=USR:PWD]|--filesystem=ROOT)</span><br><span class="line">codis-admin [-v] --config-dump               --product=NAME (--zookeeper=ADDR [--zookeeper-auth=USR:PWD]|--etcd=ADDR [--etcd-auth=USR:PWD]|--filesystem=ROOT) [-1]</span><br><span class="line">codis-admin [-v] --config-convert=FILE</span><br><span class="line">codis-admin [-v] --config-restore=FILE       --product=NAME (--zookeeper=ADDR [--zookeeper-auth=USR:PWD]|--etcd=ADDR [--etcd-auth=USR:PWD]|--filesystem=ROOT) [--confirm]</span><br><span class="line">codis-admin [-v] --dashboard-list                           (--zookeeper=ADDR [--zookeeper-auth=USR:PWD]|--etcd=ADDR [--etcd-auth=USR:PWD]|--filesystem=ROOT)</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">-a AUTH, --auth=AUTH</span><br><span class="line">-x ADDR, --addr=ADDR</span><br><span class="line">-t TOKEN, --token=TOKEN</span><br><span class="line">-g ID, --gid=ID</span><br></pre></td></tr></table></figure><h2 id="Codis-常见问题"><a href="#Codis-常见问题" class="headerlink" title="Codis 常见问题"></a>Codis 常见问题</h2><p>在官方文档中列举了 2 个案例，<a href="https://github.com/CodisLabs/codis/blob/release3.2/doc/tutorial_zh.md#25-codis-admin%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7" target="_blank" rel="noopener">Codis Admin（命令行工具）</a></p><p><strong> 注意：使用 codis-admin 是十分危险的。</strong></p><h3 id="codis-dashboard-异常退出的修复"><a href="#codis-dashboard-异常退出的修复" class="headerlink" title="codis-dashboard 异常退出的修复"></a>codis-dashboard 异常退出的修复</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># codis-dashboard 无法启动，并提示:</span></span><br><span class="line">[ERROR] store: acquire lock of codis-demo failed</span><br><span class="line">[error]: zk: node already exists</span><br></pre></td></tr></table></figure><p>当 codis-dashboard 启动时，会在外部存储上存放一条数据，用于存储 dashboard 信息，同时作为 LOCK 存在。当 codis-dashboard 安全退出时，会主动删除该数据。当 codis-dashboard 异常退出时，由于之前 LOCK 未安全删除，重启往往会失败。因此 codis-admin 提供了强制删除工具：</p><ol><li>确认 codis-dashboard 进程已经退出（<strong> 很重要 </strong>）；</li><li>运行 codis-admin 删除 LOCK：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./bin/codis-admin --remove-lock --product=codis-demo --zookeeper=127.0.0.1:2181</span><br></pre></td></tr></table></figure><h3 id="codis-proxy-异常退出的修复"><a href="#codis-proxy-异常退出的修复" class="headerlink" title="codis-proxy 异常退出的修复"></a>codis-proxy 异常退出的修复</h3><p>通常 codis-proxy 都是通过 codis-dashboard 进行移除，移除过程中 codis-dashboard 为了安全会向 codis-proxy 发送 <code>offline</code> 指令，成功后才会将 proxy 信息从外部存储中移除。如果 codis-proxy 异常退出，该操作会失败。此时可以使用 codis-admin 工具进行移除：</p><ol><li>确认 codis-proxy 进程已经退出（<strong> 很重要 </strong>）；</li><li>运行 codis-admin 删除 proxy：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./bin/codis-admin --dashboard=127.0.0.1:18080 --remove-proxy --addr=127.0.0.1:11080 --force</span><br></pre></td></tr></table></figure><p>选项 <code>--force</code> 表示，无论 <code>offline</code> 操作是否成功，都从外部存储中将该节点删除。所以操作前，一定要确认该 codis-proxy 进程已经退出。</p><h3 id="codis-dashboard-和-codis-proxy-迁移小技巧"><a href="#codis-dashboard-和-codis-proxy-迁移小技巧" class="headerlink" title="codis-dashboard 和 codis-proxy 迁移小技巧"></a>codis-dashboard 和 codis-proxy 迁移小技巧</h3><p>负责过 codis-fe/dashboard 迁移，也做过正常的 codis-server scale-out 横向扩容，踩过不少坑其中有 2 点需要提醒下大家</p><p>如果 codis-dashboard 使用 <code>Supervisord</code> 或者 <code>Monit</code> 来管理，需要注意添加 <code>--remove-lock</code> 参数，原因上面已经写过了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># codis-dashboard --remove-lock</span></span><br><span class="line">/data/codis/bin/codis-dashboard --remove-lock --config=/data/codis/config/dashboard.toml --<span class="built_in">log</span>=/data/codis/<span class="built_in">log</span>/codis-dashboard.log --<span class="built_in">log</span>-level=DEBUG</span><br></pre></td></tr></table></figure><p>需要注意搭建 codis-proxy 时是否有添加 <code>--dashboard</code> 参数，因为添加后启动 proxy 就会主动加入对应 IP 的 dashboard，如果不添加这个参数则需要通过 dashboard UI 或者 codis-admin 命令行添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># codis-proxy --dashboard</span></span><br><span class="line">/data/codis/bin/codis-proxy --config=/data/codis/config/proxy-auth.toml --<span class="built_in">log</span>=/data/codis/<span class="built_in">log</span>/codis-proxy-auth.log --<span class="built_in">log</span>-level=DEBUG --dashboard=10.71.14.112:18092 --ncpu=8</span><br></pre></td></tr></table></figure><h2 id="Codis-Zookeeper-数据结构"><a href="#Codis-Zookeeper-数据结构" class="headerlink" title="Codis Zookeeper 数据结构"></a>Codis Zookeeper 数据结构</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/zookeeper/bin</span><br><span class="line">./zkCli.sh -server 127.0.0.1:2181</span><br><span class="line"></span><br><span class="line">ZooKeeper -server host:port cmd args</span><br><span class="line"><span class="built_in">stat</span> path [watch]</span><br><span class="line"><span class="built_in">set</span> path data [version]</span><br><span class="line">ls path [watch]</span><br><span class="line">delquota [-n|-b] path</span><br><span class="line">ls2 path [watch]</span><br><span class="line">setAcl path acl</span><br><span class="line">setquota -n|-b val path</span><br><span class="line"><span class="built_in">history</span> </span><br><span class="line">redo cmdno</span><br><span class="line">printwatches on|off</span><br><span class="line">delete path [version]</span><br><span class="line">sync path</span><br><span class="line">listquota path</span><br><span class="line">rmr path</span><br><span class="line">get path [watch]</span><br><span class="line">create [-s] [-e] path data acl</span><br><span class="line">addauth scheme auth</span><br><span class="line">quit </span><br><span class="line">getAcl path</span><br><span class="line">close </span><br><span class="line">connect host:port</span><br><span class="line"></span><br><span class="line">[zk: 127.0.0.1:2181(CONNECTED) 4] ls /codis3</span><br><span class="line">[gop-codis-auth, gop-codis-pay]</span><br><span class="line"></span><br><span class="line">[zk: 127.0.0.1:2181(CONNECTED) 8] ls /codis3/gop-codis-auth </span><br><span class="line">[proxy, slots, topom, group]</span><br><span class="line"></span><br><span class="line">[zk: 127.0.0.1:2181(CONNECTED) 9] ls /codis3/gop-codis-auth/proxy</span><br><span class="line">[proxy-62fba8c56577980aca48b869d6c1059d, proxy-bf965c6421da0ae004d4f142bec2dc45]</span><br><span class="line"></span><br><span class="line">[zk: 127.0.0.1:2181(CONNECTED) 12] get /codis3/gop-codis-auth/proxy/proxy-bf965c6421da0ae004d4f142bec2dc45</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"id"</span>: 3,</span><br><span class="line">    <span class="string">"token"</span>: <span class="string">"bf965c6421da0ae004d4f142bec2dc45"</span>,</span><br><span class="line">    <span class="string">"start_time"</span>: <span class="string">"2020-06-25 17:20:49.129561877 +0800 +08 m=+0.023604373"</span>,</span><br><span class="line">    <span class="string">"admin_addr"</span>: <span class="string">"10.71.49.88:11082"</span>,</span><br><span class="line">    <span class="string">"proto_type"</span>: <span class="string">"tcp4"</span>,</span><br><span class="line">    <span class="string">"proxy_addr"</span>: <span class="string">"10.71.49.88:19082"</span>,</span><br><span class="line">    <span class="string">"product_name"</span>: <span class="string">"gop-codis-auth"</span>,</span><br><span class="line">    <span class="string">"pid"</span>: 65948,</span><br><span class="line">    <span class="string">"pwd"</span>: <span class="string">"/data/codis"</span>,</span><br><span class="line">    <span class="string">"sys"</span>: <span class="string">"Linux sg-gop-10-71-49-88 3.10.0-957.27.2.el7.x86_64 #1 SMP Mon Jul 29 17:46:05 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux"</span>,</span><br><span class="line">    <span class="string">"hostname"</span>: <span class="string">"sg-gop-10-71-49-88"</span>,</span><br><span class="line">    <span class="string">"datacenter"</span>: <span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line">cZxid = 0x3869</span><br><span class="line">ctime = Thu Jun 25 17:25:09 SGT 2020</span><br><span class="line">mZxid = 0x386a</span><br><span class="line">mtime = Thu Jun 25 17:25:09 SGT 2020</span><br><span class="line">pZxid = 0x3869</span><br><span class="line">cversion = 0</span><br><span class="line">dataVersion = 1</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 519</span><br><span class="line">numChildren = 0</span><br><span class="line"></span><br><span class="line">[zk: 127.0.0.1:2181(CONNECTED) 13] get /codis3/gop-codis-auth/proxy/proxy-62fba8c56577980aca48b869d6c1059d</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"id"</span>: 2,</span><br><span class="line">    <span class="string">"token"</span>: <span class="string">"62fba8c56577980aca48b869d6c1059d"</span>,</span><br><span class="line">    <span class="string">"start_time"</span>: <span class="string">"2020-06-23 11:10:54.526348352 +0800 +08 m=+0.024387970"</span>,</span><br><span class="line">    <span class="string">"admin_addr"</span>: <span class="string">"10.71.49.89:11082"</span>,</span><br><span class="line">    <span class="string">"proto_type"</span>: <span class="string">"tcp4"</span>,</span><br><span class="line">    <span class="string">"proxy_addr"</span>: <span class="string">"10.71.49.89:19082"</span>,</span><br><span class="line">    <span class="string">"product_name"</span>: <span class="string">"gop-codis-auth"</span>,</span><br><span class="line">    <span class="string">"pid"</span>: 24684,</span><br><span class="line">    <span class="string">"pwd"</span>: <span class="string">"/data/codis"</span>,</span><br><span class="line">    <span class="string">"sys"</span>: <span class="string">"Linux sg-gop-10-71-49-89 3.10.0-957.27.2.el7.x86_64 #1 SMP Mon Jul 29 17:46:05 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux"</span>,</span><br><span class="line">    <span class="string">"hostname"</span>: <span class="string">"sg-gop-10-71-49-89"</span>,</span><br><span class="line">    <span class="string">"datacenter"</span>: <span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line">cZxid = 0x4d</span><br><span class="line">ctime = Tue Jun 23 11:12:31 SGT 2020</span><br><span class="line">mZxid = 0x4e</span><br><span class="line">mtime = Tue Jun 23 11:12:31 SGT 2020</span><br><span class="line">pZxid = 0x4d</span><br><span class="line">cversion = 0</span><br><span class="line">dataVersion = 1</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 519</span><br><span class="line">numChildren = 0</span><br><span class="line"></span><br><span class="line">[zk: 127.0.0.1:2181(CONNECTED) 21] get /codis3/gop-codis-auth/group/group-0001</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"id"</span>: 1,</span><br><span class="line">    <span class="string">"servers"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"server"</span>: <span class="string">"10.71.49.88:6379"</span>,</span><br><span class="line">            <span class="string">"datacenter"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"action"</span>: &#123;&#125;,</span><br><span class="line">            <span class="string">"replica_group"</span>: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"server"</span>: <span class="string">"10.71.49.88:6380"</span>,</span><br><span class="line">            <span class="string">"datacenter"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"action"</span>: &#123;</span><br><span class="line">                <span class="string">"state"</span>: <span class="string">"synced"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"replica_group"</span>: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"promoting"</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">"out_of_sync"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">cZxid = 0x1f</span><br><span class="line">ctime = Tue Jun 23 10:34:10 SGT 2020</span><br><span class="line">mZxid = 0x25</span><br><span class="line">mtime = Tue Jun 23 10:34:25 SGT 2020</span><br><span class="line">pZxid = 0x1f</span><br><span class="line">cversion = 0</span><br><span class="line">dataVersion = 6</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 440</span><br><span class="line">numChildren = 0</span><br></pre></td></tr></table></figure><h2 id="Codis-HA"><a href="#Codis-HA" class="headerlink" title="Codis HA"></a>Codis HA</h2><p>Codis 的架构本身分成 Proxy 集群 + Redis 集群，Proxy 集群的高可用，可以基于 Zookeeper 来做故障转移，而 Redis 集群的高可用是借助于 Redis Sentinel 开源的哨兵集群来实现，那边 Codis 作为非 Redis 组件，需要解决的一个问题就是如何集成 Redis 哨兵集群。</p><blockquote><p>我分享 2 种实践方案，都是经历过线上 12000000 qps 考验的架构，重点看下 HA 方案</p></blockquote><p>前置任务：内部流量均使用 CoreDNS 转发请求至 LVS VIP 此时 codis-proxy 作为 realserver 客户端，或者直接分配给 codis-proxy 但 DNS 无故障检测机制</p><ol><li>codis-server 使用 keepalived HA 架构类似 Redis 主从同步 HA 方案，codis-dashboard group server 填写 VIP 地址，依赖少但需要使用额外计算资源</li><li>codis-server 使用 sentinel 保障 HA 高可用切换，这是 codis 官方的推荐方案，但由于 codis 目前已经处于停滞状态，如果出现组件 bug 影响也会非常大</li></ol><h2 id="Codis-in-Kubernetes"><a href="#Codis-in-Kubernetes" class="headerlink" title="Codis in Kubernetes"></a>Codis in Kubernetes</h2><blockquote><p>好处是上线很快，坏处是出了问题你就直接嗝屁了，debug 困难推荐先上测试后上生产</p></blockquote><p><a href="https://github.com/CodisLabs/codis/tree/release3.2/kubernetes" target="_blank" rel="noopener">https://github.com/CodisLabs/codis/tree/release3.2/kubernetes</a></p><h2 id="Codis-监控"><a href="#Codis-监控" class="headerlink" title="Codis 监控"></a>Codis 监控</h2><p>Codis 的监控主要分为 3 部分，衍生部分还包括 Zookeeper，这里就不展开了</p><ol><li>Codis Proxy</li><li>Codis Redis Cluster</li><li>Codis Sentinels</li></ol><h2 id="Redis-迁移至-Codis"><a href="#Redis-迁移至-Codis" class="headerlink" title="Redis 迁移至 Codis"></a>Redis 迁移至 Codis</h2><p>分两种情况:</p><ol><li>原来使用 twemproxy 的用户: 可以, 使用 codis 项目内的 redis-port 工具, 可以实时的同步 twemproxy 底下的 redis 数据到你的 codis 集群上. 搞定了以后, 只需要你修改一下你的配置, 将 twemproxy 的地址改成 codis 的地址就好了. 除此之外, 你什么事情都不用做.</li><li>原来使用 Redis 的用户: 如果你使用了 <a href="https://github.com/CodisLabs/codis/blob/release3.2/doc/unsupported_cmds.md" target="_blank" rel="noopener">doc/unsupported_cmds</a>中提到的命令，是无法直接迁移到 Codis 上的. 你需要修改你的代码, 用其他的方式实现.</li></ol><p>先搭建好 codis 集群并让 codis-proxy 正确运行起来。对线上每一个 redis 实例运行一个 redis-port 来向 codis 导入数据，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for port in &#123;6379,6380,6479,6480&#125;; do</span><br><span class="line">    nohup redis-port sync --ncpu=4 --from=redis-server:$&#123;port&#125; \</span><br><span class="line">        --target=codis-proxy:19000 &gt; $&#123;port&#125;.log 2&gt;&amp;1 &amp;</span><br><span class="line">    sleep 5</span><br><span class="line">done</span><br><span class="line">tail -f *.log</span><br></pre></td></tr></table></figure><ul><li>每个 redis-port 负责将对应的 redis 数据导入到 codis</li><li>多个 redis-port 之间不互相干扰，除非多个 redis 上的 key 本身出现冲突</li><li>单个 redis-port 可以将负责的数据并行迁移以提高速度，通过 –ncpu 来指定并行数</li><li>导入速度受带宽以及 codis-proxy 处理速度限制(本质是大量的 slotsrestore 操作)</li><li>完成数据迁移，在适当的时候将服务指向 Codis，并将原 redis 下线，旧 redis 下线时，会导致 reids-port 链接断开，于是自动退出</li></ul><p><a href="https://github.com/CodisLabs/redis-port" target="_blank" rel="noopener">redis-port</a><br><a href="https://github.com/alibaba/RedisShake" target="_blank" rel="noopener">RedisShake</a><br><a href="https://github.com/sripathikrishnan/redis-rdb-tools" target="_blank" rel="noopener">redis-rdb-tools</a></p><h2 id="Codis-扩容"><a href="#Codis-扩容" class="headerlink" title="Codis 扩容"></a>Codis 扩容</h2><p>Codis FE, Codis-Dashboard, Codis-Proxy 如果没有添加特殊的参数可以算是无状态组件，扩容或迁移相对比较容易</p><p>Codis 可以实现在线不停服务进行扩容，具体的步骤如下：</p><ol><li>安装配置 codis-server 主从</li><li>打开 codis 管理界面，新建 server group 并添加刚刚安装的 redis 实例（注意：codis 默认第一个添加的是 master）</li><li>规划 slot 分布，把部分 slot 迁移到新的 server group 中</li></ol><p><strong> 备注说明 </strong></p><ol><li>slot 迁移的过程中，Codis 服务可以正常访问，codis 的迁移机制可以保证数据的一致性</li><li>迁移时，key 都是单个进行迁移，并且不能同时运行多个迁移任务，所以 codis 的迁移时间会比较长。一定要在扩容前留有足够的时间和空间。</li></ol><h2 id="Codis-其他经验分享"><a href="#Codis-其他经验分享" class="headerlink" title="Codis 其他经验分享"></a>Codis 其他经验分享</h2><ol><li><p>关于 HOT KEY， HOT KEY 很影响 Codis/Redis 的性能，这点如果你监控不到位，你就得花一些力气去找到底是哪组出了问题，再 monitor 看看找出是哪个应用干的，比较费时费力，所以在交付 rd 上线时， 我们就严肃声明坚决不允许存在 HOT KEY，宁可使用笨方法多消耗一些内存，也要降低线上故障的风险。</p></li><li><p>关于 BIG KEY,  这点风险更为巨大：</p></li></ol><p>由于 Codis 支持 “resharding without restarting cluster”，如果迁移失败，所导致的后果也是不可简单衡量的。Redis 是串行提供服务的，所以当迁移该 BIG KEY 时，其他的请求就会被 BLOCK 住，这点是十分危险的，访问该组的请求皆会失败。</p><p>由于 Codis-ha 也会依赖该节点的返回来判断 Codis-server 是否挂掉，如果无响应超过设置时间，便会强制提升 SLAVE 至 MASTER，导致整个迁移任务失败。这时如果 Proxy 的信息没有更新的话，并且迁移故障的 KEY 所在 SLOT 可能会存在 KEY 的信息不完整，虽然服务恢复，但是仍有大量 key 失效。</p><p>所以一般不推荐使用 Codis 存大的 HASH 表，LIST 等等，并且在迁移之前，至少要对该 Group 做一次检查 BIG KEY 即：redis-cli –bigkeys 查看是否有 BIG KEY 存在，再酌情迁移。</p><ol start="3"><li>关于 Codis-server</li></ol><p>一般 Codis-proxy 或者 Codis-dashboard 我们使用 supervisor 管理，在进程退出的情况下立即拉起来重新服务，而 Codis-Server 则不推荐使用该方式，原因是这样的：一般作为 Codis-server，是关闭 rdb dump 的，如果 Codis-server 挂掉，当重新启动时，是没有 rdb 文件的，或者 rdb 文件是上一次切换之前的。如果挂掉立即重新启动，则该 Codis 有可能是空的，或者数据不是最新，而同时，SLAVE 同步，也会清空数据库，或者同步旧数据。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://my.oschina.net/u/658658/blog/500499" target="_blank" rel="noopener">Codis 作者黄东旭细说分布式 Redis 架构设计和踩过的那些坑们</a><br><a href="https://mp.weixin.qq.com/s/BoLsVKYyu8yRXZbxd1uuQw" target="_blank" rel="noopener">史上最全 Redis 高可用技术解决方案大全</a><br><a href="https://mp.weixin.qq.com/s/F68-e2umTQIq0aGfif58ow" target="_blank" rel="noopener">深入浅出百亿请求高可用 Redis (codis) 分布式集群揭秘</a><br><a href="https://cloud.tencent.com/developer/article/1006262" target="_blank" rel="noopener">大规模 codis 集群的治理与实践</a><br><a href="https://www.menina.cn/article/61" target="_blank" rel="noopener">避免 Redis (Codis) 的 Timeout 及监控</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzA4Nzg5Nzc5OA==&amp;mid=2651678993&amp;idx=1&amp;sn=195b7e98450befb9bde04ea58756a731&amp;chksm=8bcbaab8bcbc23ae01f8288bcfb2c65d0e8b9ee4610420c252fa1ab5709b7909b26d4d5da67b&amp;mpshare=1&amp;scene=23&amp;srcid&amp;sharer_sharetime=1565249364003&amp;sharer_shareid=456ba82bbd1a1c9f32e5725824095308%23rd" target="_blank" rel="noopener">10 分钟彻底理解 Redis 的持久化和主从复制</a><br><a href="https://zhuanlan.zhihu.com/p/53044266" target="_blank" rel="noopener">Codis AutoRebalance 流程学习</a><br><a href="https://www.cnblogs.com/zhoujinyi/p/9950105.html" target="_blank" rel="noopener">使用 codis-admin 搭建 codis 集群</a><br><a href="https://my.oschina.net/u/3023401/blog/1547362" target="_blank" rel="noopener">Codis 运维 D4 - Codis3 详解</a><br><a href="https://segmentfault.com/a/1190000021361786" target="_blank" rel="noopener">4000 余字为你讲透 Codis 内部工作原理</a><br><a href="https://qiankunli.github.io/2019/04/23/codis_source.html" target="_blank" rel="noopener">Codis 源码分析</a></p>]]></content>
    
    <summary type="html">
    
      Redis(Codis)分布式集群部署实践
    
    </summary>
    
      <category term="学习 | Study" scheme="https://wsgzao.github.io/categories/%E5%AD%A6%E4%B9%A0-Study/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux 学习路径</title>
    <link href="https://wsgzao.github.io/post/linux/"/>
    <id>https://wsgzao.github.io/post/linux/</id>
    <published>2020-07-12T06:59:49.000Z</published>
    <updated>2020-07-14T03:45:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Linux 在企业级的应用已经很普遍了，写这篇文章的意义不再是介绍细节，更多的是分享互联网中比较成熟资源，方便快速学习</p><h2 id="更新历史"><a href="#更新历史" class="headerlink" title="更新历史"></a>更新历史</h2><p>2020 年 07 月 12 日 - 初稿</p><p>阅读原文 - <a href="https://wsgzao.github.io/post/linux/">https://wsgzao.github.io/post/linux/</a></p><hr><h2 id="学习路径"><a href="#学习路径" class="headerlink" title="学习路径"></a>学习路径</h2><blockquote><p>Linux 从拿证的角度出发是优先跟随 RHCE，但针对实际工作需求还需要熟练掌握 Bash Shell 和网络基础知识</p></blockquote><p>Linux 就该这么学 - <a href="https://www.linuxprobe.com/docs/LinuxProbe.pdf" target="_blank" rel="noopener">https://www.linuxprobe.com/docs/LinuxProbe.pdf</a></p><ul><li>作者持续更新并开源精心制作的 Linux 文档，推荐优先学习作为基础铺垫</li><li>以前还会推荐《鸟哥的 Linux 私房菜》，但现在就是《Linux 就该这么学》</li><li>如果需要解决常见 Linux 问题，推荐注册 Red Hat Developer 开发者账号，可以免费浏览丰富的 KB 资源</li></ul><p>Bash 脚本教程 - <a href="https://wangdoc.com/bash/" target="_blank" rel="noopener">https://wangdoc.com/bash/</a><br><a href="https://wsgzao.github.io/post/bash/">Bash 命令语法和 Bash Cheat Sheet 中文速查表</a></p><ul><li>阮一峰出品的 Bash 脚本教程，原理和常用案例已经写的非常清晰了，当然 awk 和 sed 的基础用法也要掌握</li><li>Bash 是 Linux 和 Mac 的默认 Shell（命令行环境），系统管理和服务器开发都需要它。虽然不难，但是语法很怪异，根本记不住，需要查手册。网上找不到简明扼要的中文教程，我很早就想整理一个，方便自己日后使用</li></ul><p><a href="https://weread.qq.com/web/reader/3da32b505dd9f43da9a1aca" target="_blank" rel="noopener">图解 HTTP</a></p><p><a href="https://time.geekbang.org/column/intro/100020901" target="_blank" rel="noopener">Linux 性能优化实战</a></p><p><a href="https://time.geekbang.org/column/intro/100007101" target="_blank" rel="noopener">趣谈网络协议</a></p><p><a href="https://time.geekbang.org/course/intro/100026801" target="_blank" rel="noopener">Web 协议详解与抓包实战</a></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://developers.redhat.com/" target="_blank" rel="noopener">Red Hat Developer</a></p>]]></content>
    
    <summary type="html">
    
      Linux学习路径
    
    </summary>
    
      <category term="学习 | Study" scheme="https://wsgzao.github.io/categories/%E5%AD%A6%E4%B9%A0-Study/"/>
    
    
  </entry>
  
  <entry>
    <title>Kubernetes 学习路径</title>
    <link href="https://wsgzao.github.io/post/kubernetes/"/>
    <id>https://wsgzao.github.io/post/kubernetes/</id>
    <published>2020-07-03T06:59:49.000Z</published>
    <updated>2020-07-30T06:41:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Kubernetes 已经成为容器编排标准，没有 OpenStack 复杂而庞大的知识体系，但是需要老老实实学习的知识点也不少，由于 K8s 每年的改动也挺多，我这边文章暂时分享一些我觉得有用的链接，方便大家系统性学习和思考</p><h2 id="更新历史"><a href="#更新历史" class="headerlink" title="更新历史"></a>更新历史</h2><p>2020 年 07 月 03 日 - 增加 K8s 开源工具和参考文章<br>2020 年 05 月 30 日 - 更新 Kubernetes 跟着官方文档从零搭建 K8S 实践<br>2020 年 04 月 16 日 - 初稿</p><p>阅读原文 - <a href="https://wsgzao.github.io/post/kubernetes/">https://wsgzao.github.io/post/kubernetes/</a></p><hr><h2 id="Kubernetes-跟着官方文档从零搭建-K8S"><a href="#Kubernetes-跟着官方文档从零搭建-K8S" class="headerlink" title="Kubernetes 跟着官方文档从零搭建 K8S"></a>Kubernetes 跟着官方文档从零搭建 K8S</h2><p>本文将带领读者一起, 参照着 Kubernetes 官方文档, 对其安装部署进行讲解. Kubernetes 更新迭代很快, 书上、网上等教程可能并不能适用于新版本, 但官方文档能.</p><p>阅读这篇文章你能收获到:</p><ul><li>如何阅读 Kubernetes 官方安装指南并搭建一个 Kubernetes 环境</li><li>Kubernetes 安装过程中的注意事项</li><li>避过常见的坑</li></ul><p>阅读本文你需要:</p><ul><li>熟悉 Linux 命令</li><li>知道 Kubernetes 是用来干什么的 (不然装它干啥(ಥ_ಥ))</li><li>知道 Docker</li></ul><h3 id="Before-installing-kubeadm"><a href="#Before-installing-kubeadm" class="headerlink" title="Before installing kubeadm"></a>Before installing kubeadm</h3><blockquote><p>K8s 官网写的非常详细，列举实际操作的步骤供大家参考</p></blockquote><p>This page shows how to install the <code>kubeadm</code> toolbox. For information how to create a cluster with kubeadm once you have performed this installation process, see the <a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/" target="_blank" rel="noopener">Using kubeadm to Create a Cluster</a> page.</p><ul><li><a href="#before-you-begin">Before you begin</a></li><li><a href="#verify-mac-address">Verify the MAC address and product_uuid are unique for every node</a></li><li><a href="#check-network-adapters">Check network adapters</a></li><li><a href="#letting-iptables-see-bridged-traffic">Letting iptables see bridged traffic</a></li><li><a href="#check-required-ports">Check required ports</a></li><li><a href="#installing-runtime">Installing runtime</a></li><li><a href="#installing-kubeadm-kubelet-and-kubectl">Installing kubeadm, kubelet and kubectl</a></li><li><a href="#configure-cgroup-driver-used-by-kubelet-on-control-plane-node">Configure cgroup driver used by kubelet on control-plane node</a></li><li><a href="#troubleshooting">Troubleshooting</a></li><li><a href="#whats-next">What’s next</a></li></ul><p>服务器或虚拟机数量：2<br>机器配置: CPU &gt;= 2, 内存 &gt;= 2G<br>操作系统：本文为 CentOS 7<br>备注：根据不同操作系统需认真阅读和理解官方文档说明</p><ul><li>One or more machines running one of:<ul><li>Ubuntu 16.04+</li><li>Debian 9+</li><li>CentOS 7</li><li>Red Hat Enterprise Linux (RHEL) 7</li><li>Fedora 25+</li><li>HypriotOS v1.0.1+</li><li>Container Linux (tested with 1800.6.0)</li></ul></li><li>2 GB or more of RAM per machine (any less will leave little room for your apps)</li><li>2 CPUs or more</li><li>Full network connectivity between all machines in the cluster (public or private network is fine)</li><li>Unique hostname, MAC address, and product_uuid for every node. See <a href="#verify-mac-address">here</a> for more details.</li><li>Certain ports are open on your machines. See <a href="#check-required-ports">here</a> for more details.</li><li>Swap disabled. You <strong>MUST</strong> disable swap in order for the kubelet to work properly.</li></ul><p>从官网找到<a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/" target="_blank" rel="noopener">kubeadm 安装文档入口</a>, 文档很详细. 英文阅读没有障碍的读者推荐直接查看英文文档, 中文文档不全且更新不及时安装时可能存在问题.</p><blockquote><p>以下操作应用于 k8s-master 和 k8s-worker</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改主机名</span></span><br><span class="line">hostnamectl <span class="built_in">set</span>-hostname k8s-master</span><br><span class="line">hostnamectl <span class="built_in">set</span>-hostname k8s-worker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 hosts</span></span><br><span class="line">vim /etc/hosts</span><br><span class="line">10.71.16.32 k8s-master</span><br><span class="line">10.71.16.33 k8s-worker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确认 MAC 和 product_uuid 的唯一性</span></span><br><span class="line"><span class="comment"># 查看 MAC</span></span><br><span class="line">ifconfig -a    </span><br><span class="line"><span class="comment"># 查看 product_uuid</span></span><br><span class="line">cat /sys/class/dmi/id/product_uuid </span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查网络端口和防火墙，这个根据实际情况配置，应该没有难度，如果是内部测试可以直接禁用防火墙</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁用 SELinux</span></span><br><span class="line"><span class="comment"># 关闭 selinux，重启后生效</span></span><br><span class="line">sed -i <span class="string">'s/SELINUX=enforcing/SELINUX=disabled/g'</span> /etc/sysconfig/selinux</span><br><span class="line"><span class="comment"># 设置 selinux 状态，临时生效命令</span></span><br><span class="line">setenforce 0</span><br><span class="line"><span class="comment"># 检查 selinux 状态</span></span><br><span class="line">sestatus</span><br><span class="line">SELinux status: disabled</span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁用交换分区</span></span><br><span class="line"><span class="comment"># 将 swap 注释掉，重启后生效</span></span><br><span class="line">vim /etc/fstab </span><br><span class="line"><span class="comment">#UUID=30e08a6d-75ba-4750-ab6d-2d11f6137c97 swap                    swap    defaults        0 0</span></span><br><span class="line"><span class="comment"># 临时禁用 swap</span></span><br><span class="line">swapoff -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># Letting iptables see bridged traffic</span></span><br><span class="line">cat &lt;&lt;EOF | sudo tee /etc/sysctl.d/k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br><span class="line">sudo sysctl --system</span><br><span class="line"></span><br><span class="line"><span class="comment"># Make sure that the br_netfilter module is loaded before this step. This can be done by running </span></span><br><span class="line">lsmod | grep br_netfilter</span><br><span class="line"><span class="comment"># To load it explicitly call </span></span><br><span class="line">sudo modprobe br_netfilter</span><br></pre></td></tr></table></figure><h3 id="Installing-runtime"><a href="#Installing-runtime" class="headerlink" title="Installing runtime"></a>Installing runtime</h3><blockquote><p>选择安装 Docker, 注意阅读官网文档的推荐版本，若网络不好, 可换用国内源</p></blockquote><p><a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#installing-runtime" target="_blank" rel="noopener">Installing runtime</a></p><p><a href="https://docs.docker.com/engine/install/centos/" target="_blank" rel="noopener">https://docs.docker.com/engine/install/centos/</a></p><p><a href="https://kubernetes.io/docs/setup/production-environment/container-runtimes/#docker" target="_blank" rel="noopener">https://kubernetes.io/docs/setup/production-environment/container-runtimes/#docker</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"># (Install Docker CE)</span><br><span class="line">## Set up the repository</span><br><span class="line">### Install required packages</span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"></span><br><span class="line">## Add the Docker repository</span><br><span class="line">yum-config-manager --add-repo \</span><br><span class="line">  https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"># Install Docker CE</span><br><span class="line">yum update -y &amp;&amp; yum install -y \</span><br><span class="line">  containerd.io-1.2.13 \</span><br><span class="line">  docker-ce-19.03.8 \</span><br><span class="line">  docker-ce-cli-19.03.8</span><br><span class="line">  </span><br><span class="line">## Create /etc/docker</span><br><span class="line">mkdir /etc/docker</span><br><span class="line"></span><br><span class="line"># Set up the Docker daemon</span><br><span class="line">cat &gt; /etc/docker/daemon.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span><br><span class="line">  &quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class="line">  &quot;log-opts&quot;: &#123;</span><br><span class="line">    &quot;max-size&quot;: &quot;100m&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;storage-driver&quot;: &quot;overlay2&quot;,</span><br><span class="line">  &quot;storage-opts&quot;: [</span><br><span class="line">    &quot;overlay2.override_kernel_check=true&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">mkdir -p /etc/systemd/system/docker.service.d</span><br><span class="line"></span><br><span class="line"># Restart Docker</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br><span class="line"></span><br><span class="line"># 利用 docker-cn 提供的镜像源</span><br><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&apos;EOF&apos;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="Installing-kubeadm-kubelet-and-kubectl"><a href="#Installing-kubeadm-kubelet-and-kubectl" class="headerlink" title="Installing kubeadm, kubelet and kubectl"></a>Installing kubeadm, kubelet and kubectl</h3><p><a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#installing-kubeadm-kubelet-and-kubectl" target="_blank" rel="noopener">Installing kubeadm, kubelet and kubectl</a></p><p>官网有一行配置是错误的，首次部署 K8s 时请移除改行，exclude=kubelet kubeadm kubectl</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-\<span class="variable">$basearch</span></span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br><span class="line"><span class="comment"># Set SELinux in permissive mode (effectively disabling it)</span></span><br><span class="line">setenforce 0</span><br><span class="line"></span><br><span class="line">yum install -y kubelet kubeadm kubectl –disableexcludes=kubernetes</span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> –now kubelet</span><br></pre></td></tr></table></figure><blockquote><p>配置国内 kubeadm 源</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Debian/Ubuntu</span></span><br><span class="line">apt-get update &amp;&amp; apt-get install -y apt-transport-https</span><br><span class="line">curl -s https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add -</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF &gt;/etc/apt/sources.list.d/kubernetes.list</span><br><span class="line">deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">apt-get update</span><br><span class="line">apt-get install -y kubelet kubeadm kubectl</span><br><span class="line"></span><br><span class="line"><span class="comment"># CentOS/RHEL/Fedora</span></span><br><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">setenforce 0</span><br><span class="line">yum install -y kubelet kubeadm kubectl</span><br></pre></td></tr></table></figure><h3 id="初始化-k8s-master"><a href="#初始化-k8s-master" class="headerlink" title="初始化 k8s-master"></a>初始化 k8s-master</h3><blockquote><p>以下操作应用于 k8s-master</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成初始化文件 </span></span><br><span class="line">kubeadm config <span class="built_in">print</span> init-defaults &gt; kubeadm-init.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 该文件有两处需要修改:</span></span><br><span class="line"><span class="comment">## 将 advertiseAddress: 1.2.3.4 修改为本机地址</span></span><br><span class="line"><span class="comment">### (若国内网络) 将 imageRepository: k8s.gcr.io 修改为 imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑 kubeadm-init.yaml</span></span><br><span class="line">vim kubeadm-init.yaml</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1beta2</span><br><span class="line">bootstrapTokens:</span><br><span class="line">- groups:</span><br><span class="line">  - system:bootstrappers:kubeadm:default-node-token</span><br><span class="line">  token: abcdef.0123456789abcdef</span><br><span class="line">  ttl: 24h0m0s</span><br><span class="line">  usages:</span><br><span class="line">  - signing</span><br><span class="line">  - authentication</span><br><span class="line">kind: InitConfiguration</span><br><span class="line">localAPIEndpoint:</span><br><span class="line">  advertiseAddress: 10.71.16.32</span><br><span class="line">  bindPort: 6443</span><br><span class="line">nodeRegistration:</span><br><span class="line">  criSocket: /var/run/dockershim.sock</span><br><span class="line">  name: k8s-master</span><br><span class="line">  taints:</span><br><span class="line">  - effect: NoSchedule</span><br><span class="line">    key: node-role.kubernetes.io/master</span><br><span class="line">---</span><br><span class="line">apiServer:</span><br><span class="line">  timeoutForControlPlane: 4m0s</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1beta2</span><br><span class="line">certificatesDir: /etc/kubernetes/pki</span><br><span class="line">clusterName: kubernetes</span><br><span class="line">controllerManager: &#123;&#125;</span><br><span class="line">dns:</span><br><span class="line">  <span class="built_in">type</span>: CoreDNS</span><br><span class="line">etcd:</span><br><span class="line">  <span class="built_in">local</span>:</span><br><span class="line">    dataDir: /var/lib/etcd</span><br><span class="line">imageRepository: k8s.gcr.io</span><br><span class="line">kind: ClusterConfiguration</span><br><span class="line">kubernetesVersion: v1.18.0</span><br><span class="line">networking:</span><br><span class="line">  dnsDomain: cluster.local</span><br><span class="line">  serviceSubnet: 10.96.0.0/12</span><br><span class="line">scheduler: &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载镜像</span></span><br><span class="line">kubeadm config images pull --config kubeadm-init.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行初始化</span></span><br><span class="line">kubeadm init --config kubeadm-init.yaml</span><br><span class="line"></span><br><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接下来配置环境, 让当前用户可以执行 kubectl 命令:</span></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">  sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">  sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run <span class="string">"kubectl apply -f [podnetwork].yaml"</span> with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后两行需要保存下来, kubeadm join ... 是 worker 节点加入所需要执行的命令</span></span><br><span class="line">Then you can join any number of worker nodes by running the following on each as root:</span><br><span class="line"></span><br><span class="line">kubeadm join 10.71.16.32:6443 --token abcdef.0123456789abcdef \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:67e23b74df39cfca4dd0ba3d747139cb0dd4ea5c546a12c60e84b3c9b057fc6e </span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试一下此处的 NotReady 是因为网络还没配置</span></span><br><span class="line">kubectl get node</span><br><span class="line"></span><br><span class="line">NAME         STATUS      ROLES    AGE    VERSION</span><br><span class="line">k8s-master   NotReady    master   12m    v1.18.3</span><br></pre></td></tr></table></figure><blockquote><p>配置网络，注意文档中的最新版本差异</p></blockquote><p><a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/" target="_blank" rel="noopener">create-cluster-kubeadm</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载描述文件</span></span><br><span class="line"><span class="comment"># https://docs.projectcalico.org/releases</span></span><br><span class="line"><span class="comment"># https://docs.projectcalico.org/v3.14/manifests/calico.yaml</span></span><br><span class="line">wget https://docs.projectcalico.org/manifests/calico.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开 calico.yaml, 将 192.168.0.0/16 修改为 10.96.0.0/12</span></span><br><span class="line">cat kubeadm-init.yaml | grep serviceSubnet:</span><br><span class="line">serviceSubnet: 10.96.0.0/12</span><br><span class="line"><span class="comment"># 需要注意的是, calico.yaml 中的 IP 和 kubeadm-init.yaml 需要保持一致, 要么初始化前修改 kubeadm-init.yaml, 要么初始化后修改 calico.yaml</span></span><br><span class="line">vim calico.yaml</span><br><span class="line">            <span class="comment"># The default IPv4 pool to create on startup if none exists. Pod IPs will be</span></span><br><span class="line">            <span class="comment"># chosen from this range. Changing this value after installation will have</span></span><br><span class="line">            <span class="comment"># no effect. This should fall within `--cluster-cidr`.</span></span><br><span class="line">            - name: CALICO_IPV4POOL_CIDR</span><br><span class="line">              value: <span class="string">"10.96.0.0/12"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化网络</span></span><br><span class="line">kubectl apply -f calico.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时查看 node 信息, master 的状态已经是 Ready 了</span></span><br><span class="line">kubectl get node</span><br><span class="line">NAME         STATUS   ROLES    AGE   VERSION</span><br><span class="line">k8s-master   Ready    master   15m   v1.18.3</span><br></pre></td></tr></table></figure><blockquote><p>安装 Dashboard，注意官方文档的更新</p></blockquote><p><a href="https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/" target="_blank" rel="noopener">Web UI (Dashboard)</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deploying the Dashboard UI</span></span><br><span class="line">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0/aio/deploy/recommended.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署完毕后, 执行 kubectl get pods --all-namespaces 查看 pods 状态</span></span><br><span class="line">kubectl get pods --all-namespaces | grep dashboard</span><br><span class="line">kubernetes-dashboard   dashboard-metrics-scraper-6b4884c9d5-79rvt       1/1     Running   0          4h5m</span><br><span class="line">kubernetes-dashboard   kubernetes-dashboard-7b544877d5-zb4bl            1/1     Running   0          4h5m</span><br></pre></td></tr></table></figure><blockquote><p>创建用户，如果方便登录测试可以创建匿名账户</p></blockquote><p><a href="https://github.com/kubernetes/dashboard/blob/master/docs/user/access-control/creating-sample-user.md" target="_blank" rel="noopener">Creating sample user</a></p><p>创建一个用于登录 Dashboard 的用户. 创建文件 dashboard-adminuser.yaml 内容如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">admin-user</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">admin-user</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line"><span class="attr">  apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line"><span class="attr">  kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">cluster-admin</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="attr">- kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">admin-user</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br></pre></td></tr></table></figure><p>执行命令 kubectl apply -f dashboard-adminuser.yaml</p><p>创建用于登录 Dashboard 的匿名用户. 创建文件 dashboard-annoymous.yaml 内容如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">kubernetes-dashboard-anonymous</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="attr">- apiGroups:</span> <span class="string">[""]</span></span><br><span class="line"><span class="attr">  resources:</span> <span class="string">["services/proxy"]</span></span><br><span class="line"><span class="attr">  resourceNames:</span> <span class="string">["https:kubernetes-dashboard:"]</span></span><br><span class="line"><span class="attr">  verbs:</span> <span class="string">["get",</span> <span class="string">"list"</span><span class="string">,</span> <span class="string">"watch"</span><span class="string">,</span> <span class="string">"create"</span><span class="string">,</span> <span class="string">"update"</span><span class="string">,</span> <span class="string">"patch"</span><span class="string">,</span> <span class="string">"delete"</span><span class="string">]</span></span><br><span class="line"><span class="attr">- nonResourceURLs:</span> <span class="string">["/ui",</span> <span class="string">"/ui/*"</span><span class="string">,</span> <span class="string">"/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/*"</span><span class="string">]</span></span><br><span class="line"><span class="attr">  verbs:</span> <span class="string">["get",</span> <span class="string">"list"</span><span class="string">,</span> <span class="string">"watch"</span><span class="string">,</span> <span class="string">"create"</span><span class="string">,</span> <span class="string">"update"</span><span class="string">,</span> <span class="string">"patch"</span><span class="string">,</span> <span class="string">"delete"</span><span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">kubernetes-dashboard-anonymous</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line"><span class="attr">  apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line"><span class="attr">  kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">kubernetes-dashboard-anonymous</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="attr">- kind:</span> <span class="string">User</span></span><br><span class="line"><span class="attr">  name:</span> <span class="attr">system:anonymous</span></span><br></pre></td></tr></table></figure><p>执行命令 kubectl apply -f dashboard-annoymous.yaml.yaml</p><blockquote><p>生成证书，这步非必须，根据情况生成并导入客户端</p></blockquote><p><a href="https://github.com/kubernetes/dashboard/blob/master/docs/user/accessing-dashboard/README.md" target="_blank" rel="noopener">Accessing Dashboard</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">'client-certificate-data'</span> ~/.kube/config | head -n 1 | awk <span class="string">'&#123;print $2&#125;'</span> | base64 -d &gt;&gt; kubecfg.crt</span><br><span class="line">grep <span class="string">'client-key-data'</span> ~/.kube/config | head -n 1 | awk <span class="string">'&#123;print $2&#125;'</span> | base64 -d &gt;&gt; kubecfg.key</span><br><span class="line">openssl pkcs12 -<span class="built_in">export</span> -clcerts -inkey kubecfg.key -<span class="keyword">in</span> kubecfg.crt -out kubecfg.p12 -name <span class="string">"kubernetes-client"</span></span><br></pre></td></tr></table></figure><p>第三条命令生成证书时会提示输入密码, 可以直接两次回车跳过</p><p><code>kubecfg.p12</code> 即需要导入客户端机器的证书. 将证书拷贝到客户端机器上, 导入即可</p><p>需要注意的是: 若生成证书时跳过了密码, 导入时提示填写密码直接回车即可, 不要纠结密码哪来的</p><p>此时我们可以登录面板了, 访问地址:<br>https://{k8s-master-ip}:6443/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/#/login<br>登录时会提示选择证书, 确认后会提示输入当前用户名密码(注意是电脑的用户名密码)</p><blockquote><p>登录 Dashboard</p></blockquote><p>执行 <code>kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user | awk &#39;{print $1}&#39;)</code>, 获取 Token.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line"></span><br><span class="line">Name:         admin-user-token-wdj28</span><br><span class="line">Namespace:    kube-system</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  kubernetes.io/service-account.name: admin-user</span><br><span class="line">              kubernetes.io/service-account.uid: f97e69ff-c4aa-45d4-bbb2-5221f3fb43cc</span><br><span class="line"></span><br><span class="line">Type:  kubernetes.io/service-account-token</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">ca.crt:     1025 bytes</span><br><span class="line">namespace:  11 bytes</span><br><span class="line">token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IlMxUGJ5TTR0cUQzd3JSODZfdWNScU14YXdHdmpLakdwSldrdTdhT1UyV2cifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLXdkajI4Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiJmOTdlNjlmZi1jNGFhLTQ1ZDQtYmJiMi01MjIxZjNmYjQzY2MiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06YWRtaW4tdXNlciJ9.wTdqAJfK0Z7C43SU0mAwoQw2dCdBcUD6A3uVo03OkW-r8Y630NP6MQqwmpi4IERohYjY6528oW0Ucj_2ukWu8z5eUAabNgL-_BQGXe2Zg1oGRK_LY90JN_L6f8mpYrPDFLfjSnUAdgb3zzCzhzIa2RihiYZW-mGm_ucfK5xt3dpFbDeIeEgePyFjUiX5ZdoMJEuerd6zgee1yeXEctQD4TRRxxtFebcLRgFDWVfOz0xWRNN1qSOB5v1ChkaQ5a6YxvGwjcrwrQaVN8bp73Zueu7FwmbkObT_EpWy0aZ7csTcSuNZ2K8QTpXr6NtN5xIcTpyMmIHmc9qCaskr5uM3qA</span><br></pre></td></tr></table></figure><p>复制该 Token 到登录页, 点击登录即可</p><h3 id="添加-k8s-worker"><a href="#添加-k8s-worker" class="headerlink" title="添加 k8s-worker"></a>添加 k8s-worker</h3><blockquote><p>添加 Worker 节点，以下操作应用于 k8s-worker</p></blockquote><p>重复执行 <code>前期准备 - 修改 hostname</code> ~ <code>安装 Kubernetes - 修改网络配置</code> 的全部操作, 初始化一个 Worker 机器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 执行如下命令将 Worker 加入集群，此处的秘钥是初始化 Master 后生成的</span><br><span class="line">kubeadm join 10.71.16.32:6443 --token abcdef.0123456789abcdef \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:67e23b74df39cfca4dd0ba3d747139cb0dd4ea5c546a12c60e84b3c9b057fc6e </span><br><span class="line"># 添加完毕后, 在 Master 上查看节点状态</span><br><span class="line">kubectl get node</span><br><span class="line">NAME         STATUS   ROLES    AGE   VERSION</span><br><span class="line">k8s-master   Ready    master   10h   v1.18.3</span><br><span class="line">k8s-worker   Ready    &lt;none&gt;   96s   v1.18.3</span><br></pre></td></tr></table></figure><p><a href="https://github.com/kubernetes/dashboard" target="_blank" rel="noopener">https://github.com/kubernetes/dashboard</a></p><p><a href="https://blog.piaoruiqing.com/2019/09/17/kubernetes-1-installation/" target="_blank" rel="noopener">Kubernetes(一) 跟着官方文档从零搭建 K8S</a></p><h2 id="Kubernetes-应用部署"><a href="#Kubernetes-应用部署" class="headerlink" title="Kubernetes 应用部署"></a>Kubernetes 应用部署</h2><p>本文将与读者一起, 学习如何在 Kubernetes 上部署应用. 包括: 如何部署应用、发布文件讲解、将本地项目打包发布等.</p><p>阅读这篇文章你能收获到:</p><ul><li>学会如何在 k8s 部署应用</li><li>如何打包 Docker 镜像、上传到私有库</li></ul><p>阅读本文你需要:</p><ul><li>熟悉 Linux 命令</li><li>有一个 Kubernetes 环境 </li></ul><h3 id="理解描述文件"><a href="#理解描述文件" class="headerlink" title="理解描述文件"></a>理解描述文件</h3><p>首先, 我们通过在 Kubernetes 部署 Nginx 来理解描述文件.</p><p>一般地, Kubernetes 使用 yaml(或 json)来描述发布配置. 下面是一个简单的描述文件: <code>nginx-pod.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span>      <span class="comment"># 描述文件所遵循 KubernetesAPI 的版本</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span>           <span class="comment"># 描述的类型是 pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx-pod</span>   <span class="comment"># pod 的名称</span></span><br><span class="line"><span class="attr">  labels:</span>           <span class="comment"># 标签</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">nginx-pod</span></span><br><span class="line"><span class="attr">    env:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">nginx-pod</span>     <span class="comment"># 容器名</span></span><br><span class="line"><span class="attr">      image:</span> <span class="attr">nginx:1.18</span>   <span class="comment"># 镜像名称及版本</span></span><br><span class="line"><span class="attr">      imagePullPolicy:</span> <span class="string">IfNotPresent</span>   <span class="comment"># 如果本地不存在就去远程仓库拉取</span></span><br><span class="line"><span class="attr">      ports:</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">80</span>   <span class="comment"># pod 对外端口</span></span><br><span class="line"><span class="attr">  restartPolicy:</span> <span class="string">Always</span></span><br></pre></td></tr></table></figure><p>我们登录 Master 节点, 使用 <code>kubectl</code> 命令来部署这个文件所描述的应用. (当然, 使用 dashboard 发布也可)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f nginx-pod.yaml</span><br><span class="line">pod/nginx-pod created</span><br><span class="line"></span><br><span class="line">kubectl get pods</span><br><span class="line">NAME        READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-pod   1/1     Running   0          39s</span><br></pre></td></tr></table></figure><p><code>kubectl get pods</code> 命令是用来查看 pod 列表的, 使用 <code>grep</code> 筛选出 nginx 相关的 pod. 此时 nginx 已经发布完成了. 我们可以从 dashboard 来直观地查看到应用状态.</p><p>备注: 删除 pod 可使用 <code>kubectl delete -f nginx-pod.yaml</code> 命令, 也可直接在 dashboard 进行操作.</p><h3 id="如何访问服务"><a href="#如何访问服务" class="headerlink" title="如何访问服务"></a>如何访问服务</h3><p>上一小节我们部署了一个 Nginx pod, 但我们无法访问到该 Nginx.</p><p>想要访问到 pod 中的服务, 最简单的方式就是通过端口转发, 执行如下命令, 将宿主机的 <code>9999</code> 端口与 nginx-pod 的 <code>80</code> 端口绑定:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl port-forward --address 0.0.0.0 nginx-pod 9999:80</span><br><span class="line">Forwarding from 0.0.0.0:9999 -&gt; 80</span><br><span class="line">Handling connection <span class="keyword">for</span> 9999</span><br></pre></td></tr></table></figure><p>此时, 我们可以通过访问宿主机 9999 端口来访问 Nginx.</p><h3 id="部署本地项目"><a href="#部署本地项目" class="headerlink" title="部署本地项目"></a>部署本地项目</h3><p>将本地开发的项目发布到 Kubernetes, 需要将项目打包成 Docker 镜像, 然后将镜像推送到仓库(公开 / 私有仓库都可).</p><p>首先, 我们需要一个可以运行的本地项目, 笔者使用 spring-boot 构建了一个简单的 web 项目:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/k8s-test"</span>)</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">K8sTestApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/timestamp"</span>)</span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;?&gt; getTimestamp() &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(System.currentTimeMillis() + <span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(K8sTestApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="打包-Docker-镜像"><a href="#打包-Docker-镜像" class="headerlink" title="打包 Docker 镜像"></a>打包 Docker 镜像</h3><p><a href="https://docs.docker.com/engine/reference/builder/" target="_blank" rel="noopener">Dockerfile reference</a></p><p>有了项目, 我们需要将其打包成一个 Docker 镜像, <code>Dockerfile</code> 内容如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FROM java:8-alpine</span><br><span class="line">COPY ./k8s-test-0.0.1-SNAPSHOT.jar /usr/app/</span><br><span class="line">WORKDIR /usr/app</span><br><span class="line">ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;k8s-test-0.0.1-SNAPSHOT.jar&quot;]</span><br></pre></td></tr></table></figure><ul><li><code>FROM java:8-alpine</code>: 该镜像基于 <code>java-8-alpine</code> 镜像.</li><li><code>COPY ./target/k8s-test-0.0.1-SNAPSHOT.jar /usr/app/</code>: 将编译打包好的 jar 拷贝到镜像的 <code>/usr/app</code> 目录下.</li><li><code>WORKDIR /usr/app</code>: 工作目录指定为 <code>/usr/app</code>.</li><li><code>ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;k8s-test-0.0.1-SNAPSHOT.jar&quot;]</code>: 启动 docker 时执行 <code>java -jar k8s-test-0.0.1-SNAPSHOT.jar</code> 命令</li></ul><p>进入到 Dockerfile 所在目录执行 <code>docker build -t piaoruiqing/k8s-test .</code> 进行打包. 注意不要遗漏掉命令最后面的 <code>.</code> , 它代表当前目录.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 打包</span><br><span class="line">docker build -t piaoruiqing/k8s-test .</span><br><span class="line"># 通过 docker images 命令可以查看本地镜像列表:</span><br><span class="line">docker images | grep k8s</span><br><span class="line">piaoruiqing/k8s-test     latest         efe9e9625376        4 minutes ago       174MB</span><br></pre></td></tr></table></figure><h3 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h3><p>留空给 Harbor</p><p><a href="https://blog.piaoruiqing.com/2019/09/28/kubernetes-2-deploy/" target="_blank" rel="noopener">Kubernetes(二) 应用部署</a></p><h2 id="如何从外部访问服务"><a href="#如何从外部访问服务" class="headerlink" title="如何从外部访问服务"></a>如何从外部访问服务</h2><p>通过前文的讲解,《跟着官方文档从零搭建 K8S》、《应用部署》相信读者已经对 Kubernetes 安装及部署应用有了一定的了解. 接下来, 本文将针对如何将服务暴露给外部进行讲解.</p><p>阅读这篇文章你能收获到:</p><ul><li>了解 Kubernetes 暴露服务的几种方案及其优缺点.</li></ul><p>阅读本文你需要:</p><ul><li>了解基本的 Kubernetes 命令</li><li>有一个 Kubernetes 环境</li></ul><h3 id="将服务暴露给外部客户端的几种方式"><a href="#将服务暴露给外部客户端的几种方式" class="headerlink" title="将服务暴露给外部客户端的几种方式"></a>将服务暴露给外部客户端的几种方式</h3><ul><li>通过 <code>port-forward</code> 转发, 这种方式在之前的文章中有提到过, 操作方便、适合调试时使用, <strong> 不适用于生产环境 </strong>.</li><li>通过 <code>NodePort</code>, 此时集群中每一个节点 (Node) 都会监听指定端口, 我们通过任意节点的端口即可访问到指定服务. 但过多的服务会开启大量端口难以维护.</li><li>通过 <code>LoadBalance</code> 来暴露服务. <code>LoadBalance(负载均衡 LB)</code> 通常由云服务商提供, 如果云环境中不提供 LB 服务, 我们通常直接使用 <code>Ingress</code>, 或使用 <code>MetalLB</code> 来自行配置 LB.</li><li>通过 <code>Ingress</code> 公开多个服务. <code>Ingress</code> 公开了从群集外部到群集内 <code>services</code> 的 HTTP 和 HTTPS 路由. 流量路由由 <code>Ingress</code> 资源上定义的规则控制. 在云服务商不提供 LB 服务的情况下, 我们可以直接使用 <code>Ingress</code> 来暴露服务. (另外, 使用 <code>LB + Ingress</code> 的部署方案可以避免过多 LB 应用带来的花费).</li></ul><p><a href="https://blog.piaoruiqing.com/2019/10/20/kubernetes-3-access-service/" target="_blank" rel="noopener">Kubernetes(三) 如何从外部访问服务</a></p><h2 id="K8s-开源管理产品推荐"><a href="#K8s-开源管理产品推荐" class="headerlink" title="K8s 开源管理产品推荐"></a>K8s 开源管理产品推荐</h2><p><a href="https://github.com/easzlab/kubeasz" target="_blank" rel="noopener">kubeasz</a></p><p><a href="https://kuboard.cn/" target="_blank" rel="noopener">kuboard</a></p><p><a href="https://kubesphere.com.cn/" target="_blank" rel="noopener">KubeSphere</a></p><p><a href="https://github.com/jetstack/cert-manager" target="_blank" rel="noopener">cert-manager</a></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://kubernetes.io/docs/" target="_blank" rel="noopener">Kubernetes Documentation</a></p><p><a href="https://cloud.google.com/kubernetes-engine/docs/" target="_blank" rel="noopener">Google Kubernetes Engine 文档</a></p><p><a href="https://github.com/rootsongjc/kubernetes-handbook" target="_blank" rel="noopener">Kubernetes Handbook</a></p><p><a href="https://github.com/feiskyer/kubernetes-handbook" target="_blank" rel="noopener">Kubernetes 指南</a></p><p><a href="https://github.com/opsnull/follow-me-install-kubernetes-cluster" target="_blank" rel="noopener">和我一步步部署 kubernetes 集群</a></p><p><a href="https://github.com/caicloud/kube-ladder" target="_blank" rel="noopener">才云开源内部 Kubernetes 学习路径</a></p><p><a href="https://time.geekbang.org/column/intro/116" target="_blank" rel="noopener">深入剖析 Kubernetes</a></p>]]></content>
    
    <summary type="html">
    
      Kubernetes学习路径
    
    </summary>
    
      <category term="学习 | Study" scheme="https://wsgzao.github.io/categories/%E5%AD%A6%E4%B9%A0-Study/"/>
    
    
  </entry>
  
  <entry>
    <title>ethtool 原理介绍和解决网卡丢包排查思路</title>
    <link href="https://wsgzao.github.io/post/ethtool/"/>
    <id>https://wsgzao.github.io/post/ethtool/</id>
    <published>2020-06-22T06:59:49.000Z</published>
    <updated>2020-06-22T10:38:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前记录过处理因为 LVS 网卡流量负载过高导致软中断发生丢包的问题，<a href="https://wsgzao.github.io/post/rps/">RPS 和 RFS 网卡多队列性能调优实践</a>，对一般人来说压力不大的情况下其实碰见的概率并不高。这次想分享的话题是比较常见服务器网卡丢包现象排查思路，如果你是想了解点对点的丢包解决思路涉及面可能就比较广，不妨先参考之前的文章 <a href="https://wsgzao.github.io/post/mtr/">如何使用 MTR 诊断网络问题</a>，对于 Linux 常用的网卡丢包分析工具自然是 ethtool。</p><h2 id="更新历史"><a href="#更新历史" class="headerlink" title="更新历史"></a>更新历史</h2><p>2020 年 06 月 22 日 - 初稿</p><p>阅读原文 - <a href="https://wsgzao.github.io/post/ethtool/">https://wsgzao.github.io/post/ethtool/</a></p><hr><h2 id="ethtool-简介"><a href="#ethtool-简介" class="headerlink" title="ethtool 简介"></a>ethtool 简介</h2><p>ethtool - utility for controlling network drivers and hardware</p><p>ethtool is the standard Linux utility for controlling network drivers and hardware, particularly for wired Ethernet devices. It can be used to:</p><ul><li>Get identification and diagnostic information</li><li>Get extended device statistics</li><li>Control speed, duplex, autonegotiation and flow control for Ethernet devices</li><li>Control checksum offload and other hardware offload features</li><li>Control DMA ring sizes and interrupt moderation</li><li>Control receive queue selection for multiqueue devices</li><li>Upgrade firmware in flash memory</li></ul><p>Most features are dependent on support in the specific driver. See the manual page for full information.</p><p>ethtool 用于查看和修改网络设备（尤其是有线以太网设备）的驱动参数和硬件设置。你可以根据需要更改以太网卡的参数，包括自动协商、速度、双工和局域网唤醒等参数。通过对以太网卡的配置，你的计算机可以通过网络有效地进行通信。该工具提供了许多关于接驳到你的 Linux 系统的以太网设备的信息。</p><h2 id="了解接收数据包的流程"><a href="#了解接收数据包的流程" class="headerlink" title="了解接收数据包的流程"></a>了解接收数据包的流程</h2><blockquote><p>这里摘取了美团技术团队的分析，在此表示感谢</p></blockquote><p>接收数据包是一个复杂的过程，涉及很多底层的技术细节，但大致需要以下几个步骤：</p><ol><li>网卡收到数据包。</li><li>将数据包从网卡硬件缓存转移到服务器内存中。</li><li>通知内核处理。</li><li>经过 TCP/IP 协议逐层处理。</li><li>应用程序通过 <code>read()</code> 从 <code>socket buffer</code> 读取数据。</li></ol><p><img src="https://raw.githubusercontent.com/wsgzao/storage-public/master/img/20190704163040.png" alt=""></p><h3 id="将网卡收到的数据包转移到主机内存（NIC-与驱动交互）"><a href="#将网卡收到的数据包转移到主机内存（NIC-与驱动交互）" class="headerlink" title="将网卡收到的数据包转移到主机内存（NIC 与驱动交互）"></a>将网卡收到的数据包转移到主机内存（NIC 与驱动交互）</h3><p>NIC 在接收到数据包之后，首先需要将数据同步到内核中，这中间的桥梁是 <code>rx ring buffer</code>。它是由 NIC 和驱动程序共享的一片区域，事实上，<code>rx ring buffer</code> 存储的并不是实际的 packet 数据，而是一个描述符，这个描述符指向了它真正的存储地址，具体流程如下：</p><ol><li>驱动在内存中分配一片缓冲区用来接收数据包，叫做 <code>sk_buffer</code>；</li><li>将上述缓冲区的地址和大小（即接收描述符），加入到 <code>rx ring buffer</code>。描述符中的缓冲区地址是 DMA 使用的物理地址；</li><li>驱动通知网卡有一个新的描述符；</li><li>网卡从 <code>rx ring buffer</code> 中取出描述符，从而获知缓冲区的地址和大小；</li><li>网卡收到新的数据包；</li><li>网卡将新数据包通过 DMA 直接写到 <code>sk_buffer</code> 中。</li></ol><p><img src="https://raw.githubusercontent.com/wsgzao/storage-public/master/img/20190704163052.png" alt=""></p><p>当驱动处理速度跟不上网卡收包速度时，驱动来不及分配缓冲区，NIC 接收到的数据包无法及时写到 <code>sk_buffer</code>，就会产生堆积，当 NIC 内部缓冲区写满后，就会丢弃部分数据，引起丢包。这部分丢包为 <code>rx_fifo_errors</code>，在 <code>/proc/net/dev</code> 中体现为 fifo 字段增长，在 ifconfig 中体现为 overruns 指标增长。</p><h3 id="通知系统内核处理（驱动与-Linux-内核交互）"><a href="#通知系统内核处理（驱动与-Linux-内核交互）" class="headerlink" title="通知系统内核处理（驱动与 Linux 内核交互）"></a>通知系统内核处理（驱动与 Linux 内核交互）</h3><p>这个时候，数据包已经被转移到了 <code>sk_buffer</code> 中。前文提到，这是驱动程序在内存中分配的一片缓冲区，并且是通过 DMA 写入的，这种方式不依赖 CPU 直接将数据写到了内存中，意味着对内核来说，其实并不知道已经有新数据到了内存中。那么如何让内核知道有新数据进来了呢？答案就是中断，通过中断告诉内核有新数据进来了，并需要进行后续处理。</p><p>提到中断，就涉及到硬中断和软中断，首先需要简单了解一下它们的区别：</p><ul><li>硬中断： 由硬件自己生成，具有随机性，硬中断被 CPU 接收后，触发执行中断处理程序。中断处理程序只会处理关键性的、短时间内可以处理完的工作，剩余耗时较长工作，会放到中断之后，由软中断来完成。硬中断也被称为上半部分。</li><li>软中断： 由硬中断对应的中断处理程序生成，往往是预先在代码里实现好的，不具有随机性。（除此之外，也有应用程序触发的软中断，与本文讨论的网卡收包无关。）也被称为下半部分。</li></ul><p><strong> 当 NIC 把数据包通过 DMA 复制到内核缓冲区 <code>sk_buffer</code> 后，NIC 立即发起一个硬件中断。CPU 接收后，首先进入上半部分，网卡中断对应的中断处理程序是网卡驱动程序的一部分，之后由它发起软中断，进入下半部分，开始消费 <code>sk_buffer</code> 中的数据，交给内核协议栈处理。</strong></p><p><img src="https://raw.githubusercontent.com/wsgzao/storage-public/master/img/20190704163113.png" alt=""></p><p>通过中断，能够快速及时地响应网卡数据请求，但如果数据量大，那么会产生大量中断请求，CPU 大部分时间都忙于处理中断，效率很低。为了解决这个问题，现在的内核及驱动都采用一种叫 NAPI（new API）的方式进行数据处理，其原理可以简单理解为 中断 + 轮询，在数据量大时，一次中断后通过轮询接收一定数量包再返回，避免产生多次中断。</p><h2 id="ifconfig-解释"><a href="#ifconfig-解释" class="headerlink" title="ifconfig 解释"></a>ifconfig 解释</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ifconfig eth0</span></span><br><span class="line">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500</span><br><span class="line">inet 192.168.1.135 netmask 255.255.255.0 broadcast 192.168.1.255</span><br><span class="line">inet6 fe80::20c:29ff:fe9b:52d3 prefixlen 64 scopeid 0x20&lt;link&gt;</span><br><span class="line">ether 00:0c:29:9b:52:d3 txqueuelen 1000 (Ethernet)</span><br><span class="line">RX packets 833 bytes 61846 (60.3 KiB)</span><br><span class="line">RX errors 0 dropped 0 overruns 0 frame 0</span><br><span class="line">TX packets 122 bytes 9028 (8.8 KiB)</span><br><span class="line">TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0</span><br></pre></td></tr></table></figure><p>(1) RX errors</p><p>表示总的收包的错误数量，这包括 too-long-frames 错误，Ring Buffer 溢出错误，crc 校验错误，帧同步错误，fifo overruns 以及 missed pkg 等等。</p><p>(2) RX dropped</p><p>表示数据包已经进入了 Ring Buffer，但是由于内存不够等系统原因，导致在拷贝到内存的过程中被丢弃。</p><p>(3) RX overruns</p><p>表示了 fifo 的 overruns，这是由于 Ring Buffer(aka Driver Queue) 传输的 IO 大于 kernel 能够处理的 IO 导致的，而 Ring Buffer 则是指在发起 IRQ 请求之前的那块 buffer。很明显，overruns 的增大意味着数据包没到 Ring Buffer 就被网卡物理层给丢弃了，而 CPU 无法即使的处理中断是造成 Ring Buffer 满的原因之一，上面那台有问题的机器就是因为 interruprs 分布的不均匀 (都压在 core0)，没有做 affinity 而造成的丢包。</p><p>(4) RX frame</p><p>表示 misaligned 的 frames。</p><h2 id="网卡工作原理"><a href="#网卡工作原理" class="headerlink" title="网卡工作原理"></a>网卡工作原理</h2><blockquote><p>如果上面接收数据包的流程觉得不够详细可以再看纯文字解释</p></blockquote><h3 id="网卡收包"><a href="#网卡收包" class="headerlink" title="网卡收包"></a>网卡收包</h3><p>网线上的 packet 首先被网卡获取，网卡会检查 packet 的 CRC 校验，保证完整性，然后将 packet 头去掉，得到 frame。网卡会检查 MAC 包内的目的 MAC 地址，如果和本网卡的 MAC 地址不一样则丢弃 (混杂模式除外)。</p><p>网卡将 frame 拷贝到网卡内部的 FIFO 缓冲区，触发硬件中断。（如有 ring buffer 的网卡，好像 frame 可以先存在 ring buffer 里再触发软件中断（下篇文章将详细解释 Linux 中 frame 的走向），ring buffer 是网卡和驱动程序共享，是设备里的内存，但是对操作系统是可见的，因为看到 linux 内核源码里网卡驱动程序是使用 kcalloc 来分配的空间，所以 ring buffer 一般都有上限，另外这个 ring buffer size，表示的应该是能存储的 frame 的个数，而不是字节大小。另外有些系统的 ethtool 命令 并不能改变 ring parameters 来设置 ring buffer 的大小，暂时不知道为什么，可能是驱动不支持。）</p><p>网卡驱动程序通过硬中断处理函数，构建 sk_buff，把 frame 从网卡 FIFO 拷贝到内存 skb 中，接下来交给内核处理。（支持 napi 的网卡应该是直接放在 ring buffer，不触发硬中断，直接使用软中断，拷贝 ring buffer 里的数据，直接输送给上层处理，每个网卡在一次软中断处理过程能处理 weight 个 frame）</p><p>过程中，网卡芯片对 frame 进行了 MAC 过滤，以减小系统负荷。（除了混杂模式）</p><h3 id="网卡发包"><a href="#网卡发包" class="headerlink" title="网卡发包"></a>网卡发包</h3><p>网卡驱动程序将 IP 包添加 14 字节的 MAC 头，构成 frame（暂无 CRC）。Frame（暂无 CRC）中含有发送端和接收端的 MAC 地址，由于是驱动程序创建 MAC 头，所以可以随便输入地址，也可以进行主机伪装。</p><p>驱动程序将 frame（暂无 CRC）拷贝到网卡芯片内部的缓冲区，由网卡处理。</p><p>网卡芯片将未完全完成的 frame（缺 CRC）再次封装为可以发送的 packet，也就是添加头部同步信息和 CRC 校验，然后丢到网线上，就完成一个 IP 报的发送了，所有接到网线上的网卡都可以看到该 packet。</p><h3 id="网卡中断处理函数"><a href="#网卡中断处理函数" class="headerlink" title="网卡中断处理函数"></a>网卡中断处理函数</h3><p>产生中断的每个设备都有一个相应的中断处理程序，是设备驱动程序的一部分。每个网卡都有一个中断处理程序，用于通知网卡该中断已经被接收了，以及把网卡缓冲区的数据包拷贝到内存中。</p><p>当网卡接收来自网络的数据包时，需要通知内核数据包到了。网卡立即发出中断。内核通过执行网卡已注册的中断处理函数来做出应答。中断处理程序开始执行，通知硬件，拷贝最新的网络数据包到内存，然后读取网卡更多的数据包。</p><p>这些都是重要、紧迫而又与硬件相关的工作。内核通常需要快速的拷贝网络数据包到系统内存，因为网卡上接收网络数据包的缓存大小固定，而且相比系统内存也要小得多。所以上述拷贝动作一旦被延迟，必然造成网卡 FIFO 缓存溢出 - 进入的数据包占满了网卡的缓存，后续的包只能被丢弃，这也应该就是 ifconfig 里的 overrun 的来源。</p><p>当网络数据包被拷贝到系统内存后，中断的任务算是完成了，这时它把控制权交还给被系统中断前运行的程序。</p><h3 id="缓冲区访问"><a href="#缓冲区访问" class="headerlink" title="缓冲区访问"></a>缓冲区访问</h3><p>网卡的内核缓冲区，是在 PC 内存中，由内核控制，而网卡会有 FIFO 缓冲区，或者 ring buffer，这应该将两者区分开。FIFO 比较小，里面有数据便会尽量将数据存在内核缓冲中。</p><p>网卡中的缓冲区既不属于内核空间，也不属于用户空间。它属于硬件缓冲，允许网卡与操作系统之间有个缓冲；</p><p>内核缓冲区在内核空间，在内存中，用于内核程序，做为读自或写往硬件的数据缓冲区；</p><p>用户缓冲区在用户空间，在内存中，用于用户程序，做为读自或写往硬件的数据缓冲区；</p><p>另外，为了加快数据的交互，可以将内核缓冲区映射到用户空间，这样，内核程序和用户程序就可以同时访问这一区间了。</p><p>对于有 ring buffer 的网卡，ring buffer 是由驱动与网卡共享的，所以内核可以直接访问 ring buffer，一般拷贝 frames 的副本到自己的内核空间进行处理（deliver 到上层协议，之后的一个个 skb 就是按 skb 的指针传递方式传递，直到用户获得数据，所以，对于 ring buffer 网卡，大量拷贝发生在 frame 从 ring buffer 传递到内核控制的计算机内存里）。</p><h2 id="丢包排查思路"><a href="#丢包排查思路" class="headerlink" title="丢包排查思路"></a>丢包排查思路</h2><p>网卡工作在数据链路层，数据量链路层，会做一些校验，封装成帧。我们可以查看校验是否出错，确定传输是否存在问题。然后从软件层面，是否因为缓冲区太小丢包。</p><h3 id="先查看硬件情况"><a href="#先查看硬件情况" class="headerlink" title="先查看硬件情况"></a>先查看硬件情况</h3><p>一台机器经常收到丢包的报警，先看看最底层的有没有问题:</p><p>(1) 查看工作模式是否正常<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ethtool eth0 | egrep &apos;Speed|Duplex&apos;</span><br><span class="line">Speed: 1000Mb/s</span><br><span class="line">Duplex: Full</span><br></pre></td></tr></table></figure></p><p>(2) 查看检验是否正常<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ethtool -S eth0 | grep crc</span><br><span class="line">rx_crc_errors: 0</span><br></pre></td></tr></table></figure></p><p>Speed，Duplex，CRC 之类的都没问题，基本可以排除物理层面的干扰。</p><h3 id="overruns-和-buffer-size"><a href="#overruns-和-buffer-size" class="headerlink" title="overruns 和 buffer size"></a>overruns 和 buffer size</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过 ifconfig 可以看到 overruns 是否一直增大 </span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `seq 1 100`; <span class="keyword">do</span> ifconfig eth2 | grep RX | grep overruns; sleep 1; <span class="keyword">done</span></span><br><span class="line"><span class="comment"># 这里一直增加 </span></span><br><span class="line">RX packets:346547657 errors:0 dropped:0 overruns:35345 frame:0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以通过 ethtool 来修改网卡的 buffer size ，首先要网卡支持，我的服务器是是 INTEL 的 1000M 网卡, 我们看看 ethtool 说明 </span></span><br><span class="line">-g   –show-ringQueries the specified ethernet device <span class="keyword">for</span> rx/tx ring parameter information.</span><br><span class="line">-G   –<span class="built_in">set</span>-ringChanges the rx/tx ring parameters of the specified ethernet device.</span><br><span class="line"><span class="comment"># 查看当前网卡的 buffer size 情况 </span></span><br><span class="line">ethtool -g eth0</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># ethtool -g eth0</span></span><br><span class="line">Ring parameters <span class="keyword">for</span> eth0:</span><br><span class="line">Pre-set maximums:</span><br><span class="line">RX: 4096</span><br><span class="line">RX Mini: 0</span><br><span class="line">RX Jumbo: 0</span><br><span class="line">TX: 4096</span><br><span class="line">Current hardware settings:</span><br><span class="line">RX: 256</span><br><span class="line">RX Mini: 0</span><br><span class="line">RX Jumbo: 0</span><br><span class="line">TX: 256</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 buffer size 大小 </span></span><br><span class="line">ethtool -G eth0 rx 2048</span><br><span class="line">ethtool -G eth0 tx 2048</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># ethtool -G eth0 rx 2048</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ethtool -G eth0 tx 2048</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ethtool -g eth0</span></span><br><span class="line">Ring parameters <span class="keyword">for</span> eth0:</span><br><span class="line">Pre-set maximums:</span><br><span class="line">RX: 4096</span><br><span class="line">RX Mini: 0</span><br><span class="line">RX Jumbo: 0</span><br><span class="line">TX: 4096</span><br><span class="line">Current hardware settings:</span><br><span class="line">RX: 2048</span><br><span class="line">RX Mini: 0</span><br><span class="line">RX Jumbo: 0</span><br><span class="line">TX: 2048</span><br></pre></td></tr></table></figure><h3 id="Red-Hat-官方解决思路"><a href="#Red-Hat-官方解决思路" class="headerlink" title="Red Hat 官方解决思路"></a>Red Hat 官方解决思路</h3><blockquote><p>Issue</p></blockquote><p>Why <code>rx_crc_errors</code> incrementing in the receive counter of <code>ethtool -S</code> output?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ethtool -S &lt;Interface_name&gt; | grep -i error</span><br><span class="line">     rx_error_bytes: 0</span><br><span class="line">     tx_error_bytes: 0</span><br><span class="line">     tx_mac_errors: 0</span><br><span class="line">     tx_carrier_errors: 0</span><br><span class="line">     rx_crc_errors: 9244</span><br><span class="line">     rx_align_errors: 0</span><br></pre></td></tr></table></figure><blockquote><p>Resolution</p></blockquote><ol><li>Change the cable.</li><li>Check switch configuration.</li><li>Change the network interface card.</li></ol><blockquote><p>Root Cause</p></blockquote><ol><li>Most of the time incrementing the value of <code>rx_crc_errors</code> means the problem is in <code>Layer-1</code> of the networking model.</li><li>When a packet is received at the interface, it goes through a data integrity check which is called <code>cyclic redundancy check</code>. If the packet fails in that check, it is marked as <code>rx_crc_errors</code>.</li><li>The switch was forcing the <code>NIC</code> to operate in <code>half-duplex</code> mode. Fixing the switch to tell the <code>NIC</code> to operate in <code>full-duplex</code> mode have resolved the issue.</li></ol><blockquote><p>Diagnostic Steps</p></blockquote><p>Check <code>ethtool -S</code> output and find where are the drops and errors.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ethtool -S &lt;Interface_name&gt; | grep -i error</span><br><span class="line">     rx_error_bytes: 0</span><br><span class="line">     tx_error_bytes: 0</span><br><span class="line">     tx_mac_errors: 0</span><br><span class="line">     tx_carrier_errors: 0</span><br><span class="line">     rx_crc_errors: 9244  &gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">     rx_align_errors: 0</span><br></pre></td></tr></table></figure><p>Check the numbers corresponding to <code>rx_crc_errors</code>.</p><h2 id="ethtool-常用命令"><a href="#ethtool-常用命令" class="headerlink" title="ethtool 常用命令"></a>ethtool 常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">ethtool p1p1</span><br><span class="line"></span><br><span class="line">Settings <span class="keyword">for</span> p1p1:</span><br><span class="line">Supported ports: [ FIBRE ]</span><br><span class="line">Supported link modes:   10000baseT/Full</span><br><span class="line">Supported pause frame use: Symmetric</span><br><span class="line">Supports auto-negotiation: No</span><br><span class="line">Supported FEC modes: Not reported</span><br><span class="line">Advertised link modes:  10000baseT/Full</span><br><span class="line">Advertised pause frame use: Symmetric</span><br><span class="line">Advertised auto-negotiation: No</span><br><span class="line">Advertised FEC modes: Not reported</span><br><span class="line">Speed: 10000Mb/s</span><br><span class="line">Duplex: Full</span><br><span class="line">Port: FIBRE</span><br><span class="line">PHYAD: 0</span><br><span class="line">Transceiver: internal</span><br><span class="line">Auto-negotiation: off</span><br><span class="line">Supports Wake-on: d</span><br><span class="line">Wake-on: d</span><br><span class="line">Current message level: 0x00000007 (7)</span><br><span class="line">       drv probe link</span><br><span class="line">Link detected: yes</span><br></pre></td></tr></table></figure><p>显示了 p1p1 的接口类型，连接模式，速率等等信息，以及当前是否连接了网线（如果是网线 Supported ports 就是 TP，如果是光纤则显示 Fiber），这里例举下 3 个重要关键词</p><p>Supported ports: [ FIBRE ]<br>Speed: 10000Mb/s<br>Link detected: yes</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -S 显示 NIC- and driver-specific 的统计参数，如网卡接收 / 发送的字节数、接收 / 发送的广播包个数等。 </span></span><br><span class="line">ethtool -S p1p1 | grep -i error</span><br><span class="line">     rx_errors: 0</span><br><span class="line">     tx_errors: 0</span><br><span class="line">     rx_over_errors: 0</span><br><span class="line">     rx_crc_errors: 0</span><br><span class="line">     rx_frame_errors: 0</span><br><span class="line">     rx_fifo_errors: 0</span><br><span class="line">     rx_missed_errors: 0</span><br><span class="line">     tx_aborted_errors: 0</span><br><span class="line">     tx_carrier_errors: 0</span><br><span class="line">     tx_fifo_errors: 0</span><br><span class="line">     tx_heartbeat_errors: 0</span><br><span class="line">     rx_length_errors: 0</span><br><span class="line">     rx_long_length_errors: 0</span><br><span class="line">     rx_short_length_errors: 0</span><br><span class="line">     rx_csum_offload_errors: 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># -p 用于区别不同 ethX 对应网卡的物理位置，常用的方法是使网卡 port 上的 led 不断的闪 </span></span><br><span class="line">ethtool -p &lt;Interface_name&gt;</span><br><span class="line">ethtool -p eth0</span><br><span class="line"></span><br><span class="line"><span class="comment"># -i 显示网卡驱动的信息，如驱动的名称、版本等 </span></span><br><span class="line">ethtool -i p1p1</span><br><span class="line"></span><br><span class="line">driver: ixgbe</span><br><span class="line">version: 5.1.0-k-rh7.6</span><br><span class="line">firmware-version: 0x80000960, 18.3.6</span><br><span class="line">expansion-rom-version:</span><br><span class="line">bus-info: 0000:04:00.0</span><br><span class="line">supports-statistics: yes</span><br><span class="line">supports-test: yes</span><br><span class="line">supports-eeprom-access: yes</span><br><span class="line">supports-register-dump: yes</span><br><span class="line">supports-priv-flags: yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># ethtool –s ethX [speed 10|100|1000] [duplex half|full]  [autoneg on|off]</span></span><br><span class="line"><span class="comment"># 设置网口速率 10/100/1000M、设置网口半 / 全双工、设置网口是否自协商 </span></span><br><span class="line">ethtool -s eth0 speed 100</span><br></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://mirrors.edge.kernel.org/pub/software/network/ethtool/" target="_blank" rel="noopener">ethtool</a></p><p><a href="https://community.mellanox.com/s/article/counters-troubleshooting-for-linux-driver" target="_blank" rel="noopener">Counters Troubleshooting for Linux Driver</a></p><p><a href="https://access.redhat.com/solutions/154543" target="_blank" rel="noopener">Why do I see rx_crc_errors in ethtool output?</a></p><p><a href="https://blog.csdn.net/u011857683/article/details/83663316" target="_blank" rel="noopener">ping 请求错误分析</a></p><p><a href="https://blog.csdn.net/u011857683/article/details/83758503" target="_blank" rel="noopener">ifconfig 命令详解</a></p><p><a href="https://blog.csdn.net/u011857683/article/details/83758689" target="_blank" rel="noopener">ethtool 命令详解</a></p><p><a href="https://blog.csdn.net/u011857683/article/details/83758869" target="_blank" rel="noopener">ethtool 解决网卡丢包严重和网卡原理</a></p>]]></content>
    
    <summary type="html">
    
      ethtool原理介绍和解决网卡丢包排查思路
    
    </summary>
    
      <category term="学习 | Study" scheme="https://wsgzao.github.io/categories/%E5%AD%A6%E4%B9%A0-Study/"/>
    
    
  </entry>
  
  <entry>
    <title>Ansible 学习路径</title>
    <link href="https://wsgzao.github.io/post/ansible/"/>
    <id>https://wsgzao.github.io/post/ansible/</id>
    <published>2020-06-21T02:59:49.000Z</published>
    <updated>2020-10-19T13:56:06.043Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为工作的缘故接触并积极推动 Ansible 在企业级生产环境的落地，独立承担并实现了《基于 ansible 的主机自动化配置管理》项目，此前也先后接触过 Puppet 和 SaltStack，本文不会讨论开源或者自主研发方案的优劣，重点是和大伙儿分享自己在 ansible 技术领域积累的一些项目实战经验，如果大家遇到任何问题也欢迎通过留言或者其他方式进行互动，我尽力做到有效回复。</p><blockquote><p>Ansible is Simple IT Automation</p></blockquote><h2 id="更新历史"><a href="#更新历史" class="headerlink" title="更新历史"></a>更新历史</h2><p>2020 年 06 月 21 日 - 增加 Mitogen for Ansible<br>2020 年 06 月 01 日 - 增加基于 Ansible 的自动化运维开源项目<br>2020 年 01 月 22 日 - 增加 Ansible 参考文章<br>2018 年 05 月 15 日 - 初稿</p><p>阅读原文 - <a href="https://wsgzao.github.io/post/ansible/">https://wsgzao.github.io/post/ansible/</a></p><p><strong> 扩展阅读 </strong></p><p>ansible - <a href="https://docs.ansible.com/" target="_blank" rel="noopener">https://docs.ansible.com/</a></p><hr><h2 id="Ansible-标准化学习路径"><a href="#Ansible-标准化学习路径" class="headerlink" title="Ansible 标准化学习路径"></a>Ansible 标准化学习路径</h2><blockquote><p>Ansible 相关的书籍在逐步增多，由于 Ansible 版本迭代更新频率高但学习成本低，个人建议书为辅，官方文档为主</p></blockquote><p>Ansible is an IT automation tool. It can configure systems, deploy software, and orchestrate more advanced IT tasks such as continuous deployments or zero downtime rolling updates.</p><p>Ansible’s main goals are simplicity and ease-of-use. It also has a strong focus on security and reliability, featuring a minimum of moving parts, usage of OpenSSH for transport (with other transports and pull modes as alternatives), and a language that is designed around auditability by humans–even those not familiar with the program.</p><p>We believe simplicity is relevant to all sizes of environments, so we design for busy users of all types: developers, sysadmins, release engineers, IT managers, and everyone in between. Ansible is appropriate for managing all environments, from small setups with a handful of instances to enterprise environments with many thousands of instances.</p><p>Ansible manages machines in an agent-less manner. There is never a question of how to upgrade remote daemons or the problem of not being able to manage systems because daemons are uninstalled. Because OpenSSH is one of the most peer-reviewed open source components, security exposure is greatly reduced. Ansible is decentralized–it relies on your existing OS credentials to control access to remote machines. If needed, Ansible can easily connect with Kerberos, LDAP, and other centralized authentication management systems.</p><p>This documentation covers the current released version of Ansible and also some development version features. For recent features, we note in each section the version of Ansible where the feature was added.</p><p>Ansible releases a new major release of Ansible approximately every two months. The core application evolves somewhat conservatively, valuing simplicity in language design and setup. However, the community around new modules and plugins being developed and contributed moves very quickly, adding many new modules in each release.</p><blockquote><p>Ansible Lightbulb 新版本是 Red Hat Ansible Automation Platform Workshops</p></blockquote><p>The Ansible Lightbulb project is an effort to provide a content toolkit and educational reference for effectively communicating and teaching Ansible topics.</p><p>Ansible Lightbulb - <a href="https://github.com/ansible/lightbulb" target="_blank" rel="noopener">https://github.com/ansible/lightbulb</a></p><p>Red Hat Ansible Automation Platform Workshops - <a href="https://ansible.github.io/workshops/" target="_blank" rel="noopener">https://ansible.github.io/workshops/</a></p><blockquote><p>Ansible Documentation 是 Ansible 官方文档，我的建议还是对英文不要害怕，多动手查多敲命令去理解</p></blockquote><p>Ansible Documentation - <a href="http://docs.ansible.com/ansible/latest/index.html" target="_blank" rel="noopener">http://docs.ansible.com/ansible/latest/index.html</a></p><blockquote><p>如果大家需要使用 Role 推荐阅读 Ansible Best Practices</p></blockquote><p><a href="https://docs.ansible.com/ansible/2.8/user_guide/playbooks_best_practices.html" target="_blank" rel="noopener">Ansible Best Practices</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">inventories/</span><br><span class="line">   production/</span><br><span class="line">      hosts               # inventory file for production servers</span><br><span class="line">      group_vars/</span><br><span class="line">         group1.yml       # here we assign variables to particular groups</span><br><span class="line">         group2.yml</span><br><span class="line">      host_vars/</span><br><span class="line">         hostname1.yml    # here we assign variables to particular systems</span><br><span class="line">         hostname2.yml</span><br><span class="line"></span><br><span class="line">   staging/</span><br><span class="line">      hosts               # inventory file for staging environment</span><br><span class="line">      group_vars/</span><br><span class="line">         group1.yml       # here we assign variables to particular groups</span><br><span class="line">         group2.yml</span><br><span class="line">      host_vars/</span><br><span class="line">         stagehost1.yml   # here we assign variables to particular systems</span><br><span class="line">         stagehost2.yml</span><br><span class="line"></span><br><span class="line">library/                  # if any custom modules, put them here (optional)</span><br><span class="line">module_utils/             # if any custom module_utils to support modules, put them here (optional)</span><br><span class="line">filter_plugins/           # if any custom filter plugins, put them here (optional)</span><br><span class="line"></span><br><span class="line">site.yml                  # master playbook</span><br><span class="line">webservers.yml            # playbook for webserver tier</span><br><span class="line">dbservers.yml             # playbook for dbserver tier</span><br><span class="line"></span><br><span class="line">files/                    # here we assign files for simple plays</span><br><span class="line">plays/                    # here we assign plays as the entrance</span><br><span class="line">tasks/                    # here we assign tasks for plays to call</span><br><span class="line"></span><br><span class="line">roles/</span><br><span class="line">    common/               # this hierarchy represents a &quot;role&quot;</span><br><span class="line">        tasks/            #</span><br><span class="line">            main.yml      #  &lt;-- tasks file can include smaller files if warranted</span><br><span class="line">        handlers/         #</span><br><span class="line">            main.yml      #  &lt;-- handlers file</span><br><span class="line">        templates/        #  &lt;-- files for use with the template resource</span><br><span class="line">            ntp.conf.j2   #  &lt;------- templates end in .j2</span><br><span class="line">        files/            #</span><br><span class="line">            bar.txt       #  &lt;-- files for use with the copy resource</span><br><span class="line">            foo.sh        #  &lt;-- script files for use with the script resource</span><br><span class="line">        vars/             #</span><br><span class="line">            main.yml      #  &lt;-- variables associated with this role</span><br><span class="line">        defaults/         #</span><br><span class="line">            main.yml      #  &lt;-- default lower priority variables for this role</span><br><span class="line">        meta/             #</span><br><span class="line">            main.yml      #  &lt;-- role dependencies</span><br><span class="line">        library/          # roles can also include custom modules</span><br><span class="line">        module_utils/     # roles can also include custom module_utils</span><br><span class="line">        lookup_plugins/   # or other types of plugins, like lookup in this case</span><br><span class="line"></span><br><span class="line">    webtier/              # same kind of structure as &quot;common&quot; was above, done for the webtier role</span><br><span class="line">    monitoring/           # &quot;&quot;</span><br><span class="line">    fooapp/               # &quot;&quot;</span><br></pre></td></tr></table></figure><h2 id="提升-Ansible-执行效率的插件"><a href="#提升-Ansible-执行效率的插件" class="headerlink" title="提升 Ansible 执行效率的插件"></a>提升 Ansible 执行效率的插件</h2><p>众所周知，Ansible 是基于 ssh(当然还有 telnet，winrm 等连接插件)的自动化配置管理工具，其简单易用，无 agent 式的工作方式在很多场景中都有不少优势，不过也是由于这种工作方式导致了它没有其他 c/s 类的工具执行效率高，饱受其他 C/S 类工具使用者的讥讽，对此，Ansible 官方也对 Ansible 的速度效率做了不少优化手段。</p><table><thead><tr><th></th><th>参数名 / 优化类别</th><th>说明</th></tr></thead><tbody><tr><td></td><td>fact cache</td><td>将 facts 信息第一次收集后缓存到 <code>memory</code> 或者 <code>redis</code> 或者文件中。</td><td></td></tr><tr><td></td><td>gather_subset</td><td>可选择性的收集 <code>network</code>,<code>hardware</code> 等信息，而不是全部</td><td></td></tr><tr><td></td><td>control_path</td><td>开启 <code>ssh socket</code> 持久化，复用 ssh 连接</td><td></td></tr><tr><td></td><td>pipelinling</td><td>开启 <code>ssh pipelining</code>, 客户端从管道中读取执行渲染后的脚本，而不是在客户端创建临时文件</td><td></td></tr><tr><td></td><td>fork</td><td>提高并行执行主机的数量</td><td></td></tr><tr><td></td><td>serial</td><td>将 <code>play_hosts`</code>①` 中主机再分批执行</td><td></td></tr><tr><td></td><td>strategy</td><td>默认 <code>linear</code>, 每个主机的单个 task 执行完成会等待其他都完成后再执行下个任务，设置 <code>free</code> 可不等待其他主机，继续往下执行(看起来会比较乱)，还有一个选项 <code>host_pinned</code>，我也不知道干嘛的</td><td></td></tr></tbody></table><p>无意发现了一个 Mitogen 的 Ansible plugin（strategy plugin），当前已迭代到 0.29 版本，看介绍说能提升 1.2x ~ 7x 以上的执行效率，着实惊人！</p><p>它通过高效的远程过程调用来取代 ansible 默认的嵌入式与纯 python shell 调用，它不会优化模块本身的执行效率，只会尽可能快的②去执行模块获取返回 (执行模块前也是有一系列连接，发送数据，传输渲染脚本等操作的) 来提高整体的效率，特性如下</p><p><strong>Expect a 1.25x - 7x speedup</strong> and a <strong>CPU usage reduction of at least 2x</strong>, depending on network conditions, modules executed, and time already spent by targets on useful work. Mitogen cannot improve a module once it is executing, it can only ensure the module executes as quickly as possible.</p><ul><li><p><strong>One connection is used per target</strong>, in addition to one sudo invocation per user account. This is much better than SSH multiplexing combined with pipelining, as significant state can be maintained in RAM between steps, and system logs aren’t spammed with repeat authentication events.</p></li><li><p><strong>A single network roundtrip is used</strong> to execute a step whose code already exists in RAM on the target. Eliminating multiplexed SSH channel creation saves 4 ms runtime per 1 ms of network latency for every playbook step.</p></li><li><p><strong>Processes are aggressively reused</strong>, avoiding the cost of invoking Python and recompiling imports, saving 300-800 ms for every playbook step.</p></li><li><p>Code is ephemerally cached in RAM, <strong>reducing bandwidth usage by an order of magnitude</strong> compared to SSH pipelining, with around 5x fewer frames traversing the network in a typical run.</p></li><li><p><strong>Fewer writes to the target filesystem occur</strong>. In typical configurations, Ansible repeatedly rewrites and extracts ZIP files to multiple temporary directories on the target. Security issues relating to temporary files in cross-account scenarios are entirely avoided.</p></li></ul><p>The effect is most potent on playbooks that execute many <strong>short-lived actions</strong>, where Ansible’s overhead dominates the cost of the operation, for example when executing large <code>with_items</code> loops to run simple commands or write files.</p><p>大体就是执行过程中主机使用一个连接(默认每执行一个 <code>task</code> 或者 <code>loop</code> 循环都会重新打开一次连接的)；渲染的执行代码暂存于内存中；减少多路复用 <code>ssh</code> 隧道的时间消耗；减少临时文件传输的带宽；代码重用，避免代码的重新编译成本等</p><p>实现原理的话，可以去看下<a href="https://mitogen.readthedocs.io/en/latest/howitworks.html" title="官网解释" target="_blank" rel="noopener">官网解释</a>，反正我是没怎么看懂</p><p><em>① . <code>play_hosts</code> 为内置参数，指当前正在执行的 playbook 中的主机列表 </em></p><p><em>②. <code>尽可能快的</code> 指到运行模块前的阶段 </em></p><ol><li>Download and extract <a href="https://networkgenomics.com/try/mitogen-0.2.9.tar.gz" target="_blank" rel="noopener">mitogen-0.2.9.tar.gz</a></li><li>Modify <code>ansible.cfg</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[defaults]</span><br><span class="line">strategy_plugins = /path/to/mitogen-0.2.9/ansible_mitogen/plugins/strategy</span><br><span class="line">strategy = mitogen_linear</span><br></pre></td></tr></table></figure><p>The <code>strategy</code> key is optional. If omitted, the <code>ANSIBLE_STRATEGY=mitogen_linear</code> environment variable can be set on a per-run basis. Like <code>mitogen_linear</code>, the <code>mitogen_free</code> and <code>mitogen_host_pinned</code> strategies exists to mimic the <code>free</code> and <code>host_pinned</code> strategies.</p><p><a href="https://networkgenomics.com/ansible/" target="_blank" rel="noopener">https://networkgenomics.com/ansible/</a></p><p><a href="https://mitogen.networkgenomics.com/ansible_detailed.html" target="_blank" rel="noopener">https://mitogen.networkgenomics.com/ansible_detailed.html</a></p><h2 id="基于-Ansible-的开源项目"><a href="#基于-Ansible-的开源项目" class="headerlink" title="基于 Ansible 的开源项目"></a>基于 Ansible 的开源项目</h2><blockquote><p>第一个是 ansible 官方开源项目，其他都是和 ansible 相关的运维平台开源项目，推荐学习和参考</p></blockquote><p>Ansible - <a href="https://github.com/ansible/ansible" target="_blank" rel="noopener">https://github.com/ansible/ansible</a></p><p>Jumpserver - <a href="http://www.jumpserver.org/" target="_blank" rel="noopener">http://www.jumpserver.org/</a> </p><p>OpsManage - <a href="https://github.com/welliamcao/OpsManage" target="_blank" rel="noopener">https://github.com/welliamcao/OpsManage</a> </p><p>spug - <a href="https://github.com/openspug/spug" target="_blank" rel="noopener">https://github.com/openspug/spug</a></p><p>BigOps - <a href="http://www.bigops.com/" target="_blank" rel="noopener">http://www.bigops.com/</a></p><h2 id="Ansible-项目实践"><a href="#Ansible-项目实践" class="headerlink" title="Ansible 项目实践"></a>Ansible 项目实践</h2><blockquote><p>以下内容来自于《基于 ansible 的主机自动化配置管理》项目，基于 ansible 目前可以满足生产环境所有基线要求，相信对大家有一定的参考价值</p></blockquote><p><img src="https://raw.githubusercontent.com/wsgzao/storage-public/master/img/20200122143435.png" alt=""></p><p><img src="https://raw.githubusercontent.com/wsgzao/storage-public/master/img/20200122143458.png" alt=""></p><h3 id="ansible-部署"><a href="#ansible-部署" class="headerlink" title="ansible 部署"></a>ansible 部署</h3><blockquote><p>因为生产环境为内外网物理隔离，所有的安装部署都是离线进行的</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Install Packages</span></span><br><span class="line">yum install gcc zlib zlib-devel openssl-devel -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install Python</span></span><br><span class="line">tar xf Python-2.7.14.tgz</span><br><span class="line"><span class="built_in">cd</span> Python-2.7.14</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line"><span class="comment"># renew python env</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ImportError: No module named six.moves</span></span><br><span class="line">tar xf six-1.11.0.tar.gz </span><br><span class="line"><span class="built_in">cd</span> six-1.11.0</span><br><span class="line">python setup.py install</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line"><span class="comment"># ImportError: No module named packaging.version</span></span><br><span class="line">tar xf packaging-17.1.tar.gz </span><br><span class="line"><span class="built_in">cd</span> packaging-17.1</span><br><span class="line">python setup.py install</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line"><span class="comment"># ImportError: No module named pyparsing</span></span><br><span class="line">tar xf pyparsing-2.2.0.tar.gz </span><br><span class="line"><span class="built_in">cd</span> pyparsing-2.2.0</span><br><span class="line">python setup.py install</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line"><span class="comment"># ImportError: No module named appdirs</span></span><br><span class="line">tar xf appdirs-1.4.3.tar.gz </span><br><span class="line"><span class="built_in">cd</span> appdirs-1.4.3</span><br><span class="line">python setup.py install</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install Setuptools</span></span><br><span class="line">unzip setuptools-38.5.2.zip</span><br><span class="line"><span class="built_in">cd</span> setuptools-38.5.2</span><br><span class="line">python setup.py install</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install pip</span></span><br><span class="line">tar xf pip-9.0.1.tar.gz</span><br><span class="line"><span class="built_in">cd</span> pip-9.0.1</span><br><span class="line">python setup.py install</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line"><span class="comment"># pip 离线下载</span></span><br><span class="line"><span class="comment"># pip download -d DIR -r requirements.txt</span></span><br><span class="line">pip download -d ~/ansible/ ansible</span><br><span class="line"></span><br><span class="line"><span class="comment"># pip 离线安装</span></span><br><span class="line"><span class="comment"># pip install --no-index --find-links=DIR -r requirements.txt</span></span><br><span class="line">pip install --no-index --find-links=pip-ansible-2.3.3/ -r requirements.txt</span><br><span class="line">pip install --no-index --find-links=pip-ansible-2.5.0/ -r requirements.txt -U</span><br><span class="line"></span><br><span class="line"><span class="comment"># pip 离线安装 pipenv</span></span><br><span class="line">pip install --no-index --find-links=pip-pipenv/ pipenv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 pipenv 创建虚拟环境</span></span><br><span class="line">mkdir win_ansible</span><br><span class="line"><span class="built_in">cd</span> win_ansible</span><br><span class="line">pipenv shell</span><br><span class="line">pip install --no-index --find-links=pip-ansible-2.5.2/ -r requirements.txt</span><br></pre></td></tr></table></figure><h3 id="ansible-cfg-配置解析"><a href="#ansible-cfg-配置解析" class="headerlink" title="ansible.cfg 配置解析"></a>ansible.cfg 配置解析</h3><blockquote><p>ansible.cfg 不影响执行结果但合理的配置会有效提升效率</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置文件路径（优先级）</span></span><br><span class="line">./ansible.cfg</span><br><span class="line">/etc/ansible/ansible.cfg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置文件内容</span></span><br><span class="line">[defaults]</span><br><span class="line"><span class="comment">#inventory = /etc/ansible/hosts</span></span><br><span class="line"><span class="comment">#log_path = /var/log/ansible.log</span></span><br><span class="line">forks = 100 <span class="comment"># 设置并发数</span></span><br><span class="line">host_key_checking = False <span class="comment"># 不检查 SSH 主机登录的密钥</span></span><br><span class="line">display_skipped_hosts = False <span class="comment"># 不显示已跳过的主机</span></span><br><span class="line">retry_files_enabled = False <span class="comment"># 不创建任务失败后的重试文件</span></span><br><span class="line"><span class="comment"># 按照 1d 设置 setup 缓存，优化执行效率</span></span><br><span class="line">gathering = smart</span><br><span class="line">fact_caching_timeout = 86400</span><br><span class="line">fact_caching = jsonfile</span><br><span class="line">fact_caching_connection = cachedir</span><br></pre></td></tr></table></figure><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><ul><li>服务端操作系统：RHEL 6/7（Windows 不可作为控制端）</li><li>服务端 Python 版本：2.7.14（实测安装完成无需额外调整）</li><li>Ansible 版本：2.3.3.0（实测 2.4 以上版本已不支持 rhel5.5，客户端需 simplejson）</li><li>管理对象：目前主要针对 RHEL 5/6/7（Windows 使用高版本 Ansible）</li><li>基线标准：参考《主机岗配置基线 v1.1.xlsx》</li></ul><blockquote><p>服务端</p></blockquote><ul><li>操作系统版本：RHEL 6/7</li><li>Python 版本：2.7.14</li><li>安装方式：pip 离线安装依赖包</li></ul><blockquote><p>客户端</p></blockquote><ul><li>操作系统版本：RHEL 5/6/7</li><li>非最小模式安装无需做调整</li><li>RHEL5.5 需要安装 simplejson</li></ul><blockquote><p>核心用法</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检测 ansible 是否可以正常访问主机</span></span><br><span class="line">ansible-playbook -i hosts playbooks/ping.yml -v</span><br><span class="line"><span class="comment"># 配置好 inventory，执行以下命令创建用户并建立信任关系</span></span><br><span class="line">ansible-playbook -i hosts playbooks/user/default.yml -v</span><br><span class="line"><span class="comment"># 配置时间同步 / 进程服务 / 基线文件</span></span><br><span class="line">ansible-playbook -i hosts playbooks/baseline/cfgset.yml -v</span><br><span class="line">ansible-playbook -i hosts playbooks/baseline/cfgset.yml -v --tags=<span class="string">"repo"</span></span><br><span class="line">ansible-playbook -i hosts playbooks/baseline/cfgset.yml -v --skip-tags=<span class="string">"ntp,repo"</span></span><br><span class="line"><span class="comment"># 更新系统软件包和补丁包</span></span><br><span class="line">ansible-playbook -i hosts playbooks/baseline/pakset.yml -v</span><br><span class="line"><span class="comment"># 修改用户密码</span></span><br><span class="line">ansible-playbook -i hosts_changepw playbooks/user/changepw.yml -v -e <span class="string">"@userpass.json"</span></span><br><span class="line"><span class="comment"># 备份配置，支持自定义日期命名，默认为 "%Y%m%d"</span></span><br><span class="line">ansible-playbook -i hosts backup/backup.yml -v</span><br><span class="line"><span class="comment"># 恢复配置，支持按日期目录全局或者局部主机恢复</span></span><br><span class="line">ansible-playbook -i hosts backup/restore.yml -v -e <span class="string">"var_backup_date=20180305"</span></span><br></pre></td></tr></table></figure><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><ul><li>服务端操作系统：RHEL 6/7（Windows 不可作为控制端）</li><li>服务端 Python 版本：2.7.14（实测安装完成无需额外调整）</li><li>Ansible 版本：2.5.0（Windows 原生模块支持需要持续更新 Ansible 新版本）</li><li>管理对象：目前主要针对 Windows 7/2008/2012（不支持 xp/2003）</li><li>基线标准：参考《Windows 安全基线》</li></ul><blockquote><p>服务端</p></blockquote><ul><li>操作系统版本：RHEL 6/7</li><li>Python 版本：2.7.14</li><li>安装方式：pip 离线安装依赖包（目前使用 pipenv 切换管理 Linux 和 Windows）</li></ul><blockquote><p>客户端</p></blockquote><ul><li>操作系统版本：Window 7/2008/2012</li><li>WinRM（Windows 7/2008 需要升级至 Powershell v3.0）</li></ul><blockquote><p>核心用法</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检测 ansible 是否可以正常访问主机</span></span><br><span class="line">ansible-playbook -i hosts win_playbooks/ping.yml -v</span><br><span class="line"><span class="comment"># 配置好 inventory，执行以下命令创建用户并建立信任关系</span></span><br><span class="line">ansible-playbook -i hosts win_playbooks/user/default.yml -v</span><br><span class="line"><span class="comment"># 配置时间同步 / 进程服务 / 基线文件</span></span><br><span class="line">ansible-playbook -i hosts win_playbooks/baseline/cfgset.yml -v</span><br><span class="line">ansible-playbook -i hosts win_playbooks/baseline/cfgset.yml -v --tags=<span class="string">"wsus"</span></span><br><span class="line">ansible-playbook -i hosts win_playbooks/baseline/cfgset.yml -v --skip-tags=<span class="string">"ntp,wsus"</span></span><br><span class="line"><span class="comment"># 更新系统软件包和补丁包</span></span><br><span class="line">ansible-playbook -i hosts win_playbooks/baseline/pakset.yml -v</span><br><span class="line"><span class="comment"># 修改用户密码</span></span><br><span class="line">ansible-playbook -i win_hosts_changepw win_playbooks/user/changepw.yml -v -e <span class="string">"@userpass.json"</span></span><br><span class="line"><span class="comment"># 备份配置，支持自定义日期命名，默认为 "%Y%m%d"</span></span><br><span class="line">ansible-playbook -i win_hosts win_backup/backup.yml -v</span><br><span class="line"><span class="comment"># 恢复配置，支持按日期目录全局或者局部主机恢复</span></span><br><span class="line">ansible-playbook -i win_hosts win_backup/restore.yml -v -e <span class="string">"var_backup_date=20180305"</span></span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><blockquote><p>很抱歉我暂时不能分享全部信息，但是这并不妨碍技术上的交流，我会逐步分享有价值的可公开代码</p></blockquote><ol><li>遵循 what/why/how 思路，要理解 ansible 能解决什么问题，为什么选择 ansible，怎么使用 ansible 去解决</li><li>Ansible 学习成本低但不等同于没有难度，学习路径推荐参考官方文档并积极实践，官网没有答案要善用 Google 搜索</li><li>Ansible 纯后台模式只解决了部分问题，还有更多需求要通过基于 Ansible 的自动化运维平台来实现，拥抱开源技术不能固步自封</li></ol><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://docs.ansible.com/ansible/latest/index.html" target="_blank" rel="noopener">Ansible Documentation</a></p><p><a href="https://ansible.github.io/workshops/" target="_blank" rel="noopener">ansible-workshops</a></p><p><a href="https://www.cnblogs.com/michael-xiang/p/10462749.html" target="_blank" rel="noopener">Ansible 入门指南 - 学习总结</a></p><p><a href="http://showme.codes/2019-09-19/understand-ansible/" target="_blank" rel="noopener">这样理解 Ansible 更容易</a></p><p><a href="https://anoyi.com/p/62388a4fcbc6" target="_blank" rel="noopener">前世今生：1 小时学会 Ansible</a></p><p><a href="https://lework.github.io/2016/11/19/Ansible-zhuan-ti-wen-zhang-zong-lan/" target="_blank" rel="noopener">Ansible 专题文章总揽</a></p><p><a href="https://www.zsythink.net/archives/tag/ansible/page/6/" target="_blank" rel="noopener">朱双印 - ansible 系列</a></p><p><a href="http://www.cnblogs.com/f-ck-need-u/p/7576137.html#ansible" target="_blank" rel="noopener">骏马金龙 - ansible </a></p><p><a href="https://www.bilibili.com/video/av33611758?from=search&amp;seid=7420958755659258683" target="_blank" rel="noopener">B 站视频 - ansible 教程 - 马哥 2019 全新 ansible 入门到精通</a></p><p><a href="https://www.cnblogs.com/kevingrace/p/11647338.html" target="_blank" rel="noopener">Ansible 日常使用技巧 - 运维总结</a></p><p><a href="http://blog.leanote.com/post/benmo/Ansible-%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7" target="_blank" rel="noopener">Ansible– 奇淫技巧</a></p>]]></content>
    
    <summary type="html">
    
      Ansible is Simple IT Automation
    
    </summary>
    
      <category term="学习 | Study" scheme="https://wsgzao.github.io/categories/%E5%AD%A6%E4%B9%A0-Study/"/>
    
    
  </entry>
  
</feed>
